define("WTF_MOB.controller$Analytics_Init", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "WTF_MOB.controller$Analytics_Init.GetDeviceInformationJS", "WTF_MBP.controller$FB_SetCrashlytics", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.controller$FB_SetAnalyticsCollectionEnabled", "WTF_MBP.controller$FB_SetUserID"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, WTF_MOB_controller_Analytics_Init_GetDeviceInformationJS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.analytics_Init$Action = function (callContext) {
callContext = controller.callContext(callContext);
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var fB_SetCrashlyticsVar = new OS.DataTypes.VariableHolder();
var setAnalyticsCollectionEnabledVar = new OS.DataTypes.VariableHolder();
var setUserIdVar = new OS.DataTypes.VariableHolder();
var getDeviceInformationJSResult = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
getDeviceInformationJSResult.value = controller.safeExecuteJSNode(WTF_MOB_controller_Analytics_Init_GetDeviceInformationJS, "GetDeviceInformation", "Analytics_Init", {
CordovaVersion: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Model: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Platform: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
UUID: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Version: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Manufacturer: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
IsVirtual: OS.DataTypes.JSConversions.basicTypeToJS(false, OS.Types.Boolean, true),
Serial: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true)
}, function ($parameters) {
var jsNodeResult = new (controller.constructor.getVariableGroupType("WTF_MOB.Analytics.Analytics_Init$getDeviceInformationJSResult"))();
jsNodeResult.cordovaVersionOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.CordovaVersion, OS.Types.Text);
jsNodeResult.modelOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Model, OS.Types.Text);
jsNodeResult.platformOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Platform, OS.Types.Text);
jsNodeResult.uUIDOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.UUID, OS.Types.Text);
jsNodeResult.versionOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Version, OS.Types.Text);
jsNodeResult.manufacturerOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Manufacturer, OS.Types.Text);
jsNodeResult.isVirtualOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.IsVirtual, OS.Types.Boolean);
jsNodeResult.serialOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Serial, OS.Types.Text);
return jsNodeResult;
}, {}, {});
// Execute Action: FB_SetCrashlytics
return WTF_MBPController.default.fB_SetCrashlytics$Action(getDeviceInformationJSResult.value.uUIDOut, callContext).then(function (value) {
fB_SetCrashlyticsVar.value = value;
}).then(function () {
// Execute Action: SetUserId
return WTF_MBPController.default.fB_SetUserID$Action(getDeviceInformationJSResult.value.uUIDOut, callContext).then(function (value) {
setUserIdVar.value = value;
});
}).then(function () {
// Execute Action: SetAnalyticsCollectionEnabled
return WTF_MBPController.default.fB_SetAnalyticsCollectionEnabled$Action(true, callContext).then(function (value) {
setAnalyticsCollectionEnabledVar.value = value;
});
});
}).catch(function (ex) {
OS.Logger.trace("Analytics.Analytics_Init", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync();

});
}

throw ex;
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Analytics.Analytics_Init$getDeviceInformationJSResult", [{
name: "CordovaVersion",
attrName: "cordovaVersionOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Model",
attrName: "modelOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Platform",
attrName: "platformOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "UUID",
attrName: "uUIDOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Version",
attrName: "versionOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Manufacturer",
attrName: "manufacturerOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsVirtual",
attrName: "isVirtualOut",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Serial",
attrName: "serialOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.analytics_Init$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.analytics_Init$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});
define("WTF_MOB.controller$Analytics_Init.GetDeviceInformationJS", [], function () {
return function ($parameters, $actions, $roles, $public) {
//Verify If is available
document.addEventListener("deviceready", onDeviceReady, false);

// Function to Get Device Information
function onDeviceReady() {
   
    $parameters.CordovaVersion = device.cordova;
    $parameters.Model = device.model;
    $parameters.Platform = device.platform;
    $parameters.UUID = device.uuid;
    $parameters.Version = device.version;
    $parameters.Manufacturer = device.manufacturer;
    $parameters.IsVirtual = device.isVirtual;
    $parameters.Serial =  device.serial;

}
};
});

define("WTF_MOB.controller$Analytics_SendEvent", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "WTF_MOB.controller$Analytics_SendEvent.GA_SendEventJS", "WTF_MBP.controller$FB_LogEvent", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.controller$GetConfigValueAsText_MBP"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, WTF_MOB_controller_Analytics_SendEvent_GA_SendEventJS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.analytics_SendEvent$Action = function (actionIn, categoryIn, labelIn, valueIn, metric_AmountIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Analytics.Analytics_SendEvent$vars"))());
vars.value.actionInLocal = actionIn;
vars.value.categoryInLocal = categoryIn;
vars.value.labelInLocal = labelIn;
vars.value.valueInLocal = valueIn;
vars.value.metric_AmountInLocal = metric_AmountIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var fB_LogEventVar = new OS.DataTypes.VariableHolder();
var getConfig_AppIdVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
if(((vars.value.actionInLocal === "click"))) {
// Execute Action: LogMessage
OS.SystemActions.logMessage((((((((("Action [Click] Category [" + vars.value.categoryInLocal) + "] Label [") + vars.value.labelInLocal) + "] Value [") + (vars.value.valueInLocal).toString()) + "] Metric_Amount [") + vars.value.metric_AmountInLocal) + "]"), "Analytics_SendEvent", callContext);
}

// Execute Action: GetConfig_AppId
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("ANALYTICS_APPID", callContext).then(function (value) {
getConfig_AppIdVar.value = value;
}).then(function () {
controller.safeExecuteJSNode(WTF_MOB_controller_Analytics_SendEvent_GA_SendEventJS, "GA_SendEvent", "Analytics_SendEvent", {
Value: OS.DataTypes.JSConversions.basicTypeToJS((vars.value.valueInLocal).toString(), OS.Types.Text, true),
Label: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.labelInLocal, OS.Types.Text, true),
Category: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.categoryInLocal, OS.Types.Text, true),
Metric_Amount: OS.DataTypes.JSConversions.basicTypeToJS(OS.BuiltinFunctions.textToInteger(vars.value.metric_AmountInLocal), OS.Types.Integer, true),
Action: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.actionInLocal, OS.Types.Text, true),
AppId: OS.DataTypes.JSConversions.basicTypeToJS(getConfig_AppIdVar.value.valueOut, OS.Types.Text, true)
}, function ($parameters) {
}, {}, {});
// Execute Action: FB_LogEvent
return WTF_MBPController.default.fB_LogEvent$Action(vars.value.actionInLocal, "Category", vars.value.categoryInLocal, "Label", vars.value.labelInLocal, "Value", (vars.value.valueInLocal).toString(), "Amount", vars.value.metric_AmountInLocal, "", "", callContext).then(function (value) {
fB_LogEventVar.value = value;
});
});
}).catch(function (ex) {
OS.Logger.trace("Analytics.Analytics_SendEvent", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync();

});
}

throw ex;
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Analytics.Analytics_SendEvent$vars", [{
name: "Action",
attrName: "actionInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Category",
attrName: "categoryInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Label",
attrName: "labelInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Value",
attrName: "valueInLocal",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Metric_Amount",
attrName: "metric_AmountInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.analytics_SendEvent$Action = function (actionIn, categoryIn, labelIn, valueIn, metric_AmountIn) {
actionIn = (actionIn === undefined) ? "" : actionIn;
categoryIn = (categoryIn === undefined) ? "" : categoryIn;
labelIn = (labelIn === undefined) ? "" : labelIn;
valueIn = (valueIn === undefined) ? 0 : valueIn;
metric_AmountIn = (metric_AmountIn === undefined) ? "" : metric_AmountIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.analytics_SendEvent$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(actionIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(categoryIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(labelIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(valueIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(metric_AmountIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});
define("WTF_MOB.controller$Analytics_SendEvent.GA_SendEventJS", [], function () {
return function ($parameters, $actions, $roles, $public) {
function waitForGtag_SendEvent(countRetries)
{
    if(typeof gtag !== "undefined")
    {
        if($parameters.Metric_Amount>0)
        {
            gtag('config', $parameters.AppId, 
            {
              'custom_map': {'metric1': 'montante'}
            });
            
            gtag('event', $parameters.Action, {
              'event_category': $parameters.Category,
              'event_label': $parameters.Label,
              'value': $parameters.Value,
              'montante': $parameters.Metric_Amount
            });
        }
        else
        {
            gtag('event', $parameters.Action, {
              'event_category': $parameters.Category,
              'event_label': $parameters.Label,
              'value': $parameters.Value
            });
        }
    }
    else if(countRetries<=5)
    {
        setTimeout(function(){
          waitForGtag_SendEvent(countRetries++);
        }, 1000);
    }
}

waitForGtag_SendEvent(0);
};
});

define("WTF_MOB.controller$Analytics_TrackException", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "Essentials_MOB.controller", "WTF_MOB.controller$Analytics_TrackException.GA_ExceptionsJS", "WTF_MBP.controller$FB_LogError", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "Essentials_MOB.controller$CheckNetworkStatus", "WTF_MOB.referencesHealth$Essentials_MOB"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, Essentials_MOBController, WTF_MOB_controller_Analytics_TrackException_GA_ExceptionsJS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.analytics_TrackException$Action = function (descriptionIn, isFatalIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Analytics.Analytics_TrackException$vars"))());
vars.value.descriptionInLocal = descriptionIn;
vars.value.isFatalInLocal = isFatalIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var fB_LogErrorVar = new OS.DataTypes.VariableHolder();
var checkNetworkStatusVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CheckNetworkStatus
return Essentials_MOBController.default.checkNetworkStatus$Action(callContext).then(function (value) {
checkNetworkStatusVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((checkNetworkStatusVar.value.isOnlineOut)) {
controller.safeExecuteJSNode(WTF_MOB_controller_Analytics_TrackException_GA_ExceptionsJS, "GA_Exceptions", "Analytics_TrackException", {
Description: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.descriptionInLocal, OS.Types.Text, true),
IsFatal: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.isFatalInLocal, OS.Types.Boolean, true)
}, function ($parameters) {
}, {}, {});
// Execute Action: FB_LogError
return WTF_MBPController.default.fB_LogError$Action(vars.value.descriptionInLocal, callContext).then(function (value) {
fB_LogErrorVar.value = value;
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("Analytics.Analytics_TrackException", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync();

});
}

throw ex;
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Analytics.Analytics_TrackException$vars", [{
name: "Description",
attrName: "descriptionInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsFatal",
attrName: "isFatalInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.analytics_TrackException$Action = function (descriptionIn, isFatalIn) {
descriptionIn = (descriptionIn === undefined) ? "" : descriptionIn;
isFatalIn = (isFatalIn === undefined) ? false : isFatalIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.analytics_TrackException$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(descriptionIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isFatalIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});
define("WTF_MOB.controller$Analytics_TrackException.GA_ExceptionsJS", [], function () {
return function ($parameters, $actions, $roles, $public) {
function waitForGtag_Exception(countRetries)
{
    if(typeof gtag !== "undefined")
    {
		gtag('event', 'exception', {
		  'description': $parameters.Description,
		  'fatal': $parameters.IsFatal
		});
    }
    else if(countRetries<=5)
    {
        setTimeout(function(){
          waitForGtag_Exception(countRetries++);
        }, 1000);
    }
}

waitForGtag_Exception(0);
};
});

define("WTF_MOB.controller$CheckCordovaIsDefinedAndLockOrientation", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "CommonPlugin.model", "ScreenOrientationPlugin.controller", "WTF_MBP.controller$CheckIsBrowser", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "CommonPlugin.model$ErrorRec", "WTF_MOB.referencesHealth$CommonPlugin", "ScreenOrientationPlugin.controller$LockOrientation", "WTF_MOB.referencesHealth$ScreenOrientationPlugin", "WTF_MOB.controller$GetAppConfigIsDev"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, CommonPluginModel, ScreenOrientationPluginController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.checkCordovaIsDefinedAndLockOrientation$Action = function (isInvalidPermissionsIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.CheckCordovaIsDefinedAndLockOrientation$vars"))());
vars.value.isInvalidPermissionsInLocal = isInvalidPermissionsIn;
var checkIsBrowserVar = new OS.DataTypes.VariableHolder();
var lockPortraitOrientationVar = new OS.DataTypes.VariableHolder();
var getAppConfigIsDevVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LockPortraitOrientation
lockPortraitOrientationVar.value = ScreenOrientationPluginController.default.lockOrientation$Action("portrait", callContext);

return OS.Flow.executeSequence(function () {
if((!(vars.value.isInvalidPermissionsInLocal))) {
// Execute Action: GetAppConfigIsDev
return WTF_MOBController.default.getAppConfigIsDev$Action(callContext).then(function (value) {
getAppConfigIsDevVar.value = value;
}).then(function () {
// IsDev?
if((!(getAppConfigIsDevVar.value.isDevOut))) {
// Execute Action: CheckIsBrowser
checkIsBrowserVar.value = WTF_MBPController.default.checkIsBrowser$Action(callContext);

// NotAbleToUseCordova?
if(((checkIsBrowserVar.value.isBrowserOut === true))) {
// Raise Error: CordovaIsNotDefined
throw new OS.Exceptions.Exceptions.UserException("WTF_MOB.CordovaIsNotDefined", "Cordova is not defined");
}

}

});
}

});
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.CheckCordovaIsDefinedAndLockOrientation$vars", [{
name: "IsInvalidPermissions",
attrName: "isInvalidPermissionsInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.checkCordovaIsDefinedAndLockOrientation$Action = function (isInvalidPermissionsIn) {
isInvalidPermissionsIn = (isInvalidPermissionsIn === undefined) ? false : isInvalidPermissionsIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.checkCordovaIsDefinedAndLockOrientation$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isInvalidPermissionsIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("WTF_MOB.controller$CheckIfUserHasEverLoggedIn", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "CommonPlugin.model", "BuildInfoPlugin.controller", "WTF_MBP.controller", "WTF_MBP.model", "CommonPlugin.model$ErrorRec", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$CommonPlugin", "BuildInfoPlugin.controller$GetBuildInfo", "WTF_MOB.referencesHealth$BuildInfoPlugin", "WTF_MOB.model$Local_APP_ACCESS_CONTROLRecord", "WTF_MBP.controller$CreateOrUpdateLocal_APP_ACCESS_CONTROL_Logic", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.model$Local_APP_ACCESS_CONTROLRec", "WTF_MOB.model$Local_APP_ACCESS_CONTROLRecordList", "WTF_MOB.model$Local_USER_NOS_INFORecordList", "WTF_MBP.model$Local_USER_NOS_INFORec", "WTF_MBP.entities"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, CommonPluginModel, BuildInfoPluginController, WTF_MBPController, WTF_MBPModel) {
var OS = OutSystems.Internal;
WTF_MOBController.default.checkIfUserHasEverLoggedIn$Action = function (isDemoIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.CheckIfUserHasEverLoggedIn$vars"))());
vars.value.isDemoInLocal = isDemoIn;
var getBuildInfoVar = new OS.DataTypes.VariableHolder();
var createOrUpdateLocal_APP_ACCESS_CONTROL_LogicVar = new OS.DataTypes.VariableHolder();
var getAccessControlsDemoVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(WTF_MOBModel.Local_APP_ACCESS_CONTROLRecordList))());
var getLocalUSERINFOESVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(WTF_MOBModel.Local_USER_NOS_INFORecordList))());
var getAccessControlsVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(WTF_MOBModel.Local_APP_ACCESS_CONTROLRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.CheckIfUserHasEverLoggedIn$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage
OS.SystemActions.logMessage(((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Entering the check if has ever logged in..."), "WTF_MOB", callContext);
// Aggregate: GetLocalUSERINFOES
var getLocalUSERINFOESAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = WTF_MOBModel.Local_USER_NOS_INFORecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6";
} else {
selectSql += "\"ENLocal_USER_NOS_INFO\".\"Uid\" o0, \"ENLocal_USER_NOS_INFO\".\"Name\" o1, \"ENLocal_USER_NOS_INFO\".\"Birth_date\" o2, \"ENLocal_USER_NOS_INFO\".\"Gender\" o3, \"ENLocal_USER_NOS_INFO\".\"Username\" o4, \"ENLocal_USER_NOS_INFO\".\"Picture\" o5, \"ENLocal_USER_NOS_INFO\".\"CreatedAt\" o6";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_p9g_Local_USER_NOS_INFO\" \"ENLocal_USER_NOS_INFO\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, WTF_MOBModel.Local_USER_NOS_INFORecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_USER_NOS_INFOAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalUSERINFOESVar.value;
});
};
return getLocalUSERINFOESAggr().then(function () {
// Execute Action: LogMessage2
OS.SystemActions.logMessage((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "User NOS ID: ") + getLocalUSERINFOESVar.value.listOut.getCurrent(callContext.iterationContext).local_USER_NOS_INFOAttr.uidAttr), "WTF_MOB", callContext);
// UserId = GetLocalUSERINFOES.List.Current.Local_USER_NOS_INFO.Uid
vars.value.userIdVar = getLocalUSERINFOESVar.value.listOut.getCurrent(callContext.iterationContext).local_USER_NOS_INFOAttr.uidAttr;
}).then(function () {
// IsDemo?
return OS.Flow.executeSequence(function () {
if((vars.value.isDemoInLocal)) {
// Aggregate: GetAccessControlsDemo
var getAccessControlsDemoAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = WTF_MOBModel.Local_APP_ACCESS_CONTROLRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_APP_ACCESS_CONTROL\".\"Id\" o0, \"ENLocal_APP_ACCESS_CONTROL\".\"UserID\" o1, \"ENLocal_APP_ACCESS_CONTROL\".\"LastAccess_AppBuildVersion\" o2, \"ENLocal_APP_ACCESS_CONTROL\".\"IsDemo\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_p9g_Local_APP_ACCESS_CONTROL\" \"ENLocal_APP_ACCESS_CONTROL\"";
fromAndWhereSql += " WHERE ((\"ENLocal_APP_ACCESS_CONTROL\".\"UserID\" = '') AND (\"ENLocal_APP_ACCESS_CONTROL\".\"IsDemo\" = 1))";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, WTF_MOBModel.Local_APP_ACCESS_CONTROLRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_APP_ACCESS_CONTROLAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getAccessControlsDemoVar.value;
});
};
return getAccessControlsDemoAggr().then(function () {
// EmptyRegister = GetAccessControlsDemo.List.Empty
vars.value.emptyRegisterVar = getAccessControlsDemoVar.value.listOut.isEmpty;
// Execute Action: LogMessage4
OS.SystemActions.logMessage(((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "APP Access ID: ") + OS.BuiltinFunctions.longIntegerToText(getAccessControlsDemoVar.value.listOut.getCurrent(callContext.iterationContext).local_APP_ACCESS_CONTROLAttr.idAttr)) + "\r\n") + "User ID: ") + getAccessControlsDemoVar.value.listOut.getCurrent(callContext.iterationContext).local_APP_ACCESS_CONTROLAttr.userIDAttr) + "\r\n") + "Build Version: ") + getAccessControlsDemoVar.value.listOut.getCurrent(callContext.iterationContext).local_APP_ACCESS_CONTROLAttr.lastAccess_AppBuildVersionAttr) + "\r\n") + "Demo: ") + (getAccessControlsDemoVar.value.listOut.getCurrent(callContext.iterationContext).local_APP_ACCESS_CONTROLAttr.isDemoAttr ? "True" : "False")), "WTF_MOB", callContext);
});
} else {
// Aggregate: GetAccessControls
var getAccessControlsAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = WTF_MOBModel.Local_APP_ACCESS_CONTROLRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstUserID = vars.value.userIdVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_APP_ACCESS_CONTROL\".\"Id\" o0, \"ENLocal_APP_ACCESS_CONTROL\".\"UserID\" o1, \"ENLocal_APP_ACCESS_CONTROL\".\"LastAccess_AppBuildVersion\" o2, \"ENLocal_APP_ACCESS_CONTROL\".\"IsDemo\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_p9g_Local_APP_ACCESS_CONTROL\" \"ENLocal_APP_ACCESS_CONTROL\"";
fromAndWhereSql += " WHERE ((\"ENLocal_APP_ACCESS_CONTROL\".\"UserID\" = :qpstUserID) AND (:qpstUserID <> ''))";
argsList.add("qpstUserID", /*TEXT*/ 0, qpstUserID);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, WTF_MOBModel.Local_APP_ACCESS_CONTROLRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_APP_ACCESS_CONTROLAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getAccessControlsVar.value;
});
};
return getAccessControlsAggr().then(function () {
// EmptyRegister = GetAccessControls.List.Empty
vars.value.emptyRegisterVar = getAccessControlsVar.value.listOut.isEmpty;
// Execute Action: LogMessage3
OS.SystemActions.logMessage(((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "APP Access ID: ") + OS.BuiltinFunctions.longIntegerToText(getAccessControlsVar.value.listOut.getCurrent(callContext.iterationContext).local_APP_ACCESS_CONTROLAttr.idAttr)) + "\r\n") + "User ID: ") + getAccessControlsVar.value.listOut.getCurrent(callContext.iterationContext).local_APP_ACCESS_CONTROLAttr.userIDAttr) + "\r\n") + "Build Version: ") + getAccessControlsVar.value.listOut.getCurrent(callContext.iterationContext).local_APP_ACCESS_CONTROLAttr.lastAccess_AppBuildVersionAttr) + "\r\n") + "Demo: ") + (getAccessControlsVar.value.listOut.getCurrent(callContext.iterationContext).local_APP_ACCESS_CONTROLAttr.isDemoAttr ? "True" : "False")), "WTF_MOB", callContext);
});
}

});
}).then(function () {
// EmptyAccessControl?
return OS.Flow.executeSequence(function () {
if((vars.value.emptyRegisterVar)) {
// Execute Action: GetBuildInfo
getBuildInfoVar.value = BuildInfoPluginController.default.getBuildInfo$Action(callContext);

// TempLocalAppAccessControl.Id = NullIdentifier
vars.value.tempLocalAppAccessControlVar.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
// TempLocalAppAccessControl.UserID = GetLocalUSERINFOES.List.Current.Local_USER_NOS_INFO.Uid
vars.value.tempLocalAppAccessControlVar.userIDAttr = getLocalUSERINFOESVar.value.listOut.getCurrent(callContext.iterationContext).local_USER_NOS_INFOAttr.uidAttr;
// TempLocalAppAccessControl.LastAccess_AppBuildVersion = GetBuildInfo.Version
vars.value.tempLocalAppAccessControlVar.lastAccess_AppBuildVersionAttr = getBuildInfoVar.value.versionOut;
// TempLocalAppAccessControl.IsDemo = IsDemo
vars.value.tempLocalAppAccessControlVar.isDemoAttr = vars.value.isDemoInLocal;
// Execute Action: CreateOrUpdateLocal_APP_ACCESS_CONTROL_Logic
return WTF_MBPController.default.createOrUpdateLocal_APP_ACCESS_CONTROL_Logic$Action(WTF_MOBModel.Local_APP_ACCESS_CONTROLRecord.fromStructure(vars.value.tempLocalAppAccessControlVar), callContext).then(function (value) {
createOrUpdateLocal_APP_ACCESS_CONTROL_LogicVar.value = value;
});
} else {
// HasLoggedIn = True
outVars.value.hasLoggedInOut = true;
}

});
});
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.CheckIfUserHasEverLoggedIn$vars", [{
name: "IsDemo",
attrName: "isDemoInLocal",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "TempLocalAppAccessControl",
attrName: "tempLocalAppAccessControlVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new WTF_MBPModel.Local_APP_ACCESS_CONTROLRec();
},
complexType: WTF_MBPModel.Local_APP_ACCESS_CONTROLRec
}, {
name: "UserId",
attrName: "userIdVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "EmptyRegister",
attrName: "emptyRegisterVar",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.CheckIfUserHasEverLoggedIn$outVars", [{
name: "HasLoggedIn",
attrName: "hasLoggedInOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.checkIfUserHasEverLoggedIn$Action = function (isDemoIn) {
isDemoIn = (isDemoIn === undefined) ? false : isDemoIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.checkIfUserHasEverLoggedIn$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isDemoIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
HasLoggedIn: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.hasLoggedInOut, OS.Types.Boolean, true)
};
});
};
});

define("WTF_MOB.controller$CheckIsIOS10", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "WTF_MOB.controller$CheckIsIOS10.GetDeviceInformationJS", "WTF_MBP.controller$Get_OperatingSystem", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, WTF_MOB_controller_CheckIsIOS10_GetDeviceInformationJS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.checkIsIOS10$Action = function (callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Javascript.CheckIsIOS10$vars"))());
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getOperatingSystemVar = new OS.DataTypes.VariableHolder();
var getDeviceInformationJSResult = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Javascript.CheckIsIOS10$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetOperatingSystem
getOperatingSystemVar.value = WTF_MBPController.default.get_OperatingSystem$Action(callContext);

// IOS?
return OS.Flow.executeSequence(function () {
if(((getOperatingSystemVar.value.operatingSystemOut === WTF_MOBModel.staticEntities.mobile_OperatingSystem.iOS))) {
return controller.safeExecuteAsyncJSNode(WTF_MOB_controller_CheckIsIOS10_GetDeviceInformationJS, "GetDeviceInformation", "CheckIsIOS10", {
DeviceModel: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
CordovaVersion: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Platform: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
UUID: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Version: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Manufacturer: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
IsSimulator: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
SerialNumber: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true)
}, function ($parameters) {
var jsNodeResult = new (controller.constructor.getVariableGroupType("WTF_MOB.Javascript.CheckIsIOS10$getDeviceInformationJSResult"))();
jsNodeResult.deviceModelOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.DeviceModel, OS.Types.Text);
jsNodeResult.cordovaVersionOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.CordovaVersion, OS.Types.Text);
jsNodeResult.platformOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Platform, OS.Types.Text);
jsNodeResult.uUIDOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.UUID, OS.Types.Text);
jsNodeResult.versionOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Version, OS.Types.Text);
jsNodeResult.manufacturerOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Manufacturer, OS.Types.Text);
jsNodeResult.isSimulatorOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.IsSimulator, OS.Types.Text);
jsNodeResult.serialNumberOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.SerialNumber, OS.Types.Text);
return jsNodeResult;
}, {}, {}).then(function (results) {
getDeviceInformationJSResult.value = results;
}).then(function () {
// Execute Action: LogMessage
OS.SystemActions.logMessage((((((((((((((((("DeviceModel [" + getDeviceInformationJSResult.value.deviceModelOut) + "] CordovaVersion [") + getDeviceInformationJSResult.value.cordovaVersionOut) + "] Platform [") + getDeviceInformationJSResult.value.platformOut) + "] UUID [") + getDeviceInformationJSResult.value.uUIDOut) + "] Version [") + getDeviceInformationJSResult.value.versionOut) + "] Manufacturer [") + getDeviceInformationJSResult.value.manufacturerOut) + "] IsSimulator [") + getDeviceInformationJSResult.value.isSimulatorOut) + "] SerialNumber [") + getDeviceInformationJSResult.value.serialNumberOut) + "]"), "Javascript1", callContext);
}).then(function () {
if(((OS.BuiltinFunctions.index(getDeviceInformationJSResult.value.versionOut, ".", 0, false, false) > -1))) {
// SystemVersion = TextToInteger
vars.value.systemVersionVar = OS.BuiltinFunctions.textToInteger(OS.BuiltinFunctions.substr(getDeviceInformationJSResult.value.versionOut, 0, OS.BuiltinFunctions.index(getDeviceInformationJSResult.value.versionOut, ".", 0, false, false)));
} else {
// SystemVersion = TextToInteger
vars.value.systemVersionVar = OS.BuiltinFunctions.textToInteger(getDeviceInformationJSResult.value.versionOut);
}

// IsIOS10?
if((((getOperatingSystemVar.value.operatingSystemOut === WTF_MOBModel.staticEntities.mobile_OperatingSystem.iOS) && (vars.value.systemVersionVar < 11)))) {
// IsIOS10 = True
outVars.value.isIOS10Out = true;
}

});
}

});
}).catch(function (ex) {
OS.Logger.trace("Javascript.CheckIsIOS10", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Javascript.CheckIsIOS10$vars", [{
name: "SystemVersion",
attrName: "systemVersionVar",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Javascript.CheckIsIOS10$getDeviceInformationJSResult", [{
name: "DeviceModel",
attrName: "deviceModelOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CordovaVersion",
attrName: "cordovaVersionOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Platform",
attrName: "platformOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "UUID",
attrName: "uUIDOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Version",
attrName: "versionOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Manufacturer",
attrName: "manufacturerOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsSimulator",
attrName: "isSimulatorOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "SerialNumber",
attrName: "serialNumberOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Javascript.CheckIsIOS10$outVars", [{
name: "IsIOS10",
attrName: "isIOS10Out",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.checkIsIOS10$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.checkIsIOS10$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
IsIOS10: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isIOS10Out, OS.Types.Boolean, true)
};
});
};
});
define("WTF_MOB.controller$CheckIsIOS10.GetDeviceInformationJS", [], function () {
return function ($parameters, $actions, $roles, $public) {
return new Promise(function ($resolve, $reject) {
// get device information
if (cordova) {
  $public.Device.whenReady().then(function() {
    $parameters.DeviceModel = device.model;
    $parameters.CordovaVersion = device.cordova;
    $parameters.Platform = device.platform;
    $parameters.UUID = device.uuid;
    $parameters.Version = device.version;
    $parameters.Manufacturer = device.manufacturer;
    $parameters.IsSimulator = device.isVirtual;
    $parameters.SerialNumber = device.serial;
    $resolve();
  });
} else {
  // fallback when testing on desktop browser
  $resolve();
}
});
};
});

define("WTF_MOB.controller$DeviceFeedbackHaptic", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "Essentials_MOB.controller", "WTF_MOB.controller$DeviceFeedbackHaptic.JavaScript1JS", "WTF_MBP.controller$GetConfigValueAsText_MBP", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "Essentials_MOB.controller$CurrentOS", "WTF_MOB.referencesHealth$Essentials_MOB"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, Essentials_MOBController, WTF_MOB_controller_DeviceFeedbackHaptic_JavaScript1JS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.deviceFeedbackHaptic$Action = function (durationIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.DeviceFeedbackHaptic$vars"))());
vars.value.durationInLocal = durationIn;
var wTFFeedbackHapticOnVar = new OS.DataTypes.VariableHolder();
var currentOSVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: WTFFeedbackHapticOn
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("WTFFeedbackHapticOn", callContext).then(function (value) {
wTFFeedbackHapticOnVar.value = value;
}).then(function () {
// ON?
if(((OS.BuiltinFunctions.toLower(wTFFeedbackHapticOnVar.value.valueOut) === "true"))) {
// Execute Action: CurrentOS
currentOSVar.value = Essentials_MOBController.default.currentOS$Action(callContext);

// IOS?
if((!((currentOSVar.value.operatingSystemOut === WTF_MOBModel.staticEntities.operativeSystem.iOS)))) {
controller.safeExecuteJSNode(WTF_MOB_controller_DeviceFeedbackHaptic_JavaScript1JS, "JavaScript1", "DeviceFeedbackHaptic", {
Duration: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.durationInLocal, OS.Types.Integer, true)
}, function ($parameters) {
}, {}, {});
}

}

});
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.DeviceFeedbackHaptic$vars", [{
name: "Duration",
attrName: "durationInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
WTF_MOBController.default.clientActionProxies.deviceFeedbackHaptic$Action = function (durationIn) {
durationIn = (durationIn === undefined) ? 0 : durationIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.deviceFeedbackHaptic$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(durationIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});
define("WTF_MOB.controller$DeviceFeedbackHaptic.JavaScript1JS", [], function () {
return function ($parameters, $actions, $roles, $public) {
Haptics.vibrate($parameters.Duration);


};
});

define("WTF_MOB.controller$DisabledOrEnabledButton", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MOB.controller$DisabledOrEnabledButton.JavaScript1JS"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MOB_controller_DisabledOrEnabledButton_JavaScript1JS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.disabledOrEnabledButton$Action = function (buttonIdIn, hasEnabledIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.DisabledOrEnabledButton$vars"))());
vars.value.buttonIdInLocal = buttonIdIn;
vars.value.hasEnabledInLocal = hasEnabledIn;
controller.safeExecuteJSNode(WTF_MOB_controller_DisabledOrEnabledButton_JavaScript1JS, "JavaScript1", "DisabledOrEnabledButton", {
button_id: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.buttonIdInLocal, OS.Types.Text, true),
disabled_value: OS.DataTypes.JSConversions.basicTypeToJS((!(vars.value.hasEnabledInLocal) ? "True" : "False"), OS.Types.Text, true)
}, function ($parameters) {
}, {}, {});
return ;
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.DisabledOrEnabledButton$vars", [{
name: "ButtonId",
attrName: "buttonIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "hasEnabled",
attrName: "hasEnabledInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.disabledOrEnabledButton$Action = function (buttonIdIn, hasEnabledIn) {
buttonIdIn = (buttonIdIn === undefined) ? "" : buttonIdIn;
hasEnabledIn = (hasEnabledIn === undefined) ? false : hasEnabledIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.disabledOrEnabledButton$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(buttonIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(hasEnabledIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});
define("WTF_MOB.controller$DisabledOrEnabledButton.JavaScript1JS", [], function () {
return function ($parameters, $actions, $roles, $public) {
var button = document.getElementById($parameters.button_id);

if($parameters.disabled_value == "True")
    button.disabled = true;
else
    button.disabled = false;

};
});

define("WTF_MOB.controller$Firebase_StartTrace", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "WTF_MBP.controller$FB_StartTrace", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.controller$FB_AddTraceAttribute"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.firebase_StartTrace$Action = function (traceNameIn, hasCacheIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Analytics.Firebase_StartTrace$vars"))());
vars.value.traceNameInLocal = traceNameIn;
vars.value.hasCacheInLocal = hasCacheIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var fB_StartTraceVar = new OS.DataTypes.VariableHolder();
var fB_AddTraceAttributeVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: FB_StartTrace
return WTF_MBPController.default.fB_StartTrace$Action(vars.value.traceNameInLocal, callContext).then(function (value) {
fB_StartTraceVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((vars.value.hasCacheInLocal)) {
// Execute Action: FB_AddTraceAttribute
return WTF_MBPController.default.fB_AddTraceAttribute$Action(vars.value.traceNameInLocal, "cache", (vars.value.hasCacheInLocal ? "True" : "False"), callContext).then(function (value) {
fB_AddTraceAttributeVar.value = value;
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("Analytics.Firebase_StartTrace", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync();

});
}

throw ex;
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Analytics.Firebase_StartTrace$vars", [{
name: "TraceName",
attrName: "traceNameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "HasCache",
attrName: "hasCacheInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.firebase_StartTrace$Action = function (traceNameIn, hasCacheIn) {
traceNameIn = (traceNameIn === undefined) ? "" : traceNameIn;
hasCacheIn = (hasCacheIn === undefined) ? false : hasCacheIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.firebase_StartTrace$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(traceNameIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(hasCacheIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("WTF_MOB.controller$Firebase_StopTrace", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "WTF_MBP.controller$FB_StopTrace", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.firebase_StopTrace$Action = function (traceNameIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Analytics.Firebase_StopTrace$vars"))());
vars.value.traceNameInLocal = traceNameIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var fB_StopTraceVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: FB_StopTrace
return WTF_MBPController.default.fB_StopTrace$Action(vars.value.traceNameInLocal, callContext).then(function (value) {
fB_StopTraceVar.value = value;
});
}).catch(function (ex) {
OS.Logger.trace("Analytics.Firebase_StopTrace", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync();

});
}

throw ex;
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Analytics.Firebase_StopTrace$vars", [{
name: "TraceName",
attrName: "traceNameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.firebase_StopTrace$Action = function (traceNameIn) {
traceNameIn = (traceNameIn === undefined) ? "" : traceNameIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.firebase_StopTrace$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(traceNameIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("WTF_MOB.controller$GetAndUpdateUserProfile", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.model", "WTF_MBP.controller", "Mobile_LoginNOS.model", "WTF_MOB.controller$GetAndUpdateUserProfile.JavaScript_CheckImgJS", "WTF_MBP.model$Local_USER_NOS_INFORec", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.controller$CreateUserWTF_UserNOSInfo", "WTF_MBP.controller$Delete_AccessTokenInfo", "Mobile_LoginNOS.model$UserProfileInfoRec", "WTF_MOB.referencesHealth$Mobile_LoginNOS", "WTF_MBP.controller$GetUserProfileInfo", "WTF_MOB.model$Local_USER_NOS_INFORecord", "WTF_MOB.model$Local_ACCESS_TOKEN_INFORecordList", "WTF_MOB.model$Local_USER_NOS_INFORecordList", "WTF_MBP.model$Local_ACCESS_TOKEN_INFORec", "WTF_MBP.entities"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPModel, WTF_MBPController, Mobile_LoginNOSModel, WTF_MOB_controller_GetAndUpdateUserProfile_JavaScript_CheckImgJS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.getAndUpdateUserProfile$Action = function (callContext) {
callContext = controller.callContext(callContext);
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var createUserWTF_UserNOSInfoVar = new OS.DataTypes.VariableHolder();
var delete_AccessTokenInfoVar = new OS.DataTypes.VariableHolder();
var getUserProfileInfoVar = new OS.DataTypes.VariableHolder();
var javaScript_CheckImgJSResult = new OS.DataTypes.VariableHolder();
var getLocalACCESSTOKENINFOESVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(WTF_MOBModel.Local_ACCESS_TOKEN_INFORecordList))());
var getLocalUSERNOSINFOESVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(WTF_MOBModel.Local_USER_NOS_INFORecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.UserSession.GetAndUpdateUserProfile$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage4
OS.SystemActions.logMessage("GetAndUpdateUserProfile start", "Profile", callContext);
// Aggregate: GetLocalACCESSTOKENINFOES
var getLocalACCESSTOKENINFOESAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = WTF_MOBModel.Local_ACCESS_TOKEN_INFORecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_ACCESS_TOKEN_INFO\".\"Id\" o0, \"ENLocal_ACCESS_TOKEN_INFO\".\"Refresh_token\" o1, \"ENLocal_ACCESS_TOKEN_INFO\".\"Access_token\" o2, \"ENLocal_ACCESS_TOKEN_INFO\".\"IsUserRegistered\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_p9g_Local_ACCESS_TOKEN_INFO\" \"ENLocal_ACCESS_TOKEN_INFO\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, WTF_MOBModel.Local_ACCESS_TOKEN_INFORecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_ACCESS_TOKEN_INFOAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalACCESSTOKENINFOESVar.value;
});
};
return getLocalACCESSTOKENINFOESAggr().then(function () {
return OS.Flow.executeSequence(function () {
if(((getLocalACCESSTOKENINFOESVar.value.listOut.isEmpty || !(getLocalACCESSTOKENINFOESVar.value.listOut.getCurrent(callContext.iterationContext).local_ACCESS_TOKEN_INFOAttr.isUserRegisteredAttr)))) {
// Execute Action: Delete_AccessTokenInfo
return WTF_MBPController.default.delete_AccessTokenInfo$Action(callContext).then(function (value) {
delete_AccessTokenInfoVar.value = value;
}).then(function () {
// SessionExpired = True
outVars.value.sessionExpiredOut = true;
});
} else {
// Execute Action: GetUserProfileInfo
return WTF_MBPController.default.getUserProfileInfo$Action(getLocalACCESSTOKENINFOESVar.value.listOut.getCurrent(callContext.iterationContext).local_ACCESS_TOKEN_INFOAttr.refresh_tokenAttr, callContext).then(function (value) {
getUserProfileInfoVar.value = value;
}).then(function () {
// Aggregate: GetLocalUSERNOSINFOES
var getLocalUSERNOSINFOESAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = WTF_MOBModel.Local_USER_NOS_INFORecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6";
} else {
selectSql += "\"ENLocal_USER_NOS_INFO\".\"Uid\" o0, \"ENLocal_USER_NOS_INFO\".\"Name\" o1, \"ENLocal_USER_NOS_INFO\".\"Birth_date\" o2, \"ENLocal_USER_NOS_INFO\".\"Gender\" o3, \"ENLocal_USER_NOS_INFO\".\"Username\" o4, \"ENLocal_USER_NOS_INFO\".\"Picture\" o5, \"ENLocal_USER_NOS_INFO\".\"CreatedAt\" o6";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_p9g_Local_USER_NOS_INFO\" \"ENLocal_USER_NOS_INFO\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, WTF_MOBModel.Local_USER_NOS_INFORecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_USER_NOS_INFOAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalUSERNOSINFOESVar.value;
});
};
return getLocalUSERNOSINFOESAggr();
}).then(function () {
javaScript_CheckImgJSResult.value = controller.safeExecuteJSNode(WTF_MOB_controller_GetAndUpdateUserProfile_JavaScript_CheckImgJS, "JavaScript_CheckImg", "GetAndUpdateUserProfile", {
PictureUrl: OS.DataTypes.JSConversions.basicTypeToJS(getUserProfileInfoVar.value.userProfileInfoOut.pictureAttr, OS.Types.Text, true),
ImageNotExists: OS.DataTypes.JSConversions.basicTypeToJS(false, OS.Types.Boolean, true)
}, function ($parameters) {
var jsNodeResult = new (controller.constructor.getVariableGroupType("WTF_MOB.UserSession.GetAndUpdateUserProfile$javaScript_CheckImgJSResult"))();
jsNodeResult.imageNotExistsOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.ImageNotExists, OS.Types.Boolean);
return jsNodeResult;
}, {}, {});
// Map UserInfo Information
// GetLocalUSERNOSINFOES.List.Current = GetUserProfileInfo.UserProfileInfo
getLocalUSERNOSINFOESVar.value.listOut.setCurrent(callContext.iterationContext, OS.DataTypes.JSConversions.typeConvertRecord(getUserProfileInfoVar.value.userProfileInfoOut, new WTF_MOBModel.Local_USER_NOS_INFORecord(), function (source, target) {
target.local_USER_NOS_INFOAttr.uidAttr = OS.BuiltinFunctions.textToIdentifier(source.userIdAttr);
target.local_USER_NOS_INFOAttr.nameAttr = source.nameAttr;
target.local_USER_NOS_INFOAttr.birth_dateAttr = source.birth_dateAttr;
target.local_USER_NOS_INFOAttr.genderAttr = source.genderAttr;
target.local_USER_NOS_INFOAttr.usernameAttr = source.usernameAttr;
target.local_USER_NOS_INFOAttr.pictureAttr = source.pictureAttr;
target.local_USER_NOS_INFOAttr.createdAtAttr = OS.BuiltinFunctions.currDateTime();
return target;
}));
// Execute Action: LogMessage3
OS.SystemActions.logMessage("GetAndUpdateUserProfile end", "Profile", callContext);
// Execute Action: CreateUserWTF_UserNOSInfo
return WTF_MBPController.default.createUserWTF_UserNOSInfo$Action(getLocalUSERNOSINFOESVar.value.listOut.getCurrent(callContext.iterationContext).local_USER_NOS_INFOAttr, callContext).then(function (value) {
createUserWTF_UserNOSInfoVar.value = value;
});
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("UserSession.GetAndUpdateUserProfile", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage2
OS.SystemActions.logMessage((("GetAndUpdateUserProfile Erro [" + allExceptionsVar.value.exceptionMessageAttr) + "]"), "Profile", callContext);
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.UserSession.GetAndUpdateUserProfile$javaScript_CheckImgJSResult", [{
name: "ImageNotExists",
attrName: "imageNotExistsOut",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.UserSession.GetAndUpdateUserProfile$outVars", [{
name: "SessionExpired",
attrName: "sessionExpiredOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.getAndUpdateUserProfile$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.getAndUpdateUserProfile$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
SessionExpired: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.sessionExpiredOut, OS.Types.Boolean, true)
};
});
};
});
define("WTF_MOB.controller$GetAndUpdateUserProfile.JavaScript_CheckImgJS", [], function () {
return function ($parameters, $actions, $roles, $public) {
var profileImg = new Image();
profileImg.src = $parameters.PictureUrl;

$parameters.ImageNotExists = !profileImg.width;
};
});

define("WTF_MOB.controller$GetAppConfigIsDev", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "WTF_MBP.controller$GetConfigValueAsText_MBP", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.getAppConfigIsDev$Action = function (callContext) {
callContext = controller.callContext(callContext);
var getAppConfigIsDevVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.GetAppConfigIsDev$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetAppConfigIsDev
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("IS_DEV", callContext).then(function (value) {
getAppConfigIsDevVar.value = value;
}).then(function () {
// IsDev = BooleanToText = GetAppConfigIsDev.Value
outVars.value.isDevOut = (OS.BuiltinFunctions.booleanToText(true) === getAppConfigIsDevVar.value.valueOut);
});
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.GetAppConfigIsDev$outVars", [{
name: "IsDev",
attrName: "isDevOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.getAppConfigIsDev$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.getAppConfigIsDev$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
IsDev: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isDevOut, OS.Types.Boolean, true)
};
});
};
});

define("WTF_MOB.controller$GetLoginMode", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "Mobile_LoginNOS.controller", "CommonPlugin.model", "BuildInfoPlugin.controller", "WTF_MBP.controller$Get_OperatingSystem", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.controller$GetConfigValueAsText_MBP", "Mobile_LoginNOS.controller$ViewControllerValidation", "WTF_MOB.referencesHealth$Mobile_LoginNOS", "CommonPlugin.model$ErrorRec", "WTF_MOB.referencesHealth$CommonPlugin", "BuildInfoPlugin.controller$GetBuildInfo", "WTF_MOB.referencesHealth$BuildInfoPlugin", "WTF_MOB.controller$IOSVersionIsEqualOrHigherThan", "WTF_MBP.controller$CheckIsBrowser"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, Mobile_LoginNOSController, CommonPluginModel, BuildInfoPluginController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.getLoginMode$Action = function (callContext) {
callContext = controller.callContext(callContext);
var cordova_GetOperatingSystemVar = new OS.DataTypes.VariableHolder();
var getLoginModeVar = new OS.DataTypes.VariableHolder();
var viewControllerValidationVar = new OS.DataTypes.VariableHolder();
var getBuildInfoVar = new OS.DataTypes.VariableHolder();
var getMinBuildVersionAndroidVar = new OS.DataTypes.VariableHolder();
var iOSVersionIsEqualOrHigherThanVar = new OS.DataTypes.VariableHolder();
var checkIsBrowserVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Login.GetLoginMode$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CheckIsBrowser
checkIsBrowserVar.value = WTF_MBPController.default.checkIsBrowser$Action(callContext);

return OS.Flow.executeSequence(function () {
if((checkIsBrowserVar.value.isBrowserOut)) {
// Nativo
// LoginMode = 2
outVars.value.loginModeOut = 2;
} else {
// Execute Action: Cordova_GetOperatingSystem
cordova_GetOperatingSystemVar.value = WTF_MBPController.default.get_OperatingSystem$Action(callContext);

// Execute Action: GetLoginMode
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("LoginNOS_MODE", callContext).then(function (value) {
getLoginModeVar.value = value;
}).then(function () {
// Execute Action: ViewControllerValidation
viewControllerValidationVar.value = Mobile_LoginNOSController.default.viewControllerValidation$Action(callContext);

}).then(function () {
// IOS?
return OS.Flow.executeSequence(function () {
if(((cordova_GetOperatingSystemVar.value.operatingSystemOut === WTF_MOBModel.staticEntities.mobile_OperatingSystem.iOS))) {
// Use Safari View Controller?
return OS.Flow.executeSequence(function () {
if(((((getLoginModeVar.value.valueOut === "0") || (getLoginModeVar.value.valueOut === "1")) && viewControllerValidationVar.value.availableOut))) {
// Execute Action: IOSVersionIsEqualOrHigherThan
return WTF_MOBController.default.iOSVersionIsEqualOrHigherThan$Action("11", cordova_GetOperatingSystemVar.value.operatingSystemOut, callContext).then(function (value) {
iOSVersionIsEqualOrHigherThanVar.value = value;
}).then(function () {
// CompatibleIOSVersion?
if((iOSVersionIsEqualOrHigherThanVar.value.isHigherOut)) {
// SafariViewController
// LoginMode = 0
outVars.value.loginModeOut = 0;
return OS.Flow.returnAsync(outVars.value);

}

});
}

}).then(function () {
// Nativo
// LoginMode = 2
outVars.value.loginModeOut = 2;
});
} else {
// Execute Action: GetMinBuildVersionAndroid
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("INTERNAL_BROWSER_MIN_VERSION_ANDROID", callContext).then(function (value) {
getMinBuildVersionAndroidVar.value = value;
}).then(function () {
// Execute Action: GetBuildInfo
getBuildInfoVar.value = BuildInfoPluginController.default.getBuildInfo$Action(callContext);

}).then(function () {
// NOSCordovaPlugin Available?
if((((getLoginModeVar.value.valueOut === "1") && (OS.BuiltinFunctions.textToInteger(OS.BuiltinFunctions.trim(getBuildInfoVar.value.buildOut)) >= OS.BuiltinFunctions.textToInteger(OS.BuiltinFunctions.trim(getMinBuildVersionAndroidVar.value.valueOut)))))) {
// NosCordova Plugin
// LoginMode = 1
outVars.value.loginModeOut = 1;
} else {
// Use Safari View Controller?
if(((viewControllerValidationVar.value.availableOut && ((outVars.value.loginModeOut === 0) || ((outVars.value.loginModeOut === 1) && (OS.BuiltinFunctions.textToInteger(OS.BuiltinFunctions.trim(getBuildInfoVar.value.buildOut)) < OS.BuiltinFunctions.textToInteger(OS.BuiltinFunctions.trim(getMinBuildVersionAndroidVar.value.valueOut)))))))) {
// SafariViewController
// LoginMode = 0
outVars.value.loginModeOut = 0;
} else {
// Nativo
// LoginMode = 2
outVars.value.loginModeOut = 2;
}

}

});
}

});
});
}

});
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Login.GetLoginMode$outVars", [{
name: "LoginMode",
attrName: "loginModeOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
WTF_MOBController.default.clientActionProxies.getLoginMode$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.getLoginMode$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
LoginMode: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.loginModeOut, OS.Types.Integer, true)
};
});
};
});

define("WTF_MOB.controller$GoogleAnalyticsWeb_TrackTime", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MOB.controller$GoogleAnalyticsWeb_TrackTime.GA_SendEventJS"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MOB_controller_GoogleAnalyticsWeb_TrackTime_GA_SendEventJS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.googleAnalyticsWeb_TrackTime$Action = function (categoryIn, nameIn, labelIn, trace_StartAtIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Analytics.GoogleAnalyticsWeb_TrackTime$vars"))());
vars.value.categoryInLocal = categoryIn;
vars.value.nameInLocal = nameIn;
vars.value.labelInLocal = labelIn;
vars.value.trace_StartAtInLocal = trace_StartAtIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
try {controller.safeExecuteJSNode(WTF_MOB_controller_GoogleAnalyticsWeb_TrackTime_GA_SendEventJS, "GA_SendEvent", "GoogleAnalyticsWeb_TrackTime", {
Label: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.labelInLocal, OS.Types.Text, true),
Name: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.nameInLocal, OS.Types.Text, true),
Category: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.categoryInLocal, OS.Types.Text, true),
Value: OS.DataTypes.JSConversions.basicTypeToJS(((OS.BuiltinFunctions.diffSeconds(vars.value.trace_StartAtInLocal, OS.BuiltinFunctions.currDateTime()) * 1000)).toString(), OS.Types.Text, true)
}, function ($parameters) {
}, {}, {});
} catch (ex) {
(function () {
OS.Logger.trace("Analytics.GoogleAnalyticsWeb_TrackTime", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return ;

}

throw ex;
})();
}

return ;
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Analytics.GoogleAnalyticsWeb_TrackTime$vars", [{
name: "Category",
attrName: "categoryInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Name",
attrName: "nameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Label",
attrName: "labelInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Trace_StartAt",
attrName: "trace_StartAtInLocal",
mandatory: false,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}]);
WTF_MOBController.default.clientActionProxies.googleAnalyticsWeb_TrackTime$Action = function (categoryIn, nameIn, labelIn, trace_StartAtIn) {
categoryIn = (categoryIn === undefined) ? "" : categoryIn;
nameIn = (nameIn === undefined) ? "" : nameIn;
labelIn = (labelIn === undefined) ? "" : labelIn;
trace_StartAtIn = (trace_StartAtIn === undefined) ? OS.DataTypes.DateTime.defaultValue : trace_StartAtIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.googleAnalyticsWeb_TrackTime$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(categoryIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(nameIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(labelIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(trace_StartAtIn, OS.Types.DateTime)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});
define("WTF_MOB.controller$GoogleAnalyticsWeb_TrackTime.GA_SendEventJS", [], function () {
return function ($parameters, $actions, $roles, $public) {
if(typeof gtag !== "undefined")
{
    var timeSincePageLoad;
    // Feature detects Navigation Timing API support.
    if (window.performance) 
    {
        // Gets the number of milliseconds since page load
        // (and rounds the result since the value must be an integer).
        timeSincePageLoad = Math.round(performance.now());
    }
    else
    {
        timeSincePageLoad = $parameters.Value;
    }
            
    // Sends the timing event to Google Analytics.
    gtag('event', 'timing_complete', {
        'name': $parameters.Name,
        'value': timeSincePageLoad,
        'event_category': $parameters.Category,
        'event_label': $parameters.Label
    });
}
};
});

define("WTF_MOB.controller$IOSVersionIsEqualOrHigherThan", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MOB.controller$IOSVersionIsEqualOrHigherThan.CheckVersionJS"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MOB_controller_IOSVersionIsEqualOrHigherThan_CheckVersionJS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.iOSVersionIsEqualOrHigherThan$Action = function (majorVersionToCompareIn, operatingSystemsIdIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Login.IOSVersionIsEqualOrHigherThan$vars"))());
vars.value.majorVersionToCompareInLocal = majorVersionToCompareIn;
vars.value.operatingSystemsIdInLocal = operatingSystemsIdIn;
var checkVersionJSResult = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Login.IOSVersionIsEqualOrHigherThan$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// IOS?
return OS.Flow.executeSequence(function () {
if(((vars.value.operatingSystemsIdInLocal === WTF_MOBModel.staticEntities.mobile_OperatingSystem.iOS))) {
return controller.safeExecuteAsyncJSNode(WTF_MOB_controller_IOSVersionIsEqualOrHigherThan_CheckVersionJS, "CheckVersion", "IOSVersionIsEqualOrHigherThan", {
MajorVersionToCompare: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.majorVersionToCompareInLocal, OS.Types.Text, true),
IsHigher: OS.DataTypes.JSConversions.basicTypeToJS(false, OS.Types.Boolean, true)
}, function ($parameters) {
var jsNodeResult = new (controller.constructor.getVariableGroupType("WTF_MOB.Login.IOSVersionIsEqualOrHigherThan$checkVersionJSResult"))();
jsNodeResult.isHigherOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.IsHigher, OS.Types.Boolean);
return jsNodeResult;
}, {}, {}).then(function (results) {
checkVersionJSResult.value = results;
}).then(function () {
// IsHigher = CheckVersion.IsHigher
outVars.value.isHigherOut = checkVersionJSResult.value.isHigherOut;
});
} else {
// IsHigher = False
outVars.value.isHigherOut = false;
}

});
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Login.IOSVersionIsEqualOrHigherThan$vars", [{
name: "MajorVersionToCompare",
attrName: "majorVersionToCompareInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OperatingSystemsId",
attrName: "operatingSystemsIdInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Login.IOSVersionIsEqualOrHigherThan$checkVersionJSResult", [{
name: "IsHigher",
attrName: "isHigherOut",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Login.IOSVersionIsEqualOrHigherThan$outVars", [{
name: "IsHigher",
attrName: "isHigherOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.iOSVersionIsEqualOrHigherThan$Action = function (majorVersionToCompareIn, operatingSystemsIdIn) {
majorVersionToCompareIn = (majorVersionToCompareIn === undefined) ? "" : majorVersionToCompareIn;
operatingSystemsIdIn = (operatingSystemsIdIn === undefined) ? "" : operatingSystemsIdIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.iOSVersionIsEqualOrHigherThan$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(majorVersionToCompareIn, OS.Types.Text), operatingSystemsIdIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
IsHigher: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isHigherOut, OS.Types.Boolean, true)
};
});
};
});
define("WTF_MOB.controller$IOSVersionIsEqualOrHigherThan.CheckVersionJS", [], function () {
return function ($parameters, $actions, $roles, $public) {
return new Promise(function ($resolve, $reject) {
if (cordova)
{
    if(device.platform.toUpperCase() == 'IOS')
    {
        var res = device.version.split(".");
        $parameters.IsHigher = res.length > 0 && !Number.isNaN(res.length) && res[0] >= $parameters.MajorVersionToCompare;
    }
}
$resolve();
});
};
});

define("WTF_MOB.controller$JS_OpenExternalURL", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MOB.controller$JS_OpenExternalURL.OpenBrowserJS"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MOB_controller_JS_OpenExternalURL_OpenBrowserJS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.jS_OpenExternalURL$Action = function (externalURLIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.ExternalLinks.JS_OpenExternalURL$vars"))());
vars.value.externalURLInLocal = externalURLIn;
controller.safeExecuteJSNode(WTF_MOB_controller_JS_OpenExternalURL_OpenBrowserJS, "OpenBrowser", "JS_OpenExternalURL", {
URL: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.externalURLInLocal, OS.Types.Text, true)
}, function ($parameters) {
}, {}, {});
return ;
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.ExternalLinks.JS_OpenExternalURL$vars", [{
name: "ExternalURL",
attrName: "externalURLInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.jS_OpenExternalURL$Action = function (externalURLIn) {
externalURLIn = (externalURLIn === undefined) ? "" : externalURLIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.jS_OpenExternalURL$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(externalURLIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});
define("WTF_MOB.controller$JS_OpenExternalURL.OpenBrowserJS", [], function () {
return function ($parameters, $actions, $roles, $public) {
window.open($parameters.URL, '_system');
};
});

define("WTF_MOB.controller$LoginAction", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "Mobile_LoginNOS.model", "WTF_MOB.controller$LoginAction.GetDeviceInformationJS", "WTF_MBP.controller$Delete_AccessTokenInfo", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.controller$UserToken_CreateOrUpdate_ToReview", "WTF_MBP.controller$CreatOrUpdate_AccessTokenInfo", "WTF_MBP.controller$GetValidateSession", "Mobile_LoginNOS.model$AccessTokenCode_OpenIDRec", "WTF_MOB.referencesHealth$Mobile_LoginNOS"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, Mobile_LoginNOSModel, WTF_MOB_controller_LoginAction_GetDeviceInformationJS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.loginAction$Action = function (accessTokenInfoIn, fromLoginWithoutRegisterIn, isRegisteredUserIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Login.LoginAction$vars"))());
vars.value.accessTokenInfoInLocal = accessTokenInfoIn.clone();
vars.value.fromLoginWithoutRegisterInLocal = fromLoginWithoutRegisterIn;
vars.value.isRegisteredUserInLocal = isRegisteredUserIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var delete_AccessTokenInfoVar = new OS.DataTypes.VariableHolder();
var userToken_CreateOrUpdate_ToReviewVar = new OS.DataTypes.VariableHolder();
var creatOrUpdate_AccessTokenInfoVar = new OS.DataTypes.VariableHolder();
var getValidateSessionVar = new OS.DataTypes.VariableHolder();
var delete_AccessTokenInfo2Var = new OS.DataTypes.VariableHolder();
var getDeviceInformationJSResult = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Login.LoginAction$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: Delete_AccessTokenInfo
return WTF_MBPController.default.delete_AccessTokenInfo$Action(callContext).then(function (value) {
delete_AccessTokenInfoVar.value = value;
}).then(function () {
// Execute Action: CreatOrUpdate_AccessTokenInfo
return WTF_MBPController.default.creatOrUpdate_AccessTokenInfo$Action(vars.value.accessTokenInfoInLocal.refresh_tokenAttr, vars.value.accessTokenInfoInLocal.access_tokenAttr, vars.value.isRegisteredUserInLocal, callContext).then(function (value) {
creatOrUpdate_AccessTokenInfoVar.value = value;
});
}).then(function () {
getDeviceInformationJSResult.value = controller.safeExecuteJSNode(WTF_MOB_controller_LoginAction_GetDeviceInformationJS, "GetDeviceInformation", "LoginAction", {
CordovaVersion: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Model: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Platform: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
UUID: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Version: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
Manufacturer: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true),
IsVirtual: OS.DataTypes.JSConversions.basicTypeToJS(false, OS.Types.Boolean, true),
Serial: OS.DataTypes.JSConversions.basicTypeToJS("", OS.Types.Text, true)
}, function ($parameters) {
var jsNodeResult = new (controller.constructor.getVariableGroupType("WTF_MOB.Login.LoginAction$getDeviceInformationJSResult"))();
jsNodeResult.cordovaVersionOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.CordovaVersion, OS.Types.Text);
jsNodeResult.modelOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Model, OS.Types.Text);
jsNodeResult.platformOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Platform, OS.Types.Text);
jsNodeResult.uUIDOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.UUID, OS.Types.Text);
jsNodeResult.versionOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Version, OS.Types.Text);
jsNodeResult.manufacturerOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Manufacturer, OS.Types.Text);
jsNodeResult.isVirtualOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.IsVirtual, OS.Types.Boolean);
jsNodeResult.serialOut = OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType($parameters.Serial, OS.Types.Text);
return jsNodeResult;
}, {}, {});
// Execute Action: UserToken_CreateOrUpdate_ToReview
return WTF_MBPController.default.userToken_CreateOrUpdate_ToReview$Action(vars.value.accessTokenInfoInLocal.refresh_tokenAttr, vars.value.accessTokenInfoInLocal.access_tokenAttr, vars.value.accessTokenInfoInLocal.expires_inAttr, vars.value.accessTokenInfoInLocal.refresh_token_expires_inAttr, getDeviceInformationJSResult.value.uUIDOut, vars.value.accessTokenInfoInLocal.id_tokenAttr, vars.value.fromLoginWithoutRegisterInLocal, callContext).then(function (value) {
userToken_CreateOrUpdate_ToReviewVar.value = value;
});
}).then(function () {
// CreateToken.Success?
return OS.Flow.executeSequence(function () {
if((userToken_CreateOrUpdate_ToReviewVar.value.successOut)) {
return OS.Flow.executeSequence(function () {
if((vars.value.isRegisteredUserInLocal)) {
// Execute Action: GetValidateSession
return WTF_MBPController.default.getValidateSession$Action(vars.value.accessTokenInfoInLocal.refresh_tokenAttr, callContext).then(function (value) {
getValidateSessionVar.value = value;
}).then(function () {
// GetValidateSession.Success?
if((getValidateSessionVar.value.successOut)) {
// SetOutput
// App_UserAssociations_Length = UserToken_CreateOrUpdate_ToReview.App_UserAssociations_Length
outVars.value.app_UserAssociations_LengthOut = userToken_CreateOrUpdate_ToReviewVar.value.app_UserAssociations_LengthOut;
// Success = True
outVars.value.successOut = true;
} else {
// Success = False
outVars.value.successOut = false;
}

});
}

});
} else {
// Execute Action: Delete_AccessTokenInfo2
return WTF_MBPController.default.delete_AccessTokenInfo$Action(callContext).then(function (value) {
delete_AccessTokenInfo2Var.value = value;
}).then(function () {
// Success = UserToken_CreateOrUpdate_ToReview.Success
outVars.value.successOut = userToken_CreateOrUpdate_ToReviewVar.value.successOut;
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("Login.LoginAction", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
// App_UserAssociations_Length = 0
outVars.value.app_UserAssociations_LengthOut = 0;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Login.LoginAction$vars", [{
name: "AccessTokenInfo",
attrName: "accessTokenInfoInLocal",
mandatory: true,
dataType: OS.Types.Record,
defaultValue: function () {
return new Mobile_LoginNOSModel.AccessTokenCode_OpenIDRec();
},
complexType: Mobile_LoginNOSModel.AccessTokenCode_OpenIDRec
}, {
name: "FromLoginWithoutRegister",
attrName: "fromLoginWithoutRegisterInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "IsRegisteredUser",
attrName: "isRegisteredUserInLocal",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Login.LoginAction$getDeviceInformationJSResult", [{
name: "CordovaVersion",
attrName: "cordovaVersionOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Model",
attrName: "modelOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Platform",
attrName: "platformOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "UUID",
attrName: "uUIDOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Version",
attrName: "versionOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Manufacturer",
attrName: "manufacturerOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsVirtual",
attrName: "isVirtualOut",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Serial",
attrName: "serialOut",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Login.LoginAction$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "App_UserAssociations_Length",
attrName: "app_UserAssociations_LengthOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
WTF_MOBController.default.clientActionProxies.loginAction$Action = function (accessTokenInfoIn, fromLoginWithoutRegisterIn, isRegisteredUserIn) {
accessTokenInfoIn = (accessTokenInfoIn === undefined) ? new Mobile_LoginNOSModel.AccessTokenCode_OpenIDRec() : accessTokenInfoIn;
fromLoginWithoutRegisterIn = (fromLoginWithoutRegisterIn === undefined) ? false : fromLoginWithoutRegisterIn;
isRegisteredUserIn = (isRegisteredUserIn === undefined) ? true : isRegisteredUserIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.loginAction$Action.bind(controller, accessTokenInfoIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(fromLoginWithoutRegisterIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isRegisteredUserIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
App_UserAssociations_Length: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.app_UserAssociations_LengthOut, OS.Types.Integer, true)
};
});
};
});
define("WTF_MOB.controller$LoginAction.GetDeviceInformationJS", [], function () {
return function ($parameters, $actions, $roles, $public) {
//Verify If is available
document.addEventListener("deviceready", onDeviceReady, false);

// Function to Get Device Information
function onDeviceReady() {
   
    $parameters.CordovaVersion = device.cordova;
    $parameters.Model = device.model;
    $parameters.Platform = device.platform;
    $parameters.UUID = device.uuid;
    $parameters.Version = device.version;
    $parameters.Manufacturer = device.manufacturer;
    $parameters.IsVirtual = device.isVirtual;
    $parameters.Serial =  device.serial;

}
};
});

define("WTF_MOB.controller$Logout", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "BALANCE_MBP.controller", "WTF_MBP.controller", "CustomerNotifications_MBP.model", "CustomerNotifications_MBP.controller", "WTF_MBP.model", "WTF_MOB.controller$ServerAction.GetUrl_LogoutUser", "BALANCE_MBP.controller$DeleteAll_BALANCENEXTCHARGEDETAIL_Logic", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$BALANCE_MBP", "BALANCE_MBP.controller$Balance_ClearCache", "WTF_MBP.controller$LogEventFacebook_MBP", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.controller$setActivityLog_Visit", "WTF_MBP.controller$GetConfigValueAsText_MBP", "WTF_MBP.controller$ClearCache", "CustomerNotifications_MBP.model$RegisterDevice_ResponseRec", "WTF_MOB.referencesHealth$CustomerNotifications_MBP", "CustomerNotifications_MBP.controller$RegisterDeviceInfo_v3", "WTF_MBP.controller$GetApplicationName_MBP", "WTF_MOB.model$Local_ACCESS_TOKEN_INFORecordList", "WTF_MBP.model$Local_ACCESS_TOKEN_INFORec", "WTF_MBP.entities"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, BALANCE_MBPController, WTF_MBPController, CustomerNotifications_MBPModel, CustomerNotifications_MBPController, WTF_MBPModel) {
var OS = OutSystems.Internal;
WTF_MOBController.default.logout$Action = function (callContext) {
callContext = controller.callContext(callContext);
var getUrl_LogoutUserVar = new OS.DataTypes.VariableHolder();
var deleteAll_BALANCENEXTCHARGEDETAIL_LogicVar = new OS.DataTypes.VariableHolder();
var balance_ClearCacheVar = new OS.DataTypes.VariableHolder();
var logEventFacebookSDK_WTFVar = new OS.DataTypes.VariableHolder();
var getPreLoginURLVar = new OS.DataTypes.VariableHolder();
var registerDeviceInfoVar = new OS.DataTypes.VariableHolder();
var getApplicationName_MBPVar = new OS.DataTypes.VariableHolder();
var getLocalAccessTokenInfoVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(WTF_MOBModel.Local_ACCESS_TOKEN_INFORecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Login.Logout$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalAccessTokenInfo
var getLocalAccessTokenInfoAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = WTF_MOBModel.Local_ACCESS_TOKEN_INFORecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_ACCESS_TOKEN_INFO\".\"Id\" o0, \"ENLocal_ACCESS_TOKEN_INFO\".\"Refresh_token\" o1, \"ENLocal_ACCESS_TOKEN_INFO\".\"Access_token\" o2, \"ENLocal_ACCESS_TOKEN_INFO\".\"IsUserRegistered\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_p9g_Local_ACCESS_TOKEN_INFO\" \"ENLocal_ACCESS_TOKEN_INFO\"";
orderBySql += " ORDER BY \"ENLocal_ACCESS_TOKEN_INFO\".\"Refresh_token\" ASC ";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, WTF_MOBModel.Local_ACCESS_TOKEN_INFORecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_ACCESS_TOKEN_INFOAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalAccessTokenInfoVar.value;
});
};
return getLocalAccessTokenInfoAggr().then(function () {
return OS.Flow.executeSequence(function () {
if((((getLocalAccessTokenInfoVar.value.listOut.getCurrent(callContext.iterationContext).local_ACCESS_TOKEN_INFOAttr.refresh_tokenAttr) !== ("")))) {
// Execute Action: GetUrl_LogoutUser
return controller.getUrl_LogoutUser$ServerAction(getLocalAccessTokenInfoVar.value.listOut.getCurrent(callContext.iterationContext).local_ACCESS_TOKEN_INFOAttr.refresh_tokenAttr, callContext).then(function (value) {
getUrl_LogoutUserVar.value = value;
}).then(function () {
// URL = GetUrl_LogoutUser.URL
outVars.value.uRLOut = getUrl_LogoutUserVar.value.uRLOut;
});
} else {
// Execute Action: GetPreLoginURL
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("CALLBACK_URL_PRELOGIN", callContext).then(function (value) {
getPreLoginURLVar.value = value;
}).then(function () {
// URL = GetPreLoginURL.Value
outVars.value.uRLOut = getPreLoginURLVar.value.valueOut;
});
}

});
}).then(function () {
// Execute Action: setActivityLog_Visit
return WTF_MBPController.default.setActivityLog_Visit$Action(false, false, true, true, false, callContext).then(function () {
// Execute Action: LogEventFacebookSDK_WTF
logEventFacebookSDK_WTFVar.value = WTF_MBPController.default.logEventFacebook_MBP$Action("Logout", callContext);

// Execute Action: ClearCache
return WTF_MBPController.default.clearCache$Action(callContext);
}).then(function () {
// Execute Action: Balance_ClearCache
return BALANCE_MBPController.default.balance_ClearCache$Action(callContext).then(function (value) {
balance_ClearCacheVar.value = value;
});
}).then(function () {
// Execute Action: DeleteAll_BALANCENEXTCHARGEDETAIL_Logic
return BALANCE_MBPController.default.deleteAll_BALANCENEXTCHARGEDETAIL_Logic$Action(callContext).then(function (value) {
deleteAll_BALANCENEXTCHARGEDETAIL_LogicVar.value = value;
});
}).then(function () {
// Execute Action: GetApplicationName_MBP
return WTF_MBPController.default.getApplicationName_MBP$Action(callContext).then(function (value) {
getApplicationName_MBPVar.value = value;
});
}).then(function () {
// Execute Action: RegisterDeviceInfo
return CustomerNotifications_MBPController.default.registerDeviceInfo_v3$Action("", getApplicationName_MBPVar.value.valueOut, callContext).then(function (value) {
registerDeviceInfoVar.value = value;
});
});
});
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Login.Logout$outVars", [{
name: "URL",
attrName: "uRLOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.logout$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.logout$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
URL: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.uRLOut, OS.Types.Text, true)
};
});
};
});

define("WTF_MOB.controller$OfflineDataSync", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "WTF_MBP.controller$CreateLocalLayoutLevels", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.controller$GetAllMobileConfigs_MBP"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.offlineDataSync$Action = function (callContext) {
callContext = controller.callContext(callContext);
var createLocalLayoutLevelsVar = new OS.DataTypes.VariableHolder();
var getAllMobileConfigs_MBPVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetAllMobileConfigs_MBP
return WTF_MBPController.default.getAllMobileConfigs_MBP$Action(false, callContext).then(function (value) {
getAllMobileConfigs_MBPVar.value = value;
}).then(function () {
// Execute Action: CreateLocalLayoutLevels
return WTF_MBPController.default.createLocalLayoutLevels$Action(callContext).then(function (value) {
createLocalLayoutLevelsVar.value = value;
});
});
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.clientActionProxies.offlineDataSync$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.offlineDataSync$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("WTF_MOB.controller$OfflineDataSyncConfiguration", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.offlineDataSyncConfiguration$Action = function (callContext) {
callContext = controller.callContext(callContext);
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.OfflineDataSync.OfflineDataSyncConfiguration$outVars"))());
// SyncOnOnline = False
outVars.value.syncOnOnlineOut = false;
// SyncOnLogin = False
outVars.value.syncOnLoginOut = false;
// SyncOnResume = False
outVars.value.syncOnResumeOut = false;
// RetryOnError = False
outVars.value.retryOnErrorOut = false;
// RetryIntervalInSeconds = 30
outVars.value.retryIntervalInSecondsOut = 30;
return outVars.value;
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.OfflineDataSync.OfflineDataSyncConfiguration$outVars", [{
name: "SyncOnOnline",
attrName: "syncOnOnlineOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "SyncOnLogin",
attrName: "syncOnLoginOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "SyncOnResume",
attrName: "syncOnResumeOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "RetryOnError",
attrName: "retryOnErrorOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "RetryIntervalInSeconds",
attrName: "retryIntervalInSecondsOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
WTF_MOBController.default.clientActionProxies.offlineDataSyncConfiguration$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.offlineDataSyncConfiguration$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
SyncOnOnline: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.syncOnOnlineOut, OS.Types.Boolean, true),
SyncOnLogin: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.syncOnLoginOut, OS.Types.Boolean, true),
SyncOnResume: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.syncOnResumeOut, OS.Types.Boolean, true),
RetryOnError: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.retryOnErrorOut, OS.Types.Boolean, true),
RetryIntervalInSeconds: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.retryIntervalInSecondsOut, OS.Types.Integer, true)
};
});
};
});

define("WTF_MOB.controller$OnApplicationReady", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "SwiftSupportPlugin_Extended_v172.controller", "CommonPlugin.model", "ScreenOrientationPlugin.controller", "CustomerNotifications_MBP.controller", "WTF_MBP.controller", "FacebookSDKWTF.controller", "WTF_MOB.controller$OnApplicationReady.JavaScript1JS", "SwiftSupportPlugin_Extended_v172.controller$ReferenceAction", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$SwiftSupportPlugin_Extended_v172", "CommonPlugin.model$ErrorRec", "WTF_MOB.referencesHealth$CommonPlugin", "ScreenOrientationPlugin.controller$LockOrientation", "WTF_MOB.referencesHealth$ScreenOrientationPlugin", "CustomerNotifications_MBP.controller$FB_InitCloudMessaging", "WTF_MOB.referencesHealth$CustomerNotifications_MBP", "WTF_MBP.controller$GetConfigValueAsText_MBP", "WTF_MOB.referencesHealth$WTF_MBP", "FacebookSDKWTF.controller$CheckFacebookSDK_WTF", "WTF_MOB.referencesHealth$FacebookSDKWTF", "WTF_MOB.controller$Analytics_Init"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, SwiftSupportPlugin_Extended_v172Controller, CommonPluginModel, ScreenOrientationPluginController, CustomerNotifications_MBPController, WTF_MBPController, FacebookSDKWTFController, WTF_MOB_controller_OnApplicationReady_JavaScript1JS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.onApplicationReady$Action = function (callContext) {
var model = this.model;
var controller = this.controller;
var idService = this.idService;
callContext = controller.callContext(callContext);
var lockOrientationVar = new OS.DataTypes.VariableHolder();
var fB_InitCloudMessagingVar = new OS.DataTypes.VariableHolder();
var wTFLayoutNatalStatusVar = new OS.DataTypes.VariableHolder();
var checkFacebookSDK_WTFVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: WTFLayoutNatalStatus
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("WTFLayoutNatalStatus", callContext).then(function (value) {
wTFLayoutNatalStatusVar.value = value;
}).then(function () {
if(((wTFLayoutNatalStatusVar.value.valueOut === "true"))) {
controller.safeExecuteJSNode(WTF_MOB_controller_OnApplicationReady_JavaScript1JS, "JavaScript1", "On Application Ready", null, function ($parameters) {
}, {}, {});
}

// Execute Action: LockOrientation
lockOrientationVar.value = ScreenOrientationPluginController.default.lockOrientation$Action("portrait", callContext);

// Execute Action: ReferenceAction
SwiftSupportPlugin_Extended_v172Controller.default.referenceAction$Action(callContext);
// Execute Action: Analytics_Init
return WTF_MOBController.default.analytics_Init$Action(callContext).then(function () {
// Execute Action: FB_InitCloudMessaging
return CustomerNotifications_MBPController.default.fB_InitCloudMessaging$Action(callContext).then(function (value) {
fB_InitCloudMessagingVar.value = value;
});
});
}).then(function () {
if((!(false))) {
// Execute Action: CheckFacebookSDK_WTF
checkFacebookSDK_WTFVar.value = FacebookSDKWTFController.default.checkFacebookSDK_WTF$Action(callContext);

}

});
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.clientActionProxies.onApplicationReady$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.onApplicationReady$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});
define("WTF_MOB.controller$OnApplicationReady.JavaScript1JS", [], function () {
return function ($actions, $roles, $public) {
var body = document.body;

body.classList.add("christmas_layout");
};
});

define("WTF_MOB.controller$OnApplicationResume", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "Essentials_MOB.controller", "WTF_MBP.controller", "WTF_MBP.model", "Essentials_MOB.controller$CheckNetworkStatus", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$Essentials_MOB", "WTF_MBP.controller$setActivityLog_Visit", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MOB.model$Local_USER_NOS_INFORecordList", "WTF_MBP.model$Local_USER_NOS_INFORec", "WTF_MBP.entities"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, Essentials_MOBController, WTF_MBPController, WTF_MBPModel) {
var OS = OutSystems.Internal;
WTF_MOBController.default.onApplicationResume$Action = function (callContext) {
var model = this.model;
var controller = this.controller;
var idService = this.idService;
callContext = controller.callContext(callContext);
var checkNetworkStatusVar = new OS.DataTypes.VariableHolder();
var getUserInfoVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(WTF_MOBModel.Local_USER_NOS_INFORecordList))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CheckNetworkStatus
return Essentials_MOBController.default.checkNetworkStatus$Action(callContext).then(function (value) {
checkNetworkStatusVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((checkNetworkStatusVar.value.isOnlineOut)) {
// Aggregate: GetUserInfo
var getUserInfoAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = WTF_MOBModel.Local_USER_NOS_INFORecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6";
} else {
selectSql += "\"ENLocal_USER_NOS_INFO\".\"Uid\" o0, \"ENLocal_USER_NOS_INFO\".\"Name\" o1, \"ENLocal_USER_NOS_INFO\".\"Birth_date\" o2, \"ENLocal_USER_NOS_INFO\".\"Gender\" o3, \"ENLocal_USER_NOS_INFO\".\"Username\" o4, \"ENLocal_USER_NOS_INFO\".\"Picture\" o5, \"ENLocal_USER_NOS_INFO\".\"CreatedAt\" o6";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_p9g_Local_USER_NOS_INFO\" \"ENLocal_USER_NOS_INFO\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, WTF_MOBModel.Local_USER_NOS_INFORecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_USER_NOS_INFOAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getUserInfoVar.value;
});
};
return getUserInfoAggr().then(function () {
// Execute Action: setActivityLog_Visit
return WTF_MBPController.default.setActivityLog_Visit$Action(false, true, false, false, ((getUserInfoVar.value.listOut.isEmpty) ? (true) : (false)), callContext);
});
}

});
});
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.clientActionProxies.onApplicationResume$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.onApplicationResume$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("WTF_MOB.controller$OpenAllExternalLinksOnSystemBrowser", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MOB.controller$OpenAllExternalLinksOnSystemBrowser.JavaScript1JS"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MOB_controller_OpenAllExternalLinksOnSystemBrowser_JavaScript1JS) {
var OS = OutSystems.Internal;
WTF_MOBController.default.openAllExternalLinksOnSystemBrowser$Action = function (containerIDIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.ExternalLinks.OpenAllExternalLinksOnSystemBrowser$vars"))());
vars.value.containerIDInLocal = containerIDIn;
controller.safeExecuteJSNode(WTF_MOB_controller_OpenAllExternalLinksOnSystemBrowser_JavaScript1JS, "JavaScript1", "OpenAllExternalLinksOnSystemBrowser", {
BodyElement: OS.DataTypes.JSConversions.basicTypeToJS(vars.value.containerIDInLocal, OS.Types.Text, true)
}, function ($parameters) {
}, {}, {});
return ;
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.ExternalLinks.OpenAllExternalLinksOnSystemBrowser$vars", [{
name: "ContainerID",
attrName: "containerIDInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.openAllExternalLinksOnSystemBrowser$Action = function (containerIDIn) {
containerIDIn = (containerIDIn === undefined) ? "" : containerIDIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.openAllExternalLinksOnSystemBrowser$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(containerIDIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});
define("WTF_MOB.controller$OpenAllExternalLinksOnSystemBrowser.JavaScript1JS", [], function () {
return function ($parameters, $actions, $roles, $public) {
console.log("Looking for links inside: "+ $parameters.BodyElement);
var element = document.getElementById($parameters.BodyElement);

if(element) {
    links =element.getElementsByTagName("A");
    
    var i;
    for (i = 0; i < links.length; i++) {
        var href=links[i].getAttribute("href");
        if(href && (href.startsWith("http") || href.startsWith("www"))) {
            console.log("the link: "+this.href);
            links[i].onclick=function(e){
                
                console.log("opening: "+this.href);
                window.open( this.href, '_system' ); this.href = "javascript:void(0)"; e.preventDefault();
            };
        }
        else console.log("ignoring " + href);
    }
    console.log("Found "+i+" links inside "+ $parameters.BodyElement);
}
};
});

define("WTF_MOB.controller$OpenExternalURL", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MOB.controller$OpenExternalURLValidation", "WTF_MOB.controller$OpenNOSPlugin", "WTF_MOB.controller$JS_OpenExternalURL"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.openExternalURL$Action = function (uRLIn, forceJSIn, tituloIn, headerColorIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.ExternalLinks.OpenExternalURL$vars"))());
vars.value.uRLInLocal = uRLIn;
vars.value.forceJSInLocal = forceJSIn;
vars.value.tituloInLocal = tituloIn;
vars.value.headerColorInLocal = headerColorIn;
var openExternalURLValidationVar = new OS.DataTypes.VariableHolder();
var openNOSPluginVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.executeSequence(function () {
if((!(vars.value.forceJSInLocal))) {
// Execute Action: OpenExternalURLValidation
return WTF_MOBController.default.openExternalURLValidation$Action(callContext).then(function (value) {
openExternalURLValidationVar.value = value;
}).then(function () {
// useJS = OpenExternalURLValidation.useJS
vars.value.useJSVar = openExternalURLValidationVar.value.useJSOut;
// useNOSCordovaPlugin = OpenExternalURLValidation.useNOSCordovaPlugin
vars.value.useNOSCordovaPluginVar = openExternalURLValidationVar.value.useNOSCordovaPluginOut;
// useNOSCordovaNewPlugin = OpenExternalURLValidation.useNOSCordovaNewPlugin
vars.value.useNOSCordovaNewPluginVar = openExternalURLValidationVar.value.useNOSCordovaNewPluginOut;
// Execute Action: LogMessage
OS.SystemActions.logMessage(((((((((((("Title:" + vars.value.tituloInLocal) + "\r\n") + "useJS:") + (vars.value.useJSVar ? "True" : "False")) + " useNOSCordovaPlugin:") + (vars.value.useNOSCordovaPluginVar ? "True" : "False")) + " useNOSCordovaNewPlugin:") + (vars.value.useNOSCordovaNewPluginVar ? "True" : "False")) + "\r\n") + "URL:") + vars.value.uRLInLocal), "PluginCheck", callContext);
}).then(function () {
return OS.Flow.executeSequence(function () {
if(((vars.value.useNOSCordovaPluginVar || vars.value.useNOSCordovaNewPluginVar))) {
// Execute Action: OpenNOSPlugin
return WTF_MOBController.default.openNOSPlugin$Action(vars.value.tituloInLocal, vars.value.uRLInLocal, false, false, vars.value.headerColorInLocal, vars.value.useNOSCordovaNewPluginVar, callContext).then(function (value) {
openNOSPluginVar.value = value;
}).then(function () {
return OS.Flow.returnAsync();

});
}

});
});
}

}).then(function () {
// Execute Action: JS_OpenExternalURL
WTF_MOBController.default.jS_OpenExternalURL$Action(vars.value.uRLInLocal, callContext);
});
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.ExternalLinks.OpenExternalURL$vars", [{
name: "URL",
attrName: "uRLInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ForceJS",
attrName: "forceJSInLocal",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Titulo",
attrName: "tituloInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "HeaderColor",
attrName: "headerColorInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "useJS",
attrName: "useJSVar",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "useNOSCordovaPlugin",
attrName: "useNOSCordovaPluginVar",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "useNOSCordovaNewPlugin",
attrName: "useNOSCordovaNewPluginVar",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.openExternalURL$Action = function (uRLIn, forceJSIn, tituloIn, headerColorIn) {
uRLIn = (uRLIn === undefined) ? "" : uRLIn;
forceJSIn = (forceJSIn === undefined) ? false : forceJSIn;
tituloIn = (tituloIn === undefined) ? "" : tituloIn;
headerColorIn = (headerColorIn === undefined) ? "" : headerColorIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.openExternalURL$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(uRLIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(forceJSIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(tituloIn, OS.Types.Text), headerColorIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("WTF_MOB.controller$OpenExternalURLValidation", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "Essentials_MOB.controller", "CommonPlugin.model", "BuildInfoPlugin.controller", "NOSCordovaPlugin.controller", "WTF_MBP.controller$GetConfigValueAsText_MBP", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "Essentials_MOB.controller$CurrentOS", "WTF_MOB.referencesHealth$Essentials_MOB", "CommonPlugin.model$ErrorRec", "WTF_MOB.referencesHealth$CommonPlugin", "BuildInfoPlugin.controller$GetBuildInfo", "WTF_MOB.referencesHealth$BuildInfoPlugin", "NOSCordovaPlugin.controller$CheckNOSCordovaPlugin", "WTF_MOB.referencesHealth$NOSCordovaPlugin"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, Essentials_MOBController, CommonPluginModel, BuildInfoPluginController, NOSCordovaPluginController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.openExternalURLValidation$Action = function (callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.ExternalLinks.OpenExternalURLValidation$vars"))());
var getMinBuildVersionAndroidVar = new OS.DataTypes.VariableHolder();
var currentOSVar = new OS.DataTypes.VariableHolder();
var getBuildInfoVar = new OS.DataTypes.VariableHolder();
var checkNOSCordovaPluginVar = new OS.DataTypes.VariableHolder();
var openWithPluginConfigurationVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.ExternalLinks.OpenExternalURLValidation$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: OpenWithPluginConfiguration
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("EXTERNAL_URL_OpenWithPlugin", callContext).then(function (value) {
openWithPluginConfigurationVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.toUpper(openWithPluginConfigurationVar.value.valueOut) === "TRUE"))) {
// Execute Action: CurrentOS
currentOSVar.value = Essentials_MOBController.default.currentOS$Action(callContext);

return OS.Flow.executeSequence(function () {
if((((currentOSVar.value.operatingSystemOut === WTF_MOBModel.staticEntities.operativeSystem.android) || (currentOSVar.value.operatingSystemOut === WTF_MOBModel.staticEntities.operativeSystem.iOS)))) {
// Execute Action: CheckNOSCordovaPlugin
checkNOSCordovaPluginVar.value = NOSCordovaPluginController.default.checkNOSCordovaPlugin$Action(callContext);

// useNOSCordovaPlugin = CheckNOSCordovaPlugin.IsAvailable
outVars.value.useNOSCordovaPluginOut = checkNOSCordovaPluginVar.value.isAvailableOut;
return OS.Flow.executeSequence(function () {
if((outVars.value.useNOSCordovaPluginOut)) {
// IOS?
return OS.Flow.executeSequence(function () {
if(((currentOSVar.value.operatingSystemOut === WTF_MOBModel.staticEntities.operativeSystem.iOS))) {
return OS.Flow.returnAsync(outVars.value);

} else {
// Execute Action: GetMinBuildVersionAndroid
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("INTERNAL_BROWSER_MIN_VERSION_ANDROID", callContext).then(function (value) {
getMinBuildVersionAndroidVar.value = value;
}).then(function () {
// SetMinBuildAndroid
// MinBuildVersionAndroid = TextToInteger
vars.value.minBuildVersionAndroidVar = (OS.BuiltinFunctions.textToInteger(OS.BuiltinFunctions.trim(getMinBuildVersionAndroidVar.value.valueOut))).toString();
// Execute Action: GetBuildInfo
getBuildInfoVar.value = BuildInfoPluginController.default.getBuildInfo$Action(callContext);

// BuildVersion = GetBuildInfo.Build
vars.value.buildVersionVar = getBuildInfoVar.value.buildOut;
// useNOSCordovaNewPlugin = BuildVersion >= MinBuildVersionAndroid
outVars.value.useNOSCordovaNewPluginOut = (vars.value.buildVersionVar >= vars.value.minBuildVersionAndroidVar);
return OS.Flow.returnAsync(outVars.value);

});
}

});
}

});
}

}).then(function () {
// useJS = True
outVars.value.useJSOut = true;
});
} else {
// useJS = True
outVars.value.useJSOut = true;
}

});
});
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.ExternalLinks.OpenExternalURLValidation$vars", [{
name: "MinBuildVersionAndroid",
attrName: "minBuildVersionAndroidVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BuildVersion",
attrName: "buildVersionVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.ExternalLinks.OpenExternalURLValidation$outVars", [{
name: "useJS",
attrName: "useJSOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "useNOSCordovaPlugin",
attrName: "useNOSCordovaPluginOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "useNOSCordovaNewPlugin",
attrName: "useNOSCordovaNewPluginOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.openExternalURLValidation$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.openExternalURLValidation$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
useJS: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.useJSOut, OS.Types.Boolean, true),
useNOSCordovaPlugin: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.useNOSCordovaPluginOut, OS.Types.Boolean, true),
useNOSCordovaNewPlugin: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.useNOSCordovaNewPluginOut, OS.Types.Boolean, true)
};
});
};
});

define("WTF_MOB.controller$OpenNOSPlugin", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "NOSCordovaPlugin.controller", "NOSCordovaPlugin.model", "WTF_MBP.controller$GetConfigValueAsText_MBP", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.controller$Cordova_GetPlatform", "WTF_MOB.controller$ValidateUserSession", "NOSCordovaPlugin.controller$ShowInternalBrowser", "WTF_MOB.referencesHealth$NOSCordovaPlugin", "WTF_MOB.model$Header3List", "NOSCordovaPlugin.controller$ShowExternalWebView", "NOSCordovaPlugin.model$HeaderRec"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController, NOSCordovaPluginController, NOSCordovaPluginModel) {
var OS = OutSystems.Internal;
WTF_MOBController.default.openNOSPlugin$Action = function (tituloIn, urlIn, isDebugModeIn, hasHeadersIn, headerColorIn, openWithNewPluginIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.ExternalLinks.OpenNOSPlugin$vars"))());
vars.value.tituloInLocal = tituloIn;
vars.value.urlInLocal = urlIn;
vars.value.isDebugModeInLocal = isDebugModeIn;
vars.value.hasHeadersInLocal = hasHeadersIn;
vars.value.headerColorInLocal = headerColorIn;
vars.value.openWithNewPluginInLocal = openWithNewPluginIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getConfigValueAsText_MBP_ClientIDVar = new OS.DataTypes.VariableHolder();
var cordova_GetPlatformVar = new OS.DataTypes.VariableHolder();
var getConfigValueAsText_MBP_AuthorizationVar = new OS.DataTypes.VariableHolder();
var validateUserSessionVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.ExternalLinks.OpenNOSPlugin$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.executeSequence(function () {
if((vars.value.hasHeadersInLocal)) {
// Execute Action: ValidateUserSession
return WTF_MOBController.default.validateUserSession$Action(true, callContext).then(function (value) {
validateUserSessionVar.value = value;
}).then(function () {
// IsValid?
return OS.Flow.executeSequence(function () {
if((validateUserSessionVar.value.isValidOut)) {
// Execute Action: Cordova_GetPlatform
cordova_GetPlatformVar.value = WTF_MBPController.default.cordova_GetPlatform$Action(callContext);

// Execute Action: GetConfigValueAsText_MBP_ClientID
return WTF_MBPController.default.getConfigValueAsText_MBP$Action((((OS.BuiltinFunctions.toUpper(cordova_GetPlatformVar.value.platformOut) === "IOS")) ? ("LoginNOS_CLIENTID_IOS") : ("LoginNOS_CLIENTID_ANDROID")), callContext).then(function (value) {
getConfigValueAsText_MBP_ClientIDVar.value = value;
}).then(function () {
// X-NOS-ClientId
// Header.Name = "X-NOS-ClientId"
vars.value.headerVar.nameAttr = "X-NOS-ClientId";
// Header.Value = GetConfigValueAsText_MBP_ClientID.Value
vars.value.headerVar.valueAttr = getConfigValueAsText_MBP_ClientIDVar.value.valueOut;
// Execute Action: ListAppend
OS.SystemActions.listAppend(vars.value.headersVar, vars.value.headerVar, callContext);
// X-NOS-Authorization
// Header.Name = "X-NOS-Authorization"
vars.value.headerVar.nameAttr = "X-NOS-Authorization";
// Header.Value = ValidateUserSession.AccessToken
vars.value.headerVar.valueAttr = validateUserSessionVar.value.accessTokenOut;
// Execute Action: ListAppend2
OS.SystemActions.listAppend(vars.value.headersVar, vars.value.headerVar, callContext);
// Execute Action: GetConfigValueAsText_MBP_Authorization
return WTF_MBPController.default.getConfigValueAsText_MBP$Action((((OS.BuiltinFunctions.toUpper(cordova_GetPlatformVar.value.platformOut) === "IOS")) ? ("Selfcare_USERAGENT_MOBILE_IOS") : ("Selfcare_USERAGENT_MOBILE_ANDROID")), callContext).then(function (value) {
getConfigValueAsText_MBP_AuthorizationVar.value = value;
});
}).then(function () {
// X-NOS-User-Agent
// Header.Name = "X-NOS-UserAgent"
vars.value.headerVar.nameAttr = "X-NOS-UserAgent";
// Header.Value = GetConfigValueAsText_MBP_Authorization.Value
vars.value.headerVar.valueAttr = getConfigValueAsText_MBP_AuthorizationVar.value.valueOut;
// Execute Action: ListAppend3
OS.SystemActions.listAppend(vars.value.headersVar, vars.value.headerVar, callContext);
// X-NOS-Outsystems
// Header.Name = "X-NOS-Outsystems"
vars.value.headerVar.nameAttr = "X-NOS-Outsystems";
// Header.Value = "TRUE"
vars.value.headerVar.valueAttr = "TRUE";
// Execute Action: ListAppend4
OS.SystemActions.listAppend(vars.value.headersVar, vars.value.headerVar, callContext);
// X-NOS-Theme
// Header.Name = "X-NOS-Theme"
vars.value.headerVar.nameAttr = "X-NOS-Theme";
// Header.Value = "theme_pink"
vars.value.headerVar.valueAttr = "theme_pink";
// Execute Action: ListAppend5
OS.SystemActions.listAppend(vars.value.headersVar, vars.value.headerVar, callContext);
});
} else {
// SessionExpired = True
outVars.value.sessionExpiredOut = true;
return OS.Flow.returnAsync(outVars.value);

}

});
});
}

}).then(function () {
if((vars.value.openWithNewPluginInLocal)) {
// Execute Action: ShowInternalBrowser
NOSCordovaPluginController.default.showInternalBrowser$Action(vars.value.urlInLocal, vars.value.tituloInLocal, vars.value.headerColorInLocal, vars.value.isDebugModeInLocal, "other", false, callContext);
} else {
// Execute Action: ShowExternalWebView
NOSCordovaPluginController.default.showExternalWebView$Action(vars.value.urlInLocal, vars.value.tituloInLocal, vars.value.headersVar, vars.value.headerColorInLocal, vars.value.isDebugModeInLocal, callContext);
}

});
}).catch(function (ex) {
OS.Logger.trace("ExternalLinks.OpenNOSPlugin", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.ExternalLinks.OpenNOSPlugin$vars", [{
name: "Titulo",
attrName: "tituloInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Url",
attrName: "urlInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsDebugMode",
attrName: "isDebugModeInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "HasHeaders",
attrName: "hasHeadersInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "HeaderColor",
attrName: "headerColorInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OpenWithNewPlugin",
attrName: "openWithNewPluginInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Header",
attrName: "headerVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new NOSCordovaPluginModel.HeaderRec();
},
complexType: NOSCordovaPluginModel.HeaderRec
}, {
name: "Headers",
attrName: "headersVar",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new WTF_MOBModel.Header3List();
},
complexType: WTF_MOBModel.Header3List
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.ExternalLinks.OpenNOSPlugin$outVars", [{
name: "SessionExpired",
attrName: "sessionExpiredOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
WTF_MOBController.default.clientActionProxies.openNOSPlugin$Action = function (tituloIn, urlIn, isDebugModeIn, hasHeadersIn, headerColorIn, openWithNewPluginIn) {
tituloIn = (tituloIn === undefined) ? "" : tituloIn;
urlIn = (urlIn === undefined) ? "" : urlIn;
isDebugModeIn = (isDebugModeIn === undefined) ? false : isDebugModeIn;
hasHeadersIn = (hasHeadersIn === undefined) ? false : hasHeadersIn;
headerColorIn = (headerColorIn === undefined) ? "" : headerColorIn;
openWithNewPluginIn = (openWithNewPluginIn === undefined) ? false : openWithNewPluginIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.openNOSPlugin$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(tituloIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(urlIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isDebugModeIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(hasHeadersIn, OS.Types.Boolean), headerColorIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(openWithNewPluginIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
SessionExpired: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.sessionExpiredOut, OS.Types.Boolean, true),
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("WTF_MOB.controller$Registration", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "WTF_MBP.controller", "WTF_MBP.controller$GetUrl_RegistrationUser", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$WTF_MBP"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, WTF_MBPController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.registration$Action = function (useOpenIdIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.UserSession.Registration$vars"))());
vars.value.useOpenIdInLocal = useOpenIdIn;
var getUrl_RegistrationUserVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.UserSession.Registration$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetUrl_RegistrationUser
return WTF_MBPController.default.getUrl_RegistrationUser$Action(vars.value.useOpenIdInLocal, callContext).then(function (value) {
getUrl_RegistrationUserVar.value = value;
}).then(function () {
// URL = GetUrl_RegistrationUser.URL
outVars.value.uRLOut = getUrl_RegistrationUserVar.value.uRLOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.UserSession.Registration$vars", [{
name: "UseOpenId",
attrName: "useOpenIdInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.UserSession.Registration$outVars", [{
name: "URL",
attrName: "uRLOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.registration$Action = function (useOpenIdIn) {
useOpenIdIn = (useOpenIdIn === undefined) ? false : useOpenIdIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.registration$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(useOpenIdIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
URL: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.uRLOut, OS.Types.Text, true)
};
});
};
});

define("WTF_MOB.controller$StartTraceGlobalAction", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "Essentials_MOB.controller", "Essentials_MOB.controller$CheckNetworkStatus", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$Essentials_MOB", "WTF_MOB.controller$Firebase_StartTrace"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, Essentials_MOBController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.startTraceGlobalAction$Action = function (traceNameIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Analytics.StartTraceGlobalAction$vars"))());
vars.value.traceNameInLocal = traceNameIn;
var checkNetworkStatusVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CheckNetworkStatus
return Essentials_MOBController.default.checkNetworkStatus$Action(callContext).then(function (value) {
checkNetworkStatusVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((checkNetworkStatusVar.value.isOnlineOut)) {
// Execute Action: Firebase_StartTrace
return WTF_MOBController.default.firebase_StartTrace$Action(vars.value.traceNameInLocal, false, callContext);
}

});
});
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Analytics.StartTraceGlobalAction$vars", [{
name: "TraceName",
attrName: "traceNameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.startTraceGlobalAction$Action = function (traceNameIn) {
traceNameIn = (traceNameIn === undefined) ? "" : traceNameIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.startTraceGlobalAction$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(traceNameIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("WTF_MOB.controller$StopTraceGlobalAction", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "Essentials_MOB.controller", "WTF_MOB.controller$Firebase_StopTrace", "WTF_MOB.controller$GoogleAnalyticsWeb_TrackTime", "Essentials_MOB.controller$CheckNetworkStatus", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$Essentials_MOB"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, Essentials_MOBController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.stopTraceGlobalAction$Action = function (analytics_PerformanceStopedIn, traceNameIn, trace_StartAtIn, categoryIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.Analytics.StopTraceGlobalAction$vars"))());
vars.value.analytics_PerformanceStopedInLocal = analytics_PerformanceStopedIn;
vars.value.traceNameInLocal = traceNameIn;
vars.value.trace_StartAtInLocal = trace_StartAtIn;
vars.value.categoryInLocal = categoryIn;
var checkNetworkStatusVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CheckNetworkStatus
return Essentials_MOBController.default.checkNetworkStatus$Action(callContext).then(function (value) {
checkNetworkStatusVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if(((!(vars.value.analytics_PerformanceStopedInLocal) && checkNetworkStatusVar.value.isOnlineOut))) {
// Execute Action: Firebase_StopTrace
return WTF_MOBController.default.firebase_StopTrace$Action(vars.value.traceNameInLocal, callContext).then(function () {
// Execute Action: GoogleAnalyticsWeb_TrackTime
WTF_MOBController.default.googleAnalyticsWeb_TrackTime$Action(vars.value.categoryInLocal, "page_load_time", vars.value.traceNameInLocal, vars.value.trace_StartAtInLocal, callContext);
});
}

});
});
}).then(function () {
return ;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.Analytics.StopTraceGlobalAction$vars", [{
name: "Analytics_PerformanceStoped",
attrName: "analytics_PerformanceStopedInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "TraceName",
attrName: "traceNameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Trace_StartAt",
attrName: "trace_StartAtInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "Category",
attrName: "categoryInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.stopTraceGlobalAction$Action = function (analytics_PerformanceStopedIn, traceNameIn, trace_StartAtIn, categoryIn) {
analytics_PerformanceStopedIn = (analytics_PerformanceStopedIn === undefined) ? false : analytics_PerformanceStopedIn;
traceNameIn = (traceNameIn === undefined) ? "" : traceNameIn;
trace_StartAtIn = (trace_StartAtIn === undefined) ? OS.DataTypes.DateTime.defaultValue : trace_StartAtIn;
categoryIn = (categoryIn === undefined) ? "" : categoryIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.stopTraceGlobalAction$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(analytics_PerformanceStopedIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(traceNameIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(trace_StartAtIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(categoryIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("WTF_MOB.controller$TriggerOfflineDataSync", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "MobilePatterns.controller", "MobilePatterns.controller$StartOfflineDataSync", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$MobilePatterns"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, MobilePatternsController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.triggerOfflineDataSync$Action = function (syncUnitIn, discardPendingSyncUnitsIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.OfflineDataSync.TriggerOfflineDataSync$vars"))());
vars.value.syncUnitInLocal = syncUnitIn;
vars.value.discardPendingSyncUnitsInLocal = discardPendingSyncUnitsIn;
// Execute Action: StartOfflineDataSync
MobilePatternsController.default.startOfflineDataSync$Action(vars.value.syncUnitInLocal, vars.value.discardPendingSyncUnitsInLocal, callContext);
return ;
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.OfflineDataSync.TriggerOfflineDataSync$vars", [{
name: "SyncUnit",
attrName: "syncUnitInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "DiscardPendingSyncUnits",
attrName: "discardPendingSyncUnitsInLocal",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.triggerOfflineDataSync$Action = function (syncUnitIn, discardPendingSyncUnitsIn) {
syncUnitIn = (syncUnitIn === undefined) ? "" : syncUnitIn;
discardPendingSyncUnitsIn = (discardPendingSyncUnitsIn === undefined) ? false : discardPendingSyncUnitsIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.triggerOfflineDataSync$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(syncUnitIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(discardPendingSyncUnitsIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("WTF_MOB.controller$ValidateUserSession", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "Essentials_MOB.controller", "WTF_MBP.model", "Essentials_MOB.controller$CheckNetworkStatus", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$Essentials_MOB", "WTF_MOB.controller$ServerAction.RefreshTokenValidate_BP", "WTF_MOB.model$Local_ACCESS_TOKEN_INFORecordList", "WTF_MBP.model$Local_ACCESS_TOKEN_INFORec", "WTF_MOB.referencesHealth$WTF_MBP", "WTF_MBP.entities"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, Essentials_MOBController, WTF_MBPModel) {
var OS = OutSystems.Internal;
WTF_MOBController.default.validateUserSession$Action = function (forceRefreshTokenIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.UserSession.ValidateUserSession$vars"))());
vars.value.forceRefreshTokenInLocal = forceRefreshTokenIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var refreshTokenValidate_BPVar = new OS.DataTypes.VariableHolder();
var checkNetworkStatusVar = new OS.DataTypes.VariableHolder();
var getLocalACCESSTOKENINFOESVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(WTF_MOBModel.Local_ACCESS_TOKEN_INFORecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.UserSession.ValidateUserSession$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalACCESSTOKENINFOES
var getLocalACCESSTOKENINFOESAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = WTF_MOBModel.Local_ACCESS_TOKEN_INFORecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_ACCESS_TOKEN_INFO\".\"Id\" o0, \"ENLocal_ACCESS_TOKEN_INFO\".\"Refresh_token\" o1, \"ENLocal_ACCESS_TOKEN_INFO\".\"Access_token\" o2, \"ENLocal_ACCESS_TOKEN_INFO\".\"IsUserRegistered\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_p9g_Local_ACCESS_TOKEN_INFO\" \"ENLocal_ACCESS_TOKEN_INFO\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, WTF_MOBModel.Local_ACCESS_TOKEN_INFORecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_ACCESS_TOKEN_INFOAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalACCESSTOKENINFOESVar.value;
});
};
return getLocalACCESSTOKENINFOESAggr().then(function () {
// No Token?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(getLocalACCESSTOKENINFOESVar.value.listOut.getCurrent(callContext.iterationContext).local_ACCESS_TOKEN_INFOAttr.refresh_tokenAttr) === ""))) {
// IsValid = False
outVars.value.isValidOut = false;
} else {
// Execute Action: CheckNetworkStatus
return Essentials_MOBController.default.checkNetworkStatus$Action(callContext).then(function (value) {
checkNetworkStatusVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((checkNetworkStatusVar.value.isOnlineOut)) {
// Execute Action: RefreshTokenValidate_BP
return controller.refreshTokenValidate_BP$ServerAction(getLocalACCESSTOKENINFOESVar.value.listOut.getCurrent(callContext.iterationContext).local_ACCESS_TOKEN_INFOAttr.refresh_tokenAttr, true, vars.value.forceRefreshTokenInLocal, callContext).then(function (value) {
refreshTokenValidate_BPVar.value = value;
}).then(function () {
// IsValid = RefreshTokenValidate_BP.IsValid
outVars.value.isValidOut = refreshTokenValidate_BPVar.value.isValidOut;
// AccessToken = RefreshTokenValidate_BP.AccessToken
outVars.value.accessTokenOut = refreshTokenValidate_BPVar.value.accessTokenOut;
// RefreshToken = GetLocalACCESSTOKENINFOES.List.Current.Local_ACCESS_TOKEN_INFO.Refresh_token
outVars.value.refreshTokenOut = getLocalACCESSTOKENINFOESVar.value.listOut.getCurrent(callContext.iterationContext).local_ACCESS_TOKEN_INFOAttr.refresh_tokenAttr;
});
} else {
// IsValid = True
outVars.value.isValidOut = true;
// IsOnline = False
outVars.value.isOnlineOut = false;
}

});
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("UserSession.ValidateUserSession", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.UserSession.ValidateUserSession$vars", [{
name: "ForceRefreshToken",
attrName: "forceRefreshTokenInLocal",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.UserSession.ValidateUserSession$outVars", [{
name: "IsValid",
attrName: "isValidOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "IsOnline",
attrName: "isOnlineOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "AccessToken",
attrName: "accessTokenOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
WTF_MOBController.default.clientActionProxies.validateUserSession$Action = function (forceRefreshTokenIn) {
forceRefreshTokenIn = (forceRefreshTokenIn === undefined) ? false : forceRefreshTokenIn;
return controller.executeActionInsideJSNode(WTF_MOBController.default.validateUserSession$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(forceRefreshTokenIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
IsValid: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isValidOut, OS.Types.Boolean, true),
IsOnline: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isOnlineOut, OS.Types.Boolean, true),
AccessToken: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.accessTokenOut, OS.Types.Text, true),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.refreshTokenOut, OS.Types.Text, true)
};
});
};
});

define("WTF_MOB.controller$VerifyNetworkStatus", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller", "Essentials_MOB.controller", "WTF_MBP.controller", "Essentials_MOB.controller$CheckNetworkStatus", "WTF_MOB.referencesHealth", "WTF_MOB.referencesHealth$Essentials_MOB", "WTF_MBP.controller$GetConfigValueAsText_MBP", "WTF_MOB.referencesHealth$WTF_MBP"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController, Essentials_MOBController, WTF_MBPController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.verifyNetworkStatus$Action = function (callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.VerifyNetworkStatus$vars"))());
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var checkNetworkStatusVar = new OS.DataTypes.VariableHolder();
var checkNetworkStatus2Var = new OS.DataTypes.VariableHolder();
var getOfflineToleranceVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("WTF_MOB.VerifyNetworkStatus$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CheckNetworkStatus
return Essentials_MOBController.default.checkNetworkStatus$Action(callContext).then(function (value) {
checkNetworkStatusVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((checkNetworkStatusVar.value.isOnlineOut)) {
// IsOnline = CheckNetworkStatus.isOnline
outVars.value.isOnlineOut = checkNetworkStatusVar.value.isOnlineOut;
} else {
// Execute Action: GetOfflineTolerance
return WTF_MBPController.default.getConfigValueAsText_MBP$Action("OFFLINE_TOLERANCE", callContext).then(function (value) {
getOfflineToleranceVar.value = value;
}).then(function () {
// ToleranceSeconds = TextToInteger
vars.value.toleranceSecondsVar = OS.BuiltinFunctions.textToInteger(getOfflineToleranceVar.value.valueOut);
// EndtDateTime = AddSeconds
vars.value.endtDateTimeVar = OS.BuiltinFunctions.addSeconds(OS.BuiltinFunctions.currDateTime(), vars.value.toleranceSecondsVar);
}).then(function () {
while ((!(OS.BuiltinFunctions.currDateTime().gte(vars.value.endtDateTimeVar)))) {
// Dummy
}

// Execute Action: CheckNetworkStatus2
return Essentials_MOBController.default.checkNetworkStatus$Action(callContext).then(function (value) {
checkNetworkStatus2Var.value = value;
}).then(function () {
// IsOnline = CheckNetworkStatus2.isOnline
outVars.value.isOnlineOut = checkNetworkStatus2Var.value.isOnlineOut;
});
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("VerifyNetworkStatus.VerifyNetworkStatus", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// IsOnline = False
outVars.value.isOnlineOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = WTF_MOBController.default;
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.VerifyNetworkStatus$vars", [{
name: "ToleranceSeconds",
attrName: "toleranceSecondsVar",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "EndtDateTime",
attrName: "endtDateTimeVar",
mandatory: false,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}]);
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB.VerifyNetworkStatus$outVars", [{
name: "IsOnline",
attrName: "isOnlineOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
WTF_MOBController.default.clientActionProxies.verifyNetworkStatus$Action = function () {
return controller.executeActionInsideJSNode(WTF_MOBController.default.verifyNetworkStatus$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
IsOnline: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isOnlineOut, OS.Types.Boolean, true)
};
});
};
});

define("WTF_MOB.controller$ServerAction.GetUrl_LogoutUser", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.getUrl_LogoutUser$ServerAction = function (refreshTokenIn, callContext) {
var controller = this.controller;
var inputs = {
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text)
};
return controller.callServerAction("GetUrl_LogoutUser", "screenservices/WTF_MOB/ActionGetUrl_LogoutUser", "guevZk9QnkyUiPRN0SZlRw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("WTF_MOB$rssespacewtf_bp_ActionGetUrl_LogoutUser"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.uRLOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.URL, OS.Types.Text);
return executeServerActionResult;
});
};
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB$rssespacewtf_bp_ActionGetUrl_LogoutUser", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "URL",
attrName: "uRLOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("WTF_MOB.controller$ServerAction.RefreshTokenValidate_BP", ["exports", "OutSystems", "WTF_MOB.model", "WTF_MOB.controller"], function (exports, OutSystems, WTF_MOBModel, WTF_MOBController) {
var OS = OutSystems.Internal;
WTF_MOBController.default.refreshTokenValidate_BP$ServerAction = function (refreshTokenIn, validateUserInfoIn, forceRefreshTokenIn, callContext) {
var controller = this.controller;
var inputs = {
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
ValidateUserInfo: OS.DataTypes.JSConversions.basicTypeToJS(validateUserInfoIn, OS.Types.Boolean),
ForceRefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(forceRefreshTokenIn, OS.Types.Boolean)
};
return controller.callServerAction("RefreshTokenValidate_BP", "screenservices/WTF_MOB/ActionRefreshTokenValidate_BP", "xvcLJQ2G4iDIv3FLCEJenA", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("WTF_MOB$rssespacewtf_bp_ActionRefreshTokenValidate_BP"))();
executeServerActionResult.isValidOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.IsValid, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.accessTokenOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.AccessToken, OS.Types.Text);
executeServerActionResult.clientIdOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.ClientId, OS.Types.Text);
executeServerActionResult.correlationIdOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.CorrelationId, OS.Types.Text);
executeServerActionResult.platformOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Platform, OS.Types.Text);
executeServerActionResult.userUIDOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.UserUID, OS.Types.Text);
executeServerActionResult.deviceUIDOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.DeviceUID, OS.Types.Text);
executeServerActionResult.isOpendIDOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.IsOpendID, OS.Types.Boolean);
executeServerActionResult.idTokenOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.IdToken, OS.Types.Text);
return executeServerActionResult;
});
};
WTF_MOBController.default.constructor.registerVariableGroupType("WTF_MOB$rssespacewtf_bp_ActionRefreshTokenValidate_BP", [{
name: "IsValid",
attrName: "isValidOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AccessToken",
attrName: "accessTokenOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ClientId",
attrName: "clientIdOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CorrelationId",
attrName: "correlationIdOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Platform",
attrName: "platformOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "UserUID",
attrName: "userUIDOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "DeviceUID",
attrName: "deviceUIDOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsOpendID",
attrName: "isOpendIDOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "IdToken",
attrName: "idTokenOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("WTF_MOB.controller", ["exports", "OutSystems", "WTF_MOB.model"], function (exports, OutSystems, WTF_MOBModel) {
var OS = OutSystems.Internal;
var WTF_MOBController = exports;
var Controller = (function (_super) {
__extends(Controller, _super);
function Controller() {
_super.apply(this, arguments);
this.registerOnApplicationReadyHandler("WTF_MOB.controller$OnApplicationReady", "onApplicationReady$Action");
this.registerOnApplicationResumeHandler("WTF_MOB.controller$OnApplicationResume", "onApplicationResume$Action");
}
Controller.prototype.clientActionProxies = {};
Controller.prototype.roles = {};
Controller.prototype.defaultTimeout = 20;
Controller.prototype.getDefaultTimeout = function () {
return WTF_MOBController.default.defaultTimeout;
};
return Controller;
})(OS.Controller.BaseModuleController);
WTF_MOBController.default = new Controller();
});
