define("BALANCE_MBP.controller$Balance_ClearCache", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_BALANCE_LINESRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.balance_ClearCache$Action = function (callContext) {
callContext = controller.callContext(callContext);
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var cache_DisableByServiceBalanceInfoVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceConfigVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceBalanceHomepageInfoVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Cache.Balance_ClearCache$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteAllLocal_BALANCE_LINES
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.deleteAll(callContext).then(function () {
// Execute Action: Cache_DisableByServiceConfig
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceConfigAttr, callContext).then(function (value) {
cache_DisableByServiceConfigVar.value = value;
});
}).then(function () {
// Execute Action: Cache_DisableByServiceBalanceInfo
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr, callContext).then(function (value) {
cache_DisableByServiceBalanceInfoVar.value = value;
});
}).then(function () {
// Execute Action: Cache_DisableByServiceBalanceHomepageInfo
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.homepageBalanceInfoAttr, callContext).then(function (value) {
cache_DisableByServiceBalanceHomepageInfoVar.value = value;
});
});
}).catch(function (ex) {
OS.Logger.trace("Cache.Balance_ClearCache", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Cache.Balance_ClearCache$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.balance_ClearCache$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.balance_ClearCache$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$BalanceNetMobile_ClearCache", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_BLM_BALANCERec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.balanceNetMobile_ClearCache$Action = function (callContext) {
callContext = controller.callContext(callContext);
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var cache_DisableByServiceBalanceInfoVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Cache.BalanceNetMobile_ClearCache$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteAllLocal_BLM_BALANCE
return BALANCE_MBPModel.entities.Local_BLM_BALANCE.deleteAll(callContext).then(function () {
// Execute Action: Cache_DisableByServiceBalanceInfo
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr, callContext).then(function (value) {
cache_DisableByServiceBalanceInfoVar.value = value;
});
});
}).catch(function (ex) {
OS.Logger.trace("Cache.BalanceNetMobile_ClearCache", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Cache.BalanceNetMobile_ClearCache$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.balanceNetMobile_ClearCache$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.balanceNetMobile_ClearCache$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$Cache_DisableByService", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_CACHE_CONTROL_SERVICESRecordList", "BALANCE_MBP.model$Local_CACHE_CONTROL_SERVICESRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.cache_DisableByService$Action = function (cacheServiceIdIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Cache.Cache_DisableByService$vars"))());
vars.value.cacheServiceIdInLocal = cacheServiceIdIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getLocalCACHECONTROLSERVIcesByCacheServiceIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_CACHE_CONTROL_SERVICESRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Cache.Cache_DisableByService$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalCACHECONTROLSERVIcesByCacheServiceId
var getLocalCACHECONTROLSERVIcesByCacheServiceIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_CACHE_CONTROL_SERVICESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstCacheServiceId = vars.value.cacheServiceIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5";
} else {
selectSql += "\"ENLocal_CACHE_CONTROL_SERVI\".\"Id\" o0, \"ENLocal_CACHE_CONTROL_SERVI\".\"CacheServiceId\" o1, \"ENLocal_CACHE_CONTROL_SERVI\".\"CacheControlId\" o2, \"ENLocal_CACHE_CONTROL_SERVI\".\"LastUpdateAt\" o3, \"ENLocal_CACHE_CONTROL_SERVI\".\"ExpirationDate\" o4, \"ENLocal_CACHE_CONTROL_SERVI\".\"LastCacheCheck\" o5";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_CACHE_CONTROL_SERVICES\" \"ENLocal_CACHE_CONTROL_SERVI\"";
fromAndWhereSql += " WHERE (\"ENLocal_CACHE_CONTROL_SERVI\".\"CacheServiceId\" = :qpstCacheServiceId)";
argsList.add("qpstCacheServiceId", /*TEXT*/ 0, qpstCacheServiceId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_CACHE_CONTROL_SERVICESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_CACHE_CONTROL_SERVICESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value;
});
};
return getLocalCACHECONTROLSERVIcesByCacheServiceIdAggr().then(function () {
// Foreach GetLocalCACHECONTROLSERVIcesByCacheServiceId.List
callContext.iterationContext.registerIterationStart(getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut);
}).then(function () {
return OS.Flow.tryFinally(function () {
var getLocalCACHECONTROLSERVIcesByCacheServiceIdIterator = callContext.iterationContext.getIterator(getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut);
var getLocalCACHECONTROLSERVIcesByCacheServiceIdIndex = 0;
return OS.Flow.whileAsync(function () {
return ((getLocalCACHECONTROLSERVIcesByCacheServiceIdIndex < getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.length));
}, function () {
getLocalCACHECONTROLSERVIcesByCacheServiceIdIterator.currentRowNumber = getLocalCACHECONTROLSERVIcesByCacheServiceIdIndex;
// Execute Action: DeleteLocal_CACHE_CONTROL_SERVICES
return BALANCE_MBPModel.entities.Local_CACHE_CONTROL_SERVICES.delete(getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getItem(getLocalCACHECONTROLSERVIcesByCacheServiceIdIndex.valueOf()).local_CACHE_CONTROL_SERVICESAttr.idAttr, callContext).then(function () {
getLocalCACHECONTROLSERVIcesByCacheServiceIdIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut);
});
});
}).catch(function (ex) {
OS.Logger.trace("Cache.Cache_DisableByService", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Cache.Cache_DisableByService$vars", [{
name: "CacheServiceId",
attrName: "cacheServiceIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Cache.Cache_DisableByService$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.cache_DisableByService$Action = function (cacheServiceIdIn) {
cacheServiceIdIn = (cacheServiceIdIn === undefined) ? "" : cacheServiceIdIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.cache_DisableByService$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheServiceIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$Cache_ValidationByService", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "Essentials_MOB.controller", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$Local_CACHE_CONTROL_SERVICESRecord", "Essentials_MOB.controller$CheckNetworkStatus", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$Essentials_MOB", "BALANCE_MBP.controller$ServerAction.Cache_GetCacheControlId", "BALANCE_MBP.model$Local_CACHE_CONTROL_SERVICESRec", "BALANCE_MBP.model$Local_CACHE_CONTROL_SERVICESRecordList", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, Essentials_MOBController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.cache_ValidationByService$Action = function (cacheServiceIdIn, toRefreshIn, applicationIn, cacheValidationIntervalIn, refreshTokenIn, validateItemCacheExpirationDateIn, itemCacheExpirationDateIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Cache.Cache_ValidationByService$vars"))());
vars.value.cacheServiceIdInLocal = cacheServiceIdIn;
vars.value.toRefreshInLocal = toRefreshIn;
vars.value.applicationInLocal = applicationIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.validateItemCacheExpirationDateInLocal = validateItemCacheExpirationDateIn;
vars.value.itemCacheExpirationDateInLocal = itemCacheExpirationDateIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var cache_GetCacheControlIdVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateLocal_CACHE_CONTROL_SERVICESVar = new OS.DataTypes.VariableHolder();
var checkNetworkStatusVar = new OS.DataTypes.VariableHolder();
var getLocalCACHECONTROLSERVIcesByCacheServiceIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_CACHE_CONTROL_SERVICESRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Cache.Cache_ValidationByService$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.executeSequence(function () {
if(((vars.value.refreshTokenInLocal === ""))) {
// Execute Action: LogMessage_NoRefreshToken
OS.SystemActions.logMessage(((((((((((((((((((((((((((((("Refresh token is empty" + "\r\n") + "INPUT") + "\r\n") + "CacheServiceId[") + vars.value.cacheServiceIdInLocal) + "]") + "\r\n") + "ToRefresh[") + (vars.value.toRefreshInLocal ? "True" : "False")) + "]") + "\r\n") + "ValidateItemCacheExpirationDate[") + (vars.value.validateItemCacheExpirationDateInLocal ? "True" : "False")) + "]") + "\r\n") + "ItemCacheExpirationDate[") + OS.BuiltinFunctions.dateTimeToText(vars.value.itemCacheExpirationDateInLocal)) + "]") + "\r\n") + "OUTPUT") + "\r\n") + "useCache[") + (outVars.value.useCacheOut ? "True" : "False")) + "]") + "\r\n") + "CacheExpirationDate[") + OS.BuiltinFunctions.dateTimeToText(outVars.value.cacheExpirationDateOut)) + "]") + "\r\n"), "CacheControl", callContext);
} else {
// Aggregate: GetLocalCACHECONTROLSERVIcesByCacheServiceId
var getLocalCACHECONTROLSERVIcesByCacheServiceIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_CACHE_CONTROL_SERVICESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstCacheServiceId = vars.value.cacheServiceIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5";
} else {
selectSql += "\"ENLocal_CACHE_CONTROL_SERVI\".\"Id\" o0, \"ENLocal_CACHE_CONTROL_SERVI\".\"CacheServiceId\" o1, \"ENLocal_CACHE_CONTROL_SERVI\".\"CacheControlId\" o2, \"ENLocal_CACHE_CONTROL_SERVI\".\"LastUpdateAt\" o3, \"ENLocal_CACHE_CONTROL_SERVI\".\"ExpirationDate\" o4, \"ENLocal_CACHE_CONTROL_SERVI\".\"LastCacheCheck\" o5";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_CACHE_CONTROL_SERVICES\" \"ENLocal_CACHE_CONTROL_SERVI\"";
fromAndWhereSql += " WHERE (\"ENLocal_CACHE_CONTROL_SERVI\".\"CacheServiceId\" = :qpstCacheServiceId)";
argsList.add("qpstCacheServiceId", /*TEXT*/ 0, qpstCacheServiceId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_CACHE_CONTROL_SERVICESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_CACHE_CONTROL_SERVICESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value;
});
};
return getLocalCACHECONTROLSERVIcesByCacheServiceIdAggr().then(function () {
// CacheExpirationDate = GetLocalCACHECONTROLSERVIcesByCacheServiceId.List.Current.Local_CACHE_CONTROL_SERVICES.ExpirationDate
outVars.value.cacheExpirationDateOut = getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.expirationDateAttr;
// Execute Action: CheckNetworkStatus
return Essentials_MOBController.default.checkNetworkStatus$Action(callContext).then(function (value) {
checkNetworkStatusVar.value = value;
});
}).then(function () {
// Invalid Cache?
return OS.Flow.executeSequence(function () {
if(((checkNetworkStatusVar.value.isOnlineOut && (((getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.expirationDateAttr.equals(OS.BuiltinFunctions.nullDate()) || OS.BuiltinFunctions.currDateTime().gte(getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.expirationDateAttr)) || vars.value.toRefreshInLocal) || (((OS.BuiltinFunctions.diffMinutes(getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.lastCacheCheckAttr, OS.BuiltinFunctions.currDateTime()) > vars.value.cacheValidationIntervalInLocal) && (vars.value.cacheValidationIntervalInLocal > 0)) || (vars.value.validateItemCacheExpirationDateInLocal && OS.BuiltinFunctions.currDateTime().gte(vars.value.itemCacheExpirationDateInLocal))))))) {
// useCache = False
outVars.value.useCacheOut = false;
// Execute Action: Cache_GetCacheControlId
return controller.cache_GetCacheControlId$ServerAction(vars.value.refreshTokenInLocal, vars.value.cacheServiceIdInLocal, vars.value.toRefreshInLocal, vars.value.applicationInLocal, callContext).then(function (value) {
cache_GetCacheControlIdVar.value = value;
}).then(function () {
// Execute Action: LogMessage
OS.SystemActions.logMessage(((((((("CacheControlId:" + OS.BuiltinFunctions.longIntegerToText(cache_GetCacheControlIdVar.value.cacheControlIdOut)) + "Success:") + (cache_GetCacheControlIdVar.value.successOut ? "True" : "False")) + "MinutesToInvalidateCache:") + (cache_GetCacheControlIdVar.value.minutesToInvalidateCacheOut).toString()) + "isAtive:") + (cache_GetCacheControlIdVar.value.isAtiveOut ? "True" : "False")), "CacheControl", callContext);
}).then(function () {
// Invalid Cache Id?
return OS.Flow.executeSequence(function () {
if((cache_GetCacheControlIdVar.value.cacheControlIdOut.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier())))) {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(vars.value.cacheServiceIdInLocal, callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// Execute Action: LogMessage_CacheNotConfigured
OS.SystemActions.logMessage(((((((((((((((((((((((((((((("Cache not configured" + "\r\n") + "INPUT") + "\r\n") + "CacheServiceId[") + vars.value.cacheServiceIdInLocal) + "]") + "\r\n") + "ToRefresh[") + (vars.value.toRefreshInLocal ? "True" : "False")) + "]") + "\r\n") + "ValidateItemCacheExpirationDate[") + (vars.value.validateItemCacheExpirationDateInLocal ? "True" : "False")) + "]") + "\r\n") + "ItemCacheExpirationDate[") + OS.BuiltinFunctions.dateTimeToText(vars.value.itemCacheExpirationDateInLocal)) + "]") + "\r\n") + "OUTPUT") + "\r\n") + "useCache[") + (outVars.value.useCacheOut ? "True" : "False")) + "]") + "\r\n") + "CacheExpirationDate[") + OS.BuiltinFunctions.dateTimeToText(outVars.value.cacheExpirationDateOut)) + "]") + "\r\n"), "CacheControl", callContext);
});
} else {
// CacheControl exists?
if((!(cache_GetCacheControlIdVar.value.cacheControlIdOut.equals(getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.cacheControlIdAttr)))) {
// GetLocalCACHECONTROLSERVIcesByCacheServiceId.List.Current.Local_CACHE_CONTROL_SERVICES.CacheServiceId = CacheServiceId
getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.cacheServiceIdAttr = vars.value.cacheServiceIdInLocal;
// GetLocalCACHECONTROLSERVIcesByCacheServiceId.List.Current.Local_CACHE_CONTROL_SERVICES.CacheControlId = Cache_GetCacheControlId.CacheControlId
getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.cacheControlIdAttr = cache_GetCacheControlIdVar.value.cacheControlIdOut;
// GetLocalCACHECONTROLSERVIcesByCacheServiceId.List.Current.Local_CACHE_CONTROL_SERVICES.LastUpdateAt = CurrDateTime
getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.lastUpdateAtAttr = OS.BuiltinFunctions.currDateTime();
// GetLocalCACHECONTROLSERVIcesByCacheServiceId.List.Current.Local_CACHE_CONTROL_SERVICES.ExpirationDate = AddMinutes
getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.expirationDateAttr = OS.BuiltinFunctions.addMinutes(getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.lastUpdateAtAttr, cache_GetCacheControlIdVar.value.minutesToInvalidateCacheOut);
// CacheExpirationDate = GetLocalCACHECONTROLSERVIcesByCacheServiceId.List.Current.Local_CACHE_CONTROL_SERVICES.ExpirationDate
outVars.value.cacheExpirationDateOut = getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.expirationDateAttr;
}

// LastCacheCheck
// GetLocalCACHECONTROLSERVIcesByCacheServiceId.List.Current.Local_CACHE_CONTROL_SERVICES.LastCacheCheck = CurrDateTime
getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr.lastCacheCheckAttr = OS.BuiltinFunctions.currDateTime();
// Execute Action: CreateOrUpdateLocal_CACHE_CONTROL_SERVICES
return BALANCE_MBPModel.entities.Local_CACHE_CONTROL_SERVICES.createOrUpdate(BALANCE_MBPModel.Local_CACHE_CONTROL_SERVICESRecord.fromStructure(getLocalCACHECONTROLSERVIcesByCacheServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_CACHE_CONTROL_SERVICESAttr), callContext).then(function (value) {
createOrUpdateLocal_CACHE_CONTROL_SERVICESVar.value = value;
}).then(function () {
// Execute Action: LogMessage_CacheCreateOrUpdate
OS.SystemActions.logMessage(((((((((((((((((((((((((((((("Cache created or updated" + "\r\n") + "INPUT") + "\r\n") + "CacheServiceId[") + vars.value.cacheServiceIdInLocal) + "]") + "\r\n") + "ToRefresh[") + (vars.value.toRefreshInLocal ? "True" : "False")) + "]") + "\r\n") + "ValidateItemCacheExpirationDate[") + (vars.value.validateItemCacheExpirationDateInLocal ? "True" : "False")) + "]") + "\r\n") + "ItemCacheExpirationDate[") + OS.BuiltinFunctions.dateTimeToText(vars.value.itemCacheExpirationDateInLocal)) + "]") + "\r\n") + "OUTPUT") + "\r\n") + "useCache[") + (outVars.value.useCacheOut ? "True" : "False")) + "]") + "\r\n") + "CacheExpirationDate[") + OS.BuiltinFunctions.dateTimeToText(outVars.value.cacheExpirationDateOut)) + "]") + "\r\n"), "CacheControl", callContext);
});
}

});
});
} else {
// useCache = True
outVars.value.useCacheOut = true;
// Execute Action: LogMessage_CacheIsValid
OS.SystemActions.logMessage(((((((((((((((((((((((((((((("Cache is valid" + "\r\n") + "INPUT") + "\r\n") + "CacheServiceId[") + vars.value.cacheServiceIdInLocal) + "]") + "\r\n") + "ToRefresh[") + (vars.value.toRefreshInLocal ? "True" : "False")) + "]") + "\r\n") + "ValidateItemCacheExpirationDate[") + (vars.value.validateItemCacheExpirationDateInLocal ? "True" : "False")) + "]") + "\r\n") + "ItemCacheExpirationDate[") + OS.BuiltinFunctions.dateTimeToText(vars.value.itemCacheExpirationDateInLocal)) + "]") + "\r\n") + "OUTPUT") + "\r\n") + "useCache[") + (outVars.value.useCacheOut ? "True" : "False")) + "]") + "\r\n") + "CacheExpirationDate[") + OS.BuiltinFunctions.dateTimeToText(outVars.value.cacheExpirationDateOut)) + "]") + "\r\n"), "CacheControl", callContext);
}

});
});
}

});
}).catch(function (ex) {
OS.Logger.trace("Cache.Cache_ValidationByService", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// useCache = False
outVars.value.useCacheOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Cache.Cache_ValidationByService$vars", [{
name: "CacheServiceId",
attrName: "cacheServiceIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ToRefresh",
attrName: "toRefreshInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ValidateItemCacheExpirationDate",
attrName: "validateItemCacheExpirationDateInLocal",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "ItemCacheExpirationDate",
attrName: "itemCacheExpirationDateInLocal",
mandatory: false,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Cache.Cache_ValidationByService$outVars", [{
name: "useCache",
attrName: "useCacheOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "CacheExpirationDate",
attrName: "cacheExpirationDateOut",
mandatory: false,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.cache_ValidationByService$Action = function (cacheServiceIdIn, toRefreshIn, applicationIn, cacheValidationIntervalIn, refreshTokenIn, validateItemCacheExpirationDateIn, itemCacheExpirationDateIn) {
cacheServiceIdIn = (cacheServiceIdIn === undefined) ? "" : cacheServiceIdIn;
toRefreshIn = (toRefreshIn === undefined) ? false : toRefreshIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
validateItemCacheExpirationDateIn = (validateItemCacheExpirationDateIn === undefined) ? false : validateItemCacheExpirationDateIn;
itemCacheExpirationDateIn = (itemCacheExpirationDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : itemCacheExpirationDateIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.cache_ValidationByService$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheServiceIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(toRefreshIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(validateItemCacheExpirationDateIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(itemCacheExpirationDateIn, OS.Types.DateTime)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
useCache: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.useCacheOut, OS.Types.Boolean, true),
CacheExpirationDate: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.cacheExpirationDateOut, OS.Types.DateTime, true)
};
});
};
});

define("BALANCE_MBP.controller$CheckCustomerRestricted", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "App_Config_MBP.controller", "App_Config_MBP.controller$GetConfigValueAsText_MBP", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$App_Config_MBP", "BALANCE_MBP.controller$ServerAction.CheckBalanceCustomerRestricted_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, App_Config_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.checkCustomerRestricted$Action = function (applicationIn, refreshTokenIn, associationIdIn, mSISDNIn, processIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.CheckCustomerRestricted$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.mSISDNInLocal = mSISDNIn;
vars.value.processInLocal = processIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var checkBalanceCustomerRestricted_BPVar = new OS.DataTypes.VariableHolder();
var getCustomerRestrictedIDVar = new OS.DataTypes.VariableHolder();
var getCustomerRestrictedStatusVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.CheckCustomerRestricted$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetCustomerRestrictedID
return App_Config_MBPController.default.getConfigValueAsText_MBP$Action(vars.value.applicationInLocal, "CUSTOMER_RESTRICTED_ID", callContext).then(function (value) {
getCustomerRestrictedIDVar.value = value;
}).then(function () {
// SetID
// ID = GetCustomerRestrictedID.Value
vars.value.iDVar = getCustomerRestrictedIDVar.value.valueOut;
// Execute Action: GetCustomerRestrictedStatus
return App_Config_MBPController.default.getConfigValueAsText_MBP$Action(vars.value.applicationInLocal, "CUSTOMER_RESTRICTED_STATUS", callContext).then(function (value) {
getCustomerRestrictedStatusVar.value = value;
});
}).then(function () {
// SetStatus
// Status = GetCustomerRestrictedStatus.Value
vars.value.statusVar = getCustomerRestrictedStatusVar.value.valueOut;
// Execute Action: CheckBalanceCustomerRestricted_BP
return controller.checkBalanceCustomerRestricted_BP$ServerAction(vars.value.refreshTokenInLocal, vars.value.associationIdInLocal, vars.value.mSISDNInLocal, vars.value.processInLocal, vars.value.iDVar, vars.value.statusVar, vars.value.applicationInLocal, callContext).then(function (value) {
checkBalanceCustomerRestricted_BPVar.value = value;
});
}).then(function () {
// CheckBalanceCustomerRestriced.Success?
if((checkBalanceCustomerRestricted_BPVar.value.successOut)) {
// BalanceRestricted = CheckBalanceCustomerRestricted_BP.BalanceRestricted
outVars.value.balanceRestrictedOut = checkBalanceCustomerRestricted_BPVar.value.balanceRestrictedOut;
// RefillRestricted = CheckBalanceCustomerRestricted_BP.RefillRestricted
outVars.value.refillRestrictedOut = checkBalanceCustomerRestricted_BPVar.value.refillRestrictedOut;
} else {
// Success = False
outVars.value.successOut = false;
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.CheckCustomerRestricted", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.CheckCustomerRestricted$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "MSISDN",
attrName: "mSISDNInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ID",
attrName: "iDVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Status",
attrName: "statusVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.CheckCustomerRestricted$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "BalanceRestricted",
attrName: "balanceRestrictedOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "RefillRestricted",
attrName: "refillRestrictedOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
BALANCE_MBPController.default.clientActionProxies.checkCustomerRestricted$Action = function (applicationIn, refreshTokenIn, associationIdIn, mSISDNIn, processIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
mSISDNIn = (mSISDNIn === undefined) ? "" : mSISDNIn;
processIn = (processIn === undefined) ? "" : processIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.checkCustomerRestricted$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(mSISDNIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
BalanceRestricted: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.balanceRestrictedOut, OS.Types.Boolean, true),
RefillRestricted: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.refillRestrictedOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$ClearCache_BalanceAndPayments", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$Balance_ClearCache", "BALANCE_MBP.model$Local_LAST_PAYMENT_PROCESSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.clearCache_BalanceAndPayments$Action = function (callContext) {
callContext = controller.callContext(callContext);
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var balance_ClearCacheVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: Balance_ClearCache
return BALANCE_MBPController.default.balance_ClearCache$Action(callContext).then(function (value) {
balance_ClearCacheVar.value = value;
}).then(function () {
// Execute Action: DeleteAllLocal_LAST_PAYMENT_PROCESS
return BALANCE_MBPModel.entities.Local_LAST_PAYMENT_PROCESS.deleteAll(callContext);
});
}).catch(function (ex) {
OS.Logger.trace("Cache.ClearCache_BalanceAndPayments", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync();

});
}

throw ex;
}).then(function () {
return ;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.clientActionProxies.clearCache_BalanceAndPayments$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.clearCache_BalanceAndPayments$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("BALANCE_MBP.controller$ClearCache_PaymentProcesses", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_LAST_PAYMENT_PROCESSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.clearCache_PaymentProcesses$Action = function (callContext) {
callContext = controller.callContext(callContext);
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteAllLocal_LAST_PAYMENT_PROCESS
return BALANCE_MBPModel.entities.Local_LAST_PAYMENT_PROCESS.deleteAll(callContext);
}).catch(function (ex) {
OS.Logger.trace("Cache.ClearCache_PaymentProcesses", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync();

});
}

throw ex;
}).then(function () {
return ;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.clientActionProxies.clearCache_PaymentProcesses$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.clearCache_PaymentProcesses$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("BALANCE_MBP.controller$CreateCard", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$ServerAction.CreateCard"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createCard$Action = function (refreshTokenIn, payment_refIn, applicationIn, contract_DNIn, associationIdIn, bin_CodeIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.WalletCards.CreateCard$vars"))());
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.payment_refInLocal = payment_refIn;
vars.value.applicationInLocal = applicationIn;
vars.value.contract_DNInLocal = contract_DNIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.bin_CodeInLocal = bin_CodeIn;
var createCardVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.WalletCards.CreateCard$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CreateCard
return controller.createCard$ServerAction(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.payment_refInLocal, vars.value.contract_DNInLocal, vars.value.associationIdInLocal, vars.value.bin_CodeInLocal, callContext).then(function (value) {
createCardVar.value = value;
}).then(function () {
// Success = CreateCard.Success
outVars.value.successOut = createCardVar.value.successOut;
// Message = CreateCard.Message
outVars.value.messageOut = createCardVar.value.messageOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.WalletCards.CreateCard$vars", [{
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Payment_ref",
attrName: "payment_refInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Contract_DN",
attrName: "contract_DNInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Bin_Code",
attrName: "bin_CodeInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.WalletCards.CreateCard$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.createCard$Action = function (refreshTokenIn, payment_refIn, applicationIn, contract_DNIn, associationIdIn, bin_CodeIn) {
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
payment_refIn = (payment_refIn === undefined) ? "" : payment_refIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
contract_DNIn = (contract_DNIn === undefined) ? "" : contract_DNIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
bin_CodeIn = (bin_CodeIn === undefined) ? "" : bin_CodeIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createCard$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(payment_refIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(contract_DNIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(bin_CodeIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
Message: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.messageOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$CreateCardV2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$ServerAction.CreateCardV2"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createCardV2$Action = function (refreshTokenIn, payment_refIn, applicationIn, contract_DNIn, associationIdIn, bin_CodeIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.WalletCards.CreateCardV2$vars"))());
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.payment_refInLocal = payment_refIn;
vars.value.applicationInLocal = applicationIn;
vars.value.contract_DNInLocal = contract_DNIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.bin_CodeInLocal = bin_CodeIn;
var createCardV2Var = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.WalletCards.CreateCardV2$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CreateCardV2
return controller.createCardV2$ServerAction(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.payment_refInLocal, vars.value.contract_DNInLocal, vars.value.associationIdInLocal, vars.value.bin_CodeInLocal, callContext).then(function (value) {
createCardV2Var.value = value;
}).then(function () {
// Success = CreateCardV2.Success
outVars.value.successOut = createCardV2Var.value.successOut;
// Message = CreateCardV2.Message
outVars.value.messageOut = createCardV2Var.value.messageOut;
// LastFourDigitsCardNumber = CreateCardV2.LastFourDigitsCardNumber
outVars.value.lastFourDigitsCardNumberOut = createCardV2Var.value.lastFourDigitsCardNumberOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.WalletCards.CreateCardV2$vars", [{
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Payment_ref",
attrName: "payment_refInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Contract_DN",
attrName: "contract_DNInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Bin_Code",
attrName: "bin_CodeInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.WalletCards.CreateCardV2$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "LastFourDigitsCardNumber",
attrName: "lastFourDigitsCardNumberOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.createCardV2$Action = function (refreshTokenIn, payment_refIn, applicationIn, contract_DNIn, associationIdIn, bin_CodeIn) {
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
payment_refIn = (payment_refIn === undefined) ? "" : payment_refIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
contract_DNIn = (contract_DNIn === undefined) ? "" : contract_DNIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
bin_CodeIn = (bin_CodeIn === undefined) ? "" : bin_CodeIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createCardV2$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(payment_refIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(contract_DNIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(bin_CodeIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
Message: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.messageOut, OS.Types.Text, true),
LastFourDigitsCardNumber: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.lastFourDigitsCardNumberOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$CreateLocal_COMMDETAILS_FILTERS_Logic", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRecord", "BALANCE_MBP.model$STR_Local_COMMDETAILS_FILTERSRec", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createLocal_COMMDETAILS_FILTERS_Logic$Action = function (sourceIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateLocal_COMMDETAILS_FILTERS_Logic$vars"))());
vars.value.sourceInLocal = sourceIn.clone();
var createLocal_COMMDETAILS_FILTERSVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateLocal_COMMDETAILS_FILTERS_Logic$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// CommDetailsAux = Source
vars.value.commDetailsAuxVar = OS.DataTypes.JSConversions.typeConvertRecord(vars.value.sourceInLocal, new BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.intervalDaysMinAttr = source.intervalDaysMinAttr;
target.intervalDaysMaxAttr = source.intervalDaysMaxAttr;
target.intervalHoursMinAttr = source.intervalHoursMinAttr;
target.intervalHoursMaxAttr = source.intervalHoursMaxAttr;
target.communicationCostMinAttr = source.communicationCostMinAttr;
target.communicationCostMaxAttr = source.communicationCostMaxAttr;
target.callDurationMinAttr = source.callDurationMinAttr;
target.callDurationMaxAttr = source.callDurationMaxAttr;
target.checked_SMSAttr = source.checked_SMSAttr;
target.checked_MMSAttr = source.checked_MMSAttr;
target.checked_VozMovelAttr = source.checked_VozMovelAttr;
target.checked_MovelNacionalAttr = source.checked_MovelNacionalAttr;
target.checked_FixaNacionalAttr = source.checked_FixaNacionalAttr;
target.checked_RoamingEuropaAttr = source.checked_RoamingEuropaAttr;
target.checked_RoamingInternationalAttr = source.checked_RoamingInternationalAttr;
target.checked_ValorAcrescentadoAttr = source.checked_ValorAcrescentadoAttr;
target.quickFilter_Checked_PagoAttr = source.quickFilter_Checked_PagoAttr;
target.quickFilter_Checked_SemCustoAttr = source.quickFilter_Checked_SemCustoAttr;
return target;
});
// Execute Action: CreateLocal_COMMDETAILS_FILTERS
return BALANCE_MBPModel.entities.Local_COMMDETAILS_FILTERS.create(BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRecord.fromStructure(vars.value.commDetailsAuxVar), callContext).then(function (value) {
createLocal_COMMDETAILS_FILTERSVar.value = value;
}).then(function () {
// Id = CreateLocal_COMMDETAILS_FILTERS.Id
outVars.value.idOut = createLocal_COMMDETAILS_FILTERSVar.value.idOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateLocal_COMMDETAILS_FILTERS_Logic$vars", [{
name: "Source",
attrName: "sourceInLocal",
mandatory: true,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.STR_Local_COMMDETAILS_FILTERSRec();
},
complexType: BALANCE_MBPModel.STR_Local_COMMDETAILS_FILTERSRec
}, {
name: "CommDetailsAux",
attrName: "commDetailsAuxVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRec();
},
complexType: BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateLocal_COMMDETAILS_FILTERS_Logic$outVars", [{
name: "Id",
attrName: "idOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.createLocal_COMMDETAILS_FILTERS_Logic$Action = function (sourceIn) {
sourceIn = (sourceIn === undefined) ? new BALANCE_MBPModel.STR_Local_COMMDETAILS_FILTERSRec() : sourceIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createLocal_COMMDETAILS_FILTERS_Logic$Action.bind(controller, sourceIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Id: actionResults.idOut
};
});
};
});

define("BALANCE_MBP.controller$CreateOrUpdateLastPaymentProcess", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_LAST_PAYMENT_PROCESSRecord", "BALANCE_MBP.model$Local_LAST_PAYMENT_PROCESSRecordList", "BALANCE_MBP.model$Local_LAST_PAYMENT_PROCESSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createOrUpdateLastPaymentProcess$Action = function (paymentProcessIn, isPartialIn, paymentRefIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.PaymentProcessHistory.CreateOrUpdateLastPaymentProcess$vars"))());
vars.value.paymentProcessInLocal = paymentProcessIn;
vars.value.isPartialInLocal = isPartialIn;
vars.value.paymentRefInLocal = paymentRefIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var createOrUpdateLocal_LAST_PAYMENT_PROCESSVar = new OS.DataTypes.VariableHolder();
var getLocalLASTPAYMENTPROCESSESVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_LAST_PAYMENT_PROCESSRecordList))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalLASTPAYMENTPROCESSES
var getLocalLASTPAYMENTPROCESSESAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_LAST_PAYMENT_PROCESSRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_LAST_PAYMENT_PROCES\".\"Id\" o0, \"ENLocal_LAST_PAYMENT_PROCES\".\"PaymentProcess\" o1, \"ENLocal_LAST_PAYMENT_PROCES\".\"IsPartial\" o2, \"ENLocal_LAST_PAYMENT_PROCES\".\"PaymentRef\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_LAST_PAYMENT_PROCESS\" \"ENLocal_LAST_PAYMENT_PROCES\"";
orderBySql += " ORDER BY \"ENLocal_LAST_PAYMENT_PROCES\".\"PaymentProcess\" ASC ";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_LAST_PAYMENT_PROCESSRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_LAST_PAYMENT_PROCESSAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalLASTPAYMENTPROCESSESVar.value;
});
};
return getLocalLASTPAYMENTPROCESSESAggr().then(function () {
// GetLocalLASTPAYMENTPROCESSES.List.Current.Local_LAST_PAYMENT_PROCESS.PaymentProcess = PaymentProcess
getLocalLASTPAYMENTPROCESSESVar.value.listOut.getCurrent(callContext.iterationContext).local_LAST_PAYMENT_PROCESSAttr.paymentProcessAttr = vars.value.paymentProcessInLocal;
// GetLocalLASTPAYMENTPROCESSES.List.Current.Local_LAST_PAYMENT_PROCESS.IsPartial = IsPartial
getLocalLASTPAYMENTPROCESSESVar.value.listOut.getCurrent(callContext.iterationContext).local_LAST_PAYMENT_PROCESSAttr.isPartialAttr = vars.value.isPartialInLocal;
// GetLocalLASTPAYMENTPROCESSES.List.Current.Local_LAST_PAYMENT_PROCESS.PaymentRef = PaymentRef
getLocalLASTPAYMENTPROCESSESVar.value.listOut.getCurrent(callContext.iterationContext).local_LAST_PAYMENT_PROCESSAttr.paymentRefAttr = vars.value.paymentRefInLocal;
// Execute Action: CreateOrUpdateLocal_LAST_PAYMENT_PROCESS
return BALANCE_MBPModel.entities.Local_LAST_PAYMENT_PROCESS.createOrUpdate(getLocalLASTPAYMENTPROCESSESVar.value.listOut.getCurrent(callContext.iterationContext), callContext).then(function (value) {
createOrUpdateLocal_LAST_PAYMENT_PROCESSVar.value = value;
});
});
}).catch(function (ex) {
OS.Logger.trace("PaymentProcessHistory.CreateOrUpdateLastPaymentProcess", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync();

});
}

throw ex;
}).then(function () {
return ;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.PaymentProcessHistory.CreateOrUpdateLastPaymentProcess$vars", [{
name: "PaymentProcess",
attrName: "paymentProcessInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsPartial",
attrName: "isPartialInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PaymentRef",
attrName: "paymentRefInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.createOrUpdateLastPaymentProcess$Action = function (paymentProcessIn, isPartialIn, paymentRefIn) {
paymentProcessIn = (paymentProcessIn === undefined) ? "" : paymentProcessIn;
isPartialIn = (isPartialIn === undefined) ? false : isPartialIn;
paymentRefIn = (paymentRefIn === undefined) ? "" : paymentRefIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createOrUpdateLastPaymentProcess$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(paymentProcessIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isPartialIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(paymentRefIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("BALANCE_MBP.controller$CreateOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_BALANCE_NEXT_CHARGE_DETAILRecord", "BALANCE_MBP.model$Local_BALANCE_NEXT_CHARGE_DETAILRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic$Action = function (sourceIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic$vars"))());
vars.value.sourceInLocal = sourceIn.clone();
var createOrUpdateLocal_BALANCE_NEXT_CHARGE_DETAILVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CreateOrUpdateLocal_BALANCE_NEXT_CHARGE_DETAIL
return BALANCE_MBPModel.entities.Local_BALANCE_NEXT_CHARGE_DETAIL.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_NEXT_CHARGE_DETAILRecord.fromStructure(vars.value.sourceInLocal), callContext).then(function (value) {
createOrUpdateLocal_BALANCE_NEXT_CHARGE_DETAILVar.value = value;
}).then(function () {
// Id = CreateOrUpdateLocal_BALANCE_NEXT_CHARGE_DETAIL.Id
outVars.value.idOut = createOrUpdateLocal_BALANCE_NEXT_CHARGE_DETAILVar.value.idOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic$vars", [{
name: "Source",
attrName: "sourceInLocal",
mandatory: true,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BALANCE_NEXT_CHARGE_DETAILRec();
},
complexType: BALANCE_MBPModel.Local_BALANCE_NEXT_CHARGE_DETAILRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic$outVars", [{
name: "Id",
attrName: "idOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.createOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic$Action = function (sourceIn) {
sourceIn = (sourceIn === undefined) ? new BALANCE_MBPModel.Local_BALANCE_NEXT_CHARGE_DETAILRec() : sourceIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic$Action.bind(controller, sourceIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Id: actionResults.idOut
};
});
};
});

define("BALANCE_MBP.controller$CreateOrUpdateLocal_BLM_BALANCE_Logic", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_BLM_BALANCERecord", "BALANCE_MBP.model$Local_BLM_BALANCERec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createOrUpdateLocal_BLM_BALANCE_Logic$Action = function (sourceIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_BLM_BALANCE_Logic$vars"))());
vars.value.sourceInLocal = sourceIn.clone();
var createOrUpdateLocal_BLM_BALANCEVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_BLM_BALANCE_Logic$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CreateOrUpdateLocal_BLM_BALANCE
return BALANCE_MBPModel.entities.Local_BLM_BALANCE.createOrUpdate(vars.value.sourceInLocal, callContext).then(function (value) {
createOrUpdateLocal_BLM_BALANCEVar.value = value;
}).then(function () {
// Id = CreateOrUpdateLocal_BLM_BALANCE.Id
outVars.value.idOut = createOrUpdateLocal_BLM_BALANCEVar.value.idOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_BLM_BALANCE_Logic$vars", [{
name: "Source",
attrName: "sourceInLocal",
mandatory: true,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BLM_BALANCERecord();
},
complexType: BALANCE_MBPModel.Local_BLM_BALANCERecord
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_BLM_BALANCE_Logic$outVars", [{
name: "Id",
attrName: "idOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.createOrUpdateLocal_BLM_BALANCE_Logic$Action = function (sourceIn) {
sourceIn = (sourceIn === undefined) ? new BALANCE_MBPModel.Local_BLM_BALANCERecord() : sourceIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createOrUpdateLocal_BLM_BALANCE_Logic$Action.bind(controller, sourceIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Id: actionResults.idOut
};
});
};
});

define("BALANCE_MBP.controller$CreateOrUpdateLocal_COMMDETAILS_FILTERS_Logic", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRecord", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERS1Record", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createOrUpdateLocal_COMMDETAILS_FILTERS_Logic$Action = function (sourceIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_COMMDETAILS_FILTERS_Logic$vars"))());
vars.value.sourceInLocal = sourceIn.clone();
var createOrUpdateLocal_COMMDETAILS_FILTERSVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_COMMDETAILS_FILTERS_Logic$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CreateOrUpdateLocal_COMMDETAILS_FILTERS
return BALANCE_MBPModel.entities.Local_COMMDETAILS_FILTERS.createOrUpdate(OS.DataTypes.JSConversions.typeConvertRecord(vars.value.sourceInLocal, new BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRecord(), function (source, target) {
target.local_COMMDETAILS_FILTERSAttr = source.local_BLM_BALANCEAttr;
return target;
}), callContext).then(function (value) {
createOrUpdateLocal_COMMDETAILS_FILTERSVar.value = value;
}).then(function () {
// Id = CreateOrUpdateLocal_COMMDETAILS_FILTERS.Id
outVars.value.idOut = createOrUpdateLocal_COMMDETAILS_FILTERSVar.value.idOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_COMMDETAILS_FILTERS_Logic$vars", [{
name: "Source",
attrName: "sourceInLocal",
mandatory: true,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_COMMDETAILS_FILTERS1Record();
},
complexType: BALANCE_MBPModel.Local_COMMDETAILS_FILTERS1Record
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_COMMDETAILS_FILTERS_Logic$outVars", [{
name: "Id",
attrName: "idOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.createOrUpdateLocal_COMMDETAILS_FILTERS_Logic$Action = function (sourceIn) {
sourceIn = (sourceIn === undefined) ? new BALANCE_MBPModel.Local_COMMDETAILS_FILTERS1Record() : sourceIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createOrUpdateLocal_COMMDETAILS_FILTERS_Logic$Action.bind(controller, sourceIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Id: actionResults.idOut
};
});
};
});

define("BALANCE_MBP.controller$CreateorUpdateLocal_COMMDETAILS_FILTERS_Logic_v2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRecord", "BALANCE_MBP.model$STR_Local_COMMDETAILS_FILTERSRec", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createorUpdateLocal_COMMDETAILS_FILTERS_Logic_v2$Action = function (input_IdIn, sourceIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateorUpdateLocal_COMMDETAILS_FILTERS_Logic_v2$vars"))());
vars.value.input_IdInLocal = input_IdIn;
vars.value.sourceInLocal = sourceIn.clone();
var createOrUpdateLocal_COMMDETAILS_FILTERSVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateorUpdateLocal_COMMDETAILS_FILTERS_Logic_v2$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// CommDetailsAux = Source
vars.value.commDetailsAuxVar = OS.DataTypes.JSConversions.typeConvertRecord(vars.value.sourceInLocal, new BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRec(), function (source, target) {
target.idAttr = vars.value.input_IdInLocal;
target.intervalDaysMinAttr = source.intervalDaysMinAttr;
target.intervalDaysMaxAttr = source.intervalDaysMaxAttr;
target.intervalHoursMinAttr = source.intervalHoursMinAttr;
target.intervalHoursMaxAttr = source.intervalHoursMaxAttr;
target.communicationCostMinAttr = source.communicationCostMinAttr;
target.communicationCostMaxAttr = source.communicationCostMaxAttr;
target.callDurationMinAttr = source.callDurationMinAttr;
target.callDurationMaxAttr = source.callDurationMaxAttr;
target.checked_SMSAttr = source.checked_SMSAttr;
target.checked_MMSAttr = source.checked_MMSAttr;
target.checked_VozMovelAttr = source.checked_VozMovelAttr;
target.checked_MovelNacionalAttr = source.checked_MovelNacionalAttr;
target.checked_FixaNacionalAttr = source.checked_FixaNacionalAttr;
target.checked_RoamingEuropaAttr = source.checked_RoamingEuropaAttr;
target.checked_RoamingInternationalAttr = source.checked_RoamingInternationalAttr;
target.checked_ValorAcrescentadoAttr = source.checked_ValorAcrescentadoAttr;
target.quickFilter_Checked_PagoAttr = source.quickFilter_Checked_PagoAttr;
target.quickFilter_Checked_SemCustoAttr = source.quickFilter_Checked_SemCustoAttr;
return target;
});
// Execute Action: CreateOrUpdateLocal_COMMDETAILS_FILTERS
return BALANCE_MBPModel.entities.Local_COMMDETAILS_FILTERS.createOrUpdate(BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRecord.fromStructure(vars.value.commDetailsAuxVar), callContext).then(function (value) {
createOrUpdateLocal_COMMDETAILS_FILTERSVar.value = value;
}).then(function () {
// Output_Id = CreateOrUpdateLocal_COMMDETAILS_FILTERS.Id
outVars.value.output_IdOut = createOrUpdateLocal_COMMDETAILS_FILTERSVar.value.idOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateorUpdateLocal_COMMDETAILS_FILTERS_Logic_v2$vars", [{
name: "Input_Id",
attrName: "input_IdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Source",
attrName: "sourceInLocal",
mandatory: true,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.STR_Local_COMMDETAILS_FILTERSRec();
},
complexType: BALANCE_MBPModel.STR_Local_COMMDETAILS_FILTERSRec
}, {
name: "CommDetailsAux",
attrName: "commDetailsAuxVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRec();
},
complexType: BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateorUpdateLocal_COMMDETAILS_FILTERS_Logic_v2$outVars", [{
name: "Output_Id",
attrName: "output_IdOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.createorUpdateLocal_COMMDETAILS_FILTERS_Logic_v2$Action = function (input_IdIn, sourceIn) {
input_IdIn = (input_IdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : input_IdIn;
sourceIn = (sourceIn === undefined) ? new BALANCE_MBPModel.STR_Local_COMMDETAILS_FILTERSRec() : sourceIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createorUpdateLocal_COMMDETAILS_FILTERS_Logic_v2$Action.bind(controller, input_IdIn, sourceIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Output_Id: actionResults.output_IdOut
};
});
};
});

define("BALANCE_MBP.controller$CreateOrUpdateLocal_NET_DISTRIBUTION_Logic", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_NET_DISTRIBUTIONRecord", "BALANCE_MBP.model$Local_NET_DISTRIBUTIONRec", "BALANCE_MBP.model$Local_NET_DISTRIBUTIONRecordList", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createOrUpdateLocal_NET_DISTRIBUTION_Logic$Action = function (associationIdIn, mSISDNIn, previous_BaseIn, previous_ExtraIn, previous_ComplementIn, next_BaseIn, next_ExtraIn, next_ComplementIn, renew_DateIn, cacheExpirationDateIn, min_ExtraIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_NET_DISTRIBUTION_Logic$vars"))());
vars.value.associationIdInLocal = associationIdIn;
vars.value.mSISDNInLocal = mSISDNIn;
vars.value.previous_BaseInLocal = previous_BaseIn;
vars.value.previous_ExtraInLocal = previous_ExtraIn;
vars.value.previous_ComplementInLocal = previous_ComplementIn;
vars.value.next_BaseInLocal = next_BaseIn;
vars.value.next_ExtraInLocal = next_ExtraIn;
vars.value.next_ComplementInLocal = next_ComplementIn;
vars.value.renew_DateInLocal = renew_DateIn;
vars.value.cacheExpirationDateInLocal = cacheExpirationDateIn;
vars.value.min_ExtraInLocal = min_ExtraIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var createOrUpdateLocal_NET_DISTRIBUTIONVar = new OS.DataTypes.VariableHolder();
var getLocalNETDISTRIBUTIONSByAssociationIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_NET_DISTRIBUTION_Logic$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalNETDISTRIBUTIONSByAssociationId
var getLocalNETDISTRIBUTIONSByAssociationIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploAssociationId = vars.value.associationIdInLocal;
var qpstMSISDN = vars.value.mSISDNInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11";
} else {
selectSql += "\"ENLocal_NET_DISTRIBUTION\".\"Id\" o0, \"ENLocal_NET_DISTRIBUTION\".\"AssociationId\" o1, \"ENLocal_NET_DISTRIBUTION\".\"MSISDN\" o2, \"ENLocal_NET_DISTRIBUTION\".\"Previous_Base\" o3, \"ENLocal_NET_DISTRIBUTION\".\"Previous_Extra\" o4, \"ENLocal_NET_DISTRIBUTION\".\"Previous_Complement\" o5, \"ENLocal_NET_DISTRIBUTION\".\"Next_Base\" o6, \"ENLocal_NET_DISTRIBUTION\".\"Next_Extra\" o7, \"ENLocal_NET_DISTRIBUTION\".\"Next_Complement\" o8, \"ENLocal_NET_DISTRIBUTION\".\"Min_Extra\" o9, \"ENLocal_NET_DISTRIBUTION\".\"Renew_Date\" o10, \"ENLocal_NET_DISTRIBUTION\".\"CacheExpirationDate\" o11";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_NET_DISTRIBUTION\" \"ENLocal_NET_DISTRIBUTION\"";
fromAndWhereSql += " WHERE (\"ENLocal_NET_DISTRIBUTION\".\"AssociationId\" = CAST(:qploAssociationId AS INTEGER)) AND (\"ENLocal_NET_DISTRIBUTION\".\"MSISDN\" = :qpstMSISDN)";
orderBySql += " ORDER BY \"ENLocal_NET_DISTRIBUTION\".\"MSISDN\" ASC ";
argsList.add("qploAssociationId", /*LONGINTEGER*/ 4, qploAssociationId);
argsList.add("qpstMSISDN", /*TEXT*/ 0, qpstMSISDN);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_NET_DISTRIBUTIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalNETDISTRIBUTIONSByAssociationIdVar.value;
});
};
return getLocalNETDISTRIBUTIONSByAssociationIdAggr().then(function () {
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.AssociationId = AssociationId
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.associationIdAttr = vars.value.associationIdInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.MSISDN = MSISDN
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.mSISDNAttr = vars.value.mSISDNInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.Previous_Base = Previous_Base
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.previous_BaseAttr = vars.value.previous_BaseInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.Previous_Extra = Previous_Extra
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.previous_ExtraAttr = vars.value.previous_ExtraInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.Previous_Complement = Previous_Complement
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.previous_ComplementAttr = vars.value.previous_ComplementInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.Next_Base = Next_Base
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.next_BaseAttr = vars.value.next_BaseInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.Next_Extra = Next_Extra
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.next_ExtraAttr = vars.value.next_ExtraInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.Next_Complement = Next_Complement
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.next_ComplementAttr = vars.value.next_ComplementInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.Renew_Date = Renew_Date
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.renew_DateAttr = vars.value.renew_DateInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.CacheExpirationDate = CacheExpirationDate
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.cacheExpirationDateAttr = vars.value.cacheExpirationDateInLocal;
// GetLocalNETDISTRIBUTIONSByAssociationId.List.Current.Local_NET_DISTRIBUTION.Min_Extra = Min_Extra
getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.min_ExtraAttr = vars.value.min_ExtraInLocal;
// Execute Action: CreateOrUpdateLocal_NET_DISTRIBUTION
return BALANCE_MBPModel.entities.Local_NET_DISTRIBUTION.createOrUpdate(BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecord.fromStructure(getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr), callContext).then(function (value) {
createOrUpdateLocal_NET_DISTRIBUTIONVar.value = value;
});
}).then(function () {
// Success = True
outVars.value.successOut = true;
// Id = CreateOrUpdateLocal_NET_DISTRIBUTION.Id
outVars.value.idOut = createOrUpdateLocal_NET_DISTRIBUTIONVar.value.idOut;
});
}).catch(function (ex) {
OS.Logger.trace("CRUD.CreateOrUpdateLocal_NET_DISTRIBUTION_Logic", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_NET_DISTRIBUTION_Logic$vars", [{
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "MSISDN",
attrName: "mSISDNInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Previous_Base",
attrName: "previous_BaseInLocal",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Previous_Extra",
attrName: "previous_ExtraInLocal",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Previous_Complement",
attrName: "previous_ComplementInLocal",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Next_Base",
attrName: "next_BaseInLocal",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Next_Extra",
attrName: "next_ExtraInLocal",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Next_Complement",
attrName: "next_ComplementInLocal",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Renew_Date",
attrName: "renew_DateInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheExpirationDate",
attrName: "cacheExpirationDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "Min_Extra",
attrName: "min_ExtraInLocal",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.CreateOrUpdateLocal_NET_DISTRIBUTION_Logic$outVars", [{
name: "Id",
attrName: "idOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.createOrUpdateLocal_NET_DISTRIBUTION_Logic$Action = function (associationIdIn, mSISDNIn, previous_BaseIn, previous_ExtraIn, previous_ComplementIn, next_BaseIn, next_ExtraIn, next_ComplementIn, renew_DateIn, cacheExpirationDateIn, min_ExtraIn) {
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
mSISDNIn = (mSISDNIn === undefined) ? "" : mSISDNIn;
previous_BaseIn = (previous_BaseIn === undefined) ? 0 : previous_BaseIn;
previous_ExtraIn = (previous_ExtraIn === undefined) ? 0 : previous_ExtraIn;
previous_ComplementIn = (previous_ComplementIn === undefined) ? 0 : previous_ComplementIn;
next_BaseIn = (next_BaseIn === undefined) ? 0 : next_BaseIn;
next_ExtraIn = (next_ExtraIn === undefined) ? 0 : next_ExtraIn;
next_ComplementIn = (next_ComplementIn === undefined) ? 0 : next_ComplementIn;
renew_DateIn = (renew_DateIn === undefined) ? "" : renew_DateIn;
cacheExpirationDateIn = (cacheExpirationDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : cacheExpirationDateIn;
min_ExtraIn = (min_ExtraIn === undefined) ? 0 : min_ExtraIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createOrUpdateLocal_NET_DISTRIBUTION_Logic$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(mSISDNIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(previous_BaseIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(previous_ExtraIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(previous_ComplementIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(next_BaseIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(next_ExtraIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(next_ComplementIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(renew_DateIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheExpirationDateIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(min_ExtraIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Id: actionResults.idOut,
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$CreateOrUpdateLocal_TOP_UP_SELECTION_Logic", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_TOP_UP_SELECTIONRecord", "BALANCE_MBP.model$Local_TOP_UP_SELECTIONRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createOrUpdateLocal_TOP_UP_SELECTION_Logic$Action = function (sourceIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.TopUpSelection.CreateOrUpdateLocal_TOP_UP_SELECTION_Logic$vars"))());
vars.value.sourceInLocal = sourceIn.clone();
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var createOrUpdateLocal_TOP_UP_SELECTIONVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.TopUpSelection.CreateOrUpdateLocal_TOP_UP_SELECTION_Logic$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CreateOrUpdateLocal_TOP_UP_SELECTION
return BALANCE_MBPModel.entities.Local_TOP_UP_SELECTION.createOrUpdate(vars.value.sourceInLocal, callContext).then(function (value) {
createOrUpdateLocal_TOP_UP_SELECTIONVar.value = value;
}).then(function () {
// Id = CreateOrUpdateLocal_TOP_UP_SELECTION.Id
outVars.value.idOut = createOrUpdateLocal_TOP_UP_SELECTIONVar.value.idOut;
});
}).catch(function (ex) {
OS.Logger.trace("TopUpSelection.CreateOrUpdateLocal_TOP_UP_SELECTION_Logic", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.TopUpSelection.CreateOrUpdateLocal_TOP_UP_SELECTION_Logic$vars", [{
name: "Source",
attrName: "sourceInLocal",
mandatory: true,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_TOP_UP_SELECTIONRecord();
},
complexType: BALANCE_MBPModel.Local_TOP_UP_SELECTIONRecord
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.TopUpSelection.CreateOrUpdateLocal_TOP_UP_SELECTION_Logic$outVars", [{
name: "Id",
attrName: "idOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.createOrUpdateLocal_TOP_UP_SELECTION_Logic$Action = function (sourceIn) {
sourceIn = (sourceIn === undefined) ? new BALANCE_MBPModel.Local_TOP_UP_SELECTIONRecord() : sourceIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createOrUpdateLocal_TOP_UP_SELECTION_Logic$Action.bind(controller, sourceIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Id: actionResults.idOut,
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$CreatePipeInformation", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$ParseBalanceDate", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRecord", "BALANCE_MBP.model$TextRecordList", "BALANCE_MBP.controller$ServerAction.String_Split", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRec", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFORecordList", "BALANCE_MBP.model$Local_BALANCE_LINESRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_BALANCE_TAG_DATATYPERecordList", "BALANCE_MBP.model$Local_BALANCE_LINESRec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.model$Local_BALANCE_TAG_DATATYPERec", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFORec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createPipeInformation$Action = function (inputTextIn, balanceLineIDIn, balanceConfigIDIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.CreatePipeInformation$vars"))());
vars.value.inputTextInLocal = inputTextIn;
vars.value.balanceLineIDInLocal = balanceLineIDIn;
vars.value.balanceConfigIDInLocal = balanceConfigIDIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var string_SplitByTagVar = new OS.DataTypes.VariableHolder();
var parseBalanceDateTimeVar = new OS.DataTypes.VariableHolder();
var createPipeInformationVar = new OS.DataTypes.VariableHolder();
var parseBalanceDateVar = new OS.DataTypes.VariableHolder();
var getBalanceLineByIDVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_LINESRecordList))());
var getBalanceConfigByIDVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList))());
var getBalanceDataTypeVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_TAG_DATATYPERecordList))());
var getBalanceConfigInfoVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_CONFIG_INFORecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.CreatePipeInformation$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetBalanceLineByID
var getBalanceLineByIDAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_LINESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qploId = vars.value.balanceLineIDInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23";
} else {
selectSql += "\"ENLocal_BALANCE_LINES\".\"Id\" o0, \"ENLocal_BALANCE_LINES\".\"BalanceGroupDescription\" o1, \"ENLocal_BALANCE_LINES\".\"AvailableAmount\" o2, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnit\" o3, \"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" o4, \"ENLocal_BALANCE_LINES\".\"ConsumedAmount\" o5, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnit\" o6, \"ENLocal_BALANCE_LINES\".\"TotalAmount\" o7, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnit\" o8, \"ENLocal_BALANCE_LINES\".\"Order\" o9, \"ENLocal_BALANCE_LINES\".\"DateTime\" o10, \"ENLocal_BALANCE_LINES\".\"PackageNumber\" o11, \"ENLocal_BALANCE_LINES\".\"IsCredit\" o12, \"ENLocal_BALANCE_LINES\".\"CreditDescription\" o13, \"ENLocal_BALANCE_LINES\".\"TagCode\" o14, \"ENLocal_BALANCE_LINES\".\"PageCode\" o15, \"ENLocal_BALANCE_LINES\".\"AvailableAmountFmt\" o16, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnitFmt\" o17, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountFmt\" o18, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnitFmt\" o19, \"ENLocal_BALANCE_LINES\".\"TotalAmountFmt\" o20, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnitFmt\" o21, \"ENLocal_BALANCE_LINES\".\"CacheExpirationDate\" o22, \"ENLocal_BALANCE_LINES\".\"ExpiryDate\" o23";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_LINES\" \"ENLocal_BALANCE_LINES\"";
fromAndWhereSql += " WHERE ";
if (qploId != 0) {
fromAndWhereSql += "((\"ENLocal_BALANCE_LINES\".\"Id\" = :qploId) AND (\"ENLocal_BALANCE_LINES\".\"Id\" IS NOT NULL))";
argsList.add("qploId", /*LONGINTEGER*/ 4, qploId);
} else {
fromAndWhereSql += "(\"ENLocal_BALANCE_LINES\".\"Id\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_LINESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_LINESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceLineByIDVar.value;
});
};
return getBalanceLineByIDAggr().then(function () {
// BalanceLineEmpty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceLineByIDVar.value.listOut.isEmpty))) {
// Aggregate: GetBalanceConfigByID
var getBalanceConfigByIDAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qploId = vars.value.balanceConfigIDInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\"";
fromAndWhereSql += " WHERE ";
if (qploId != 0) {
fromAndWhereSql += "((\"ENLocal_BALANCE_CONFIG\".\"Id\" = :qploId) AND (\"ENLocal_BALANCE_CONFIG\".\"Id\" IS NOT NULL))";
argsList.add("qploId", /*LONGINTEGER*/ 4, qploId);
} else {
fromAndWhereSql += "(\"ENLocal_BALANCE_CONFIG\".\"Id\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigByIDVar.value;
});
};
return getBalanceConfigByIDAggr().then(function () {
// BalanceConfigEmpty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigByIDVar.value.listOut.isEmpty))) {
// PipeFound?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.index(vars.value.inputTextInLocal, "|", 0, false, false) >= 0))) {
// Execute Action: String_SplitByTag
return controller.string_Split$ServerAction(vars.value.inputTextInLocal, "|", callContext).then(function (value) {
string_SplitByTagVar.value = value;
}).then(function () {
// Execute Action: ListRemove
OS.SystemActions.listRemove(string_SplitByTagVar.value.listOut, 0, callContext);
// Execute Action: ListAppendAll
OS.SystemActions.listAppendAll(vars.value.tempPipeListVar, OS.DataTypes.JSConversions.typeConvertRecordList(string_SplitByTagVar.value.listOut, new OS.DataTypes.TextList(), function (source, target) {
target = source.textAttr.valueAttr;
return target;
}), callContext);
// TempPipeList
// Foreach TempPipeList
callContext.iterationContext.registerIterationStart(vars.value.tempPipeListVar);
}).then(function () {
return OS.Flow.tryFinally(function () {
var tempPipeListIterator = callContext.iterationContext.getIterator(vars.value.tempPipeListVar);
var tempPipeListIndexMax = vars.value.tempPipeListVar.length;
var tempPipeListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((tempPipeListIndex < vars.value.tempPipeListVar.length)) && (tempPipeListIndexMax > 0));
}, function () {
tempPipeListIterator.currentRowNumber = tempPipeListIndex;
// SetTempPipeInformation
// TempPipeInformation.BalanceLineID = BalanceLineID
vars.value.tempPipeInformationVar.balanceLineIDAttr = vars.value.balanceLineIDInLocal;
// TempPipeInformation.BalanceConfigID = BalanceConfigID
vars.value.tempPipeInformationVar.balanceConfigIDAttr = vars.value.balanceConfigIDInLocal;
// TempPipeInformation.Tag = "#pos" + Replace
vars.value.tempPipeInformationVar.tagAttr = ("#pos" + OS.BuiltinFunctions.replace(OS.BuiltinFunctions.integerToText((vars.value.tempPipeListVar.getCurrentRowNumber(callContext.iterationContext) + 1)), "0", ""));
// TempPipeInformation.Value = TempPipeList.Current
vars.value.tempPipeInformationVar.valueAttr = vars.value.tempPipeListVar.getItem(tempPipeListIndex.valueOf());
// Aggregate: GetBalanceConfigInfo
var getBalanceConfigInfoAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_CONFIG_INFORecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploBalanceConfigID = vars.value.balanceConfigIDInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG_INFO\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG_INFO\".\"Value\" o1, \"ENLocal_BALANCE_CONFIG_INFO\".\"DateTime\" o2, \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" o3, \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigAttributesID\" o4, \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigGroupID\" o5";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG_INFO\" \"ENLocal_BALANCE_CONFIG_INFO\"";
fromAndWhereSql += " WHERE ";
if (qploBalanceConfigID != 0) {
fromAndWhereSql += "((\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" = :qploBalanceConfigID) AND (\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" IS NOT NULL))";
argsList.add("qploBalanceConfigID", /*LONGINTEGER*/ 4, qploBalanceConfigID);
} else {
fromAndWhereSql += "(\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_CONFIG_INFORecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIG_INFOAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigInfoVar.value;
});
};
return getBalanceConfigInfoAggr().then(function () {
// GetBalanceConfigInfo
// Foreach GetBalanceConfigInfo.List
callContext.iterationContext.registerIterationStart(getBalanceConfigInfoVar.value.listOut);
}).then(function () {
return OS.Flow.tryFinally(function () {
var getBalanceConfigInfoIterator = callContext.iterationContext.getIterator(getBalanceConfigInfoVar.value.listOut);
var getBalanceConfigInfoIndexMax = getBalanceConfigInfoVar.value.listOut.length;
var getBalanceConfigInfoIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getBalanceConfigInfoIndex < getBalanceConfigInfoVar.value.listOut.length)) && (getBalanceConfigInfoIndexMax > 0));
}, function () {
getBalanceConfigInfoIterator.currentRowNumber = getBalanceConfigInfoIndex;
// PositionTagFound?
return OS.Flow.executeSequence(function () {
if((((OS.BuiltinFunctions.index(getBalanceConfigInfoVar.value.listOut.getItem(getBalanceConfigInfoIndex.valueOf()).local_BALANCE_CONFIG_INFOAttr.valueAttr, vars.value.tempPipeInformationVar.tagAttr, 0, false, false) >= 0) && (OS.BuiltinFunctions.index(getBalanceConfigInfoVar.value.listOut.getItem(getBalanceConfigInfoIndex.valueOf()).local_BALANCE_CONFIG_INFOAttr.valueAttr, "@", 0, false, false) >= 0)))) {
// StartCodeIndex = Index
vars.value.startCodeIndexVar = OS.BuiltinFunctions.index(getBalanceConfigInfoVar.value.listOut.getItem(getBalanceConfigInfoIndex.valueOf()).local_BALANCE_CONFIG_INFOAttr.valueAttr, "@", OS.BuiltinFunctions.index(getBalanceConfigInfoVar.value.listOut.getItem(getBalanceConfigInfoIndex.valueOf()).local_BALANCE_CONFIG_INFOAttr.valueAttr, vars.value.tempPipeInformationVar.tagAttr, 0, false, false), false, false);
// EndCodeIndex = Index
vars.value.endCodeIndexVar = OS.BuiltinFunctions.index(getBalanceConfigInfoVar.value.listOut.getItem(getBalanceConfigInfoIndex.valueOf()).local_BALANCE_CONFIG_INFOAttr.valueAttr, "/e", vars.value.startCodeIndexVar, false, false);
// TempDataTypeCode = Trim
vars.value.tempDataTypeCodeVar = OS.BuiltinFunctions.trim(OS.BuiltinFunctions.substr(getBalanceConfigInfoVar.value.listOut.getItem(getBalanceConfigInfoIndex.valueOf()).local_BALANCE_CONFIG_INFOAttr.valueAttr, vars.value.startCodeIndexVar, (vars.value.endCodeIndexVar - vars.value.startCodeIndexVar)));
// Aggregate: GetBalanceDataType
var getBalanceDataTypeAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_TAG_DATATYPERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.tempDataTypeCodeVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4";
} else {
selectSql += "\"ENLocal_BALANCE_TAG_DATATYP\".\"Id\" o0, \"ENLocal_BALANCE_TAG_DATATYP\".\"Code\" o1, \"ENLocal_BALANCE_TAG_DATATYP\".\"Format\" o2, \"ENLocal_BALANCE_TAG_DATATYP\".\"FormatReceived\" o3, \"ENLocal_BALANCE_TAG_DATATYP\".\"DateTime\" o4";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_TAG_DATATYPE\" \"ENLocal_BALANCE_TAG_DATATYP\"";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_TAG_DATATYP\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_TAG_DATATYPERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_TAG_DATATYPEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceDataTypeVar.value;
});
};
return getBalanceDataTypeAggr().then(function () {
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.toLower(getBalanceDataTypeVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_TAG_DATATYPEAttr.codeAttr) === "@date"))) {
// Execute Action: ParseBalanceDate
return BALANCE_MBPController.default.parseBalanceDate$Action(vars.value.tempPipeInformationVar.valueAttr, getBalanceDataTypeVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_TAG_DATATYPEAttr.formatReceivedAttr, callContext).then(function (value) {
parseBalanceDateVar.value = value;
}).then(function () {
// SetPipeValue
// TempPipeInformation.Value = FormatDateTime
vars.value.tempPipeInformationVar.valueAttr = OS.BuiltinFunctions.formatDateTime(parseBalanceDateVar.value.dateTimeOutputOut, getBalanceDataTypeVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_TAG_DATATYPEAttr.formatAttr);
});
} else {
return OS.Flow.executeSequence(function () {
if((OS.BuiltinFunctions.toLower(getBalanceDataTypeVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_TAG_DATATYPEAttr.codeAttr) === "@datetime")) {
// Execute Action: ParseBalanceDateTime
return BALANCE_MBPController.default.parseBalanceDate$Action(vars.value.tempPipeInformationVar.valueAttr, getBalanceDataTypeVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_TAG_DATATYPEAttr.formatReceivedAttr, callContext).then(function (value) {
parseBalanceDateTimeVar.value = value;
}).then(function () {
// SetPipeValue
// TempPipeInformation.Value = FormatDateTime
vars.value.tempPipeInformationVar.valueAttr = OS.BuiltinFunctions.formatDateTime(parseBalanceDateTimeVar.value.dateTimeOutputOut, getBalanceDataTypeVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_TAG_DATATYPEAttr.formatAttr);
});
}

});
}

});
}).then(function () {
// TempPipeInformation.DataTypeID = GetBalanceDataType.List.Current.Local_BALANCE_TAG_DATATYPE.Id
vars.value.tempPipeInformationVar.dataTypeIDAttr = getBalanceDataTypeVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_TAG_DATATYPEAttr.idAttr;
});
}

}).then(function () {
getBalanceConfigInfoIndexMax--;
getBalanceConfigInfoIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getBalanceConfigInfoVar.value.listOut);
});
}).then(function () {
// Execute Action: CreatePipeInformation
return BALANCE_MBPModel.entities.Local_PIPE_INFORMATION.createOrUpdate(BALANCE_MBPModel.Local_PIPE_INFORMATIONRecord.fromStructure(vars.value.tempPipeInformationVar), callContext).then(function (value) {
createPipeInformationVar.value = value;
});
}).then(function () {
tempPipeListIndexMax--;
tempPipeListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(vars.value.tempPipeListVar);
});
});
}

});
}

});
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("BalanceCards.CreatePipeInformation", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.CreatePipeInformation$vars", [{
name: "InputText",
attrName: "inputTextInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BalanceLineID",
attrName: "balanceLineIDInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "BalanceConfigID",
attrName: "balanceConfigIDInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "TempPipeInformation",
attrName: "tempPipeInformationVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_PIPE_INFORMATIONRec();
},
complexType: BALANCE_MBPModel.Local_PIPE_INFORMATIONRec
}, {
name: "TempPipeList",
attrName: "tempPipeListVar",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new OS.DataTypes.TextList();
},
complexType: OS.DataTypes.TextList
}, {
name: "TempDataTypeCode",
attrName: "tempDataTypeCodeVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "StartCodeIndex",
attrName: "startCodeIndexVar",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "EndCodeIndex",
attrName: "endCodeIndexVar",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.CreatePipeInformation$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.createPipeInformation$Action = function (inputTextIn, balanceLineIDIn, balanceConfigIDIn) {
inputTextIn = (inputTextIn === undefined) ? "" : inputTextIn;
balanceLineIDIn = (balanceLineIDIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : balanceLineIDIn;
balanceConfigIDIn = (balanceConfigIDIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : balanceConfigIDIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createPipeInformation$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(inputTextIn, OS.Types.Text), balanceLineIDIn, balanceConfigIDIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$CreateWalletCardsProcess", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$ServerAction.CreateWalletCardsProcess_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createWalletCardsProcess$Action = function (refreshTokenIn, associationIdIn, msisdnIn, personNameIn, applicationIn, contactEmailIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.CreateWalletCardsProcess$vars"))());
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.msisdnInLocal = msisdnIn;
vars.value.personNameInLocal = personNameIn;
vars.value.applicationInLocal = applicationIn;
vars.value.contactEmailInLocal = contactEmailIn;
var createWalletCardsProcess_BPVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.CreateWalletCardsProcess$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CreateWalletCardsProcess_BP
return controller.createWalletCardsProcess_BP$ServerAction(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.msisdnInLocal, vars.value.associationIdInLocal, vars.value.personNameInLocal, vars.value.contactEmailInLocal, callContext).then(function (value) {
createWalletCardsProcess_BPVar.value = value;
}).then(function () {
// Success = CreateWalletCardsProcess_BP.Success
outVars.value.successOut = createWalletCardsProcess_BPVar.value.successOut;
// Message = CreateWalletCardsProcess_BP.Message
outVars.value.messageOut = createWalletCardsProcess_BPVar.value.messageOut;
// PaymentUrl = CreateWalletCardsProcess_BP.PaymentUrl
outVars.value.paymentUrlOut = createWalletCardsProcess_BPVar.value.paymentUrlOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.CreateWalletCardsProcess$vars", [{
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Msisdn",
attrName: "msisdnInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PersonName",
attrName: "personNameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ContactEmail",
attrName: "contactEmailInLocal",
mandatory: true,
dataType: OS.Types.Email,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.CreateWalletCardsProcess$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.createWalletCardsProcess$Action = function (refreshTokenIn, associationIdIn, msisdnIn, personNameIn, applicationIn, contactEmailIn) {
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
msisdnIn = (msisdnIn === undefined) ? "" : msisdnIn;
personNameIn = (personNameIn === undefined) ? "" : personNameIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
contactEmailIn = (contactEmailIn === undefined) ? "" : contactEmailIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createWalletCardsProcess$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(msisdnIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(personNameIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(contactEmailIn, OS.Types.Email)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
Message: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.messageOut, OS.Types.Text, true),
PaymentUrl: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.paymentUrlOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$CreateWalletCardsProcessV2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "CommonPlugin.model", "BuildInfoPlugin.controller", "BALANCE_MBP.controller$ServerAction.CreateWalletCardsProcess_BPV2", "CommonPlugin.model$ErrorRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$CommonPlugin", "BuildInfoPlugin.controller$GetBuildInfo", "BALANCE_MBP.referencesHealth$BuildInfoPlugin"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, CommonPluginModel, BuildInfoPluginController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createWalletCardsProcessV2$Action = function (refreshTokenIn, associationIdIn, msisdnIn, personNameIn, applicationIn, contactEmailIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.CreateWalletCardsProcessV2$vars"))());
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.msisdnInLocal = msisdnIn;
vars.value.personNameInLocal = personNameIn;
vars.value.applicationInLocal = applicationIn;
vars.value.contactEmailInLocal = contactEmailIn;
var createWalletCardsProcess_BPV2Var = new OS.DataTypes.VariableHolder();
var getBuildInfoVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.CreateWalletCardsProcessV2$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetBuildInfo
getBuildInfoVar.value = BuildInfoPluginController.default.getBuildInfo$Action(callContext);

// Execute Action: CreateWalletCardsProcess_BPV2
return controller.createWalletCardsProcess_BPV2$ServerAction(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.msisdnInLocal, vars.value.associationIdInLocal, vars.value.personNameInLocal, vars.value.contactEmailInLocal, getBuildInfoVar.value.buildOut, callContext).then(function (value) {
createWalletCardsProcess_BPV2Var.value = value;
}).then(function () {
// Success = CreateWalletCardsProcess_BPV2.Success
outVars.value.successOut = createWalletCardsProcess_BPV2Var.value.successOut;
// Message = CreateWalletCardsProcess_BPV2.Message
outVars.value.messageOut = createWalletCardsProcess_BPV2Var.value.messageOut;
// PaymentUrl = CreateWalletCardsProcess_BPV2.PaymentUrl
outVars.value.paymentUrlOut = createWalletCardsProcess_BPV2Var.value.paymentUrlOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.CreateWalletCardsProcessV2$vars", [{
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Msisdn",
attrName: "msisdnInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PersonName",
attrName: "personNameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ContactEmail",
attrName: "contactEmailInLocal",
mandatory: true,
dataType: OS.Types.Email,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.CreateWalletCardsProcessV2$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.createWalletCardsProcessV2$Action = function (refreshTokenIn, associationIdIn, msisdnIn, personNameIn, applicationIn, contactEmailIn) {
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
msisdnIn = (msisdnIn === undefined) ? "" : msisdnIn;
personNameIn = (personNameIn === undefined) ? "" : personNameIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
contactEmailIn = (contactEmailIn === undefined) ? "" : contactEmailIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.createWalletCardsProcessV2$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(msisdnIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(personNameIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(contactEmailIn, OS.Types.Email)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
Message: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.messageOut, OS.Types.Text, true),
PaymentUrl: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.paymentUrlOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$DeleteAll_BALANCENEXTCHARGEDETAIL_Logic", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_BALANCE_NEXT_CHARGE_DETAILRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.deleteAll_BALANCENEXTCHARGEDETAIL_Logic$Action = function (callContext) {
callContext = controller.callContext(callContext);
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.DeleteAll_BALANCENEXTCHARGEDETAIL_Logic$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteAllLocal_BALANCE_NEXT_CHARGE_DETAIL
return BALANCE_MBPModel.entities.Local_BALANCE_NEXT_CHARGE_DETAIL.deleteAll(callContext);
}).catch(function (ex) {
OS.Logger.trace("CRUD.DeleteAll_BALANCENEXTCHARGEDETAIL_Logic", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.DeleteAll_BALANCENEXTCHARGEDETAIL_Logic$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.deleteAll_BALANCENEXTCHARGEDETAIL_Logic$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.deleteAll_BALANCENEXTCHARGEDETAIL_Logic$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$DeleteAll_COMMDETAILS_FILTERS", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.deleteAll_COMMDETAILS_FILTERS$Action = function (callContext) {
callContext = controller.callContext(callContext);
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteAllLocal_COMMDETAILS_FILTERS
return BALANCE_MBPModel.entities.Local_COMMDETAILS_FILTERS.deleteAll(callContext);
}).then(function () {
return ;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.clientActionProxies.deleteAll_COMMDETAILS_FILTERS$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.deleteAll_COMMDETAILS_FILTERS$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("BALANCE_MBP.controller$DeleteAll_COMMDETAILS_FILTERS_Logic", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.deleteAll_COMMDETAILS_FILTERS_Logic$Action = function (callContext) {
callContext = controller.callContext(callContext);
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.DeleteAll_COMMDETAILS_FILTERS_Logic$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteAllLocal_COMMDETAILS_FILTERS
return BALANCE_MBPModel.entities.Local_COMMDETAILS_FILTERS.deleteAll(callContext);
}).catch(function (ex) {
OS.Logger.trace("CRUD.DeleteAll_COMMDETAILS_FILTERS_Logic", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.DeleteAll_COMMDETAILS_FILTERS_Logic$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.deleteAll_COMMDETAILS_FILTERS_Logic$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.deleteAll_COMMDETAILS_FILTERS_Logic$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$DeleteCard", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$ServerAction.DeleteCard"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.deleteCard$Action = function (refreshTokenIn, identifierIn, applicationIn, contract_DNIn, associationIdIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.WalletCards.DeleteCard$vars"))());
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.identifierInLocal = identifierIn;
vars.value.applicationInLocal = applicationIn;
vars.value.contract_DNInLocal = contract_DNIn;
vars.value.associationIdInLocal = associationIdIn;
var deleteCardVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.WalletCards.DeleteCard$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteCard
return controller.deleteCard$ServerAction(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.identifierInLocal, vars.value.contract_DNInLocal, vars.value.associationIdInLocal, callContext).then(function (value) {
deleteCardVar.value = value;
}).then(function () {
// Success = DeleteCard.Success
outVars.value.successOut = deleteCardVar.value.successOut;
// Message = DeleteCard.Message
outVars.value.messageOut = deleteCardVar.value.messageOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.WalletCards.DeleteCard$vars", [{
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Identifier",
attrName: "identifierInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Contract_DN",
attrName: "contract_DNInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.WalletCards.DeleteCard$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.deleteCard$Action = function (refreshTokenIn, identifierIn, applicationIn, contract_DNIn, associationIdIn) {
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
identifierIn = (identifierIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : identifierIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
contract_DNIn = (contract_DNIn === undefined) ? "" : contract_DNIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.deleteCard$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(identifierIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(contract_DNIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
Message: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.messageOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$FormatCurrency_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "Essentials_MOB.controller", "Essentials_MOB.controller$RoundAwayFromZero", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$Essentials_MOB"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, Essentials_MOBController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.formatCurrency_MBP$Action = function (valueIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Format.FormatCurrency_MBP$vars"))());
vars.value.valueInLocal = valueIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var roundAwayFromZeroVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Format.FormatCurrency_MBP$outVars"))());
try {// DecimalDigits = 2
vars.value.decimalDigitsVar = 2;
// Execute Action: RoundAwayFromZero
roundAwayFromZeroVar.value = Essentials_MOBController.default.roundAwayFromZero$Action(vars.value.valueInLocal, vars.value.decimalDigitsVar, callContext);

if((!(true))) {
// DecimalPart = DecimalToText
vars.value.decimalPartVar = OS.BuiltinFunctions.decimalToText(roundAwayFromZeroVar.value.resultOut.minus(OS.BuiltinFunctions.trunc(roundAwayFromZeroVar.value.resultOut)));
// DecimalSeparatorPos = Index
vars.value.decimalSeparatorPosVar = OS.BuiltinFunctions.index(vars.value.decimalPartVar, ".", 0, false, false);
// Decimal separator found?
if((((vars.value.decimalSeparatorPosVar) !== (-1)))) {
// DecimalPart = Substr
vars.value.decimalPartVar = OS.BuiltinFunctions.substr(vars.value.decimalPartVar, (vars.value.decimalSeparatorPosVar + 1), OS.BuiltinFunctions.length(vars.value.decimalPartVar));
}

// DecimalPart = FormatText
vars.value.decimalPartVar = OS.BuiltinFunctions.formatText(vars.value.decimalPartVar, vars.value.decimalDigitsVar, vars.value.decimalDigitsVar, false, "0");
// i = 0
vars.value.iVar = 0;
while (((vars.value.decimalDigitsVar > 0))) {
// i++
// i = i + 1
vars.value.iVar = (vars.value.iVar + 1);
// decimal part is zero?
if(((OS.BuiltinFunctions.substr(vars.value.decimalPartVar, (OS.BuiltinFunctions.length(vars.value.decimalPartVar) - vars.value.iVar), 1) === "0"))) {
// DecimalDigits--
// DecimalDigits = DecimalDigits - 1
vars.value.decimalDigitsVar = (vars.value.decimalDigitsVar - 1);
} else {
break;
}

}

}

// Result = "€" + FormatDecimal
outVars.value.resultOut = ("€" + OS.BuiltinFunctions.formatDecimal(roundAwayFromZeroVar.value.resultOut, vars.value.decimalDigitsVar, ",", "."));
} catch (ex) {
(function () {
OS.Logger.trace("Format.FormatCurrency_MBP", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return outVars.value;

}

throw ex;
})();
}

return outVars.value;
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Format.FormatCurrency_MBP$vars", [{
name: "Value",
attrName: "valueInLocal",
mandatory: true,
dataType: OS.Types.Decimal,
defaultValue: function () {
return OS.DataTypes.Decimal.defaultValue;
}
}, {
name: "DecimalDigits",
attrName: "decimalDigitsVar",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "i",
attrName: "iVar",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "DecimalPart",
attrName: "decimalPartVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "DecimalSeparatorPos",
attrName: "decimalSeparatorPosVar",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Format.FormatCurrency_MBP$outVars", [{
name: "Result",
attrName: "resultOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.formatCurrency_MBP$Action = function (valueIn) {
valueIn = (valueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : valueIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.formatCurrency_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(valueIn, OS.Types.Decimal)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Result: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.resultOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$FormatDecimal_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "Essentials_MOB.controller", "Essentials_MOB.controller$RoundAwayFromZero", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$Essentials_MOB"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, Essentials_MOBController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.formatDecimal_MBP$Action = function (valueIn, decimalDigitsIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Format.FormatDecimal_MBP$vars"))());
vars.value.valueInLocal = valueIn;
vars.value.decimalDigitsInLocal = decimalDigitsIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var roundAwayFromZeroVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Format.FormatDecimal_MBP$outVars"))());
try {// Execute Action: RoundAwayFromZero
roundAwayFromZeroVar.value = Essentials_MOBController.default.roundAwayFromZero$Action(vars.value.valueInLocal, vars.value.decimalDigitsInLocal, callContext);

// Result = FormatDecimal
outVars.value.resultOut = OS.BuiltinFunctions.formatDecimal(roundAwayFromZeroVar.value.resultOut, vars.value.decimalDigitsInLocal, ",", ".");
} catch (ex) {
(function () {
OS.Logger.trace("Format.FormatDecimal_MBP", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return outVars.value;

}

throw ex;
})();
}

return outVars.value;
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Format.FormatDecimal_MBP$vars", [{
name: "Value",
attrName: "valueInLocal",
mandatory: true,
dataType: OS.Types.Decimal,
defaultValue: function () {
return OS.DataTypes.Decimal.defaultValue;
}
}, {
name: "DecimalDigits",
attrName: "decimalDigitsInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Format.FormatDecimal_MBP$outVars", [{
name: "Result",
attrName: "resultOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.formatDecimal_MBP$Action = function (valueIn, decimalDigitsIn) {
valueIn = (valueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : valueIn;
decimalDigitsIn = (decimalDigitsIn === undefined) ? 0 : decimalDigitsIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.formatDecimal_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(valueIn, OS.Types.Decimal), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(decimalDigitsIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Result: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.resultOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$GetAllCards", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_WalletCardsList", "BALANCE_MBP.controller$ServerAction.GetAllCards"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getAllCards$Action = function (refreshTokenIn, applicationIn, phoneNumberIn, associationIDIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.WalletCards.GetAllCards$vars"))());
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.applicationInLocal = applicationIn;
vars.value.phoneNumberInLocal = phoneNumberIn;
vars.value.associationIDInLocal = associationIDIn;
var getAllCardsVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.WalletCards.GetAllCards$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetAllCards
return controller.getAllCards$ServerAction(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.phoneNumberInLocal, vars.value.associationIDInLocal, callContext).then(function (value) {
getAllCardsVar.value = value;
}).then(function () {
// Success = GetAllCards.Success
outVars.value.successOut = getAllCardsVar.value.successOut;
// Message = GetAllCards.Message
outVars.value.messageOut = getAllCardsVar.value.messageOut;
// WalletCards = GetAllCards.WalletCards
outVars.value.walletCardsOut = getAllCardsVar.value.walletCardsOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.WalletCards.GetAllCards$vars", [{
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PhoneNumber",
attrName: "phoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationID",
attrName: "associationIDInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.WalletCards.GetAllCards$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "WalletCards",
attrName: "walletCardsOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_WalletCardsList();
},
complexType: BALANCE_MBPModel.STR_WalletCardsList
}]);
BALANCE_MBPController.default.clientActionProxies.getAllCards$Action = function (refreshTokenIn, applicationIn, phoneNumberIn, associationIDIn) {
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
phoneNumberIn = (phoneNumberIn === undefined) ? "" : phoneNumberIn;
associationIDIn = (associationIDIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIDIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getAllCards$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(phoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIDIn, OS.Types.LongInteger)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
Message: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.messageOut, OS.Types.Text, true),
WalletCards: actionResults.walletCardsOut
};
});
};
});

define("BALANCE_MBP.controller$GetBalance_CheckCache", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$Cache_ValidationByService", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalance_CheckCache$Action = function (getOfferDetailIn, applicationIn, cacheValidationIntervalIn, refreshTokenIn, itemCacheExpirationDateIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Cache.GetBalance_CheckCache$vars"))());
vars.value.getOfferDetailInLocal = getOfferDetailIn;
vars.value.applicationInLocal = applicationIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.itemCacheExpirationDateInLocal = itemCacheExpirationDateIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var cache_ValidationByServiceVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Cache.GetBalance_CheckCache$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: Cache_ValidationByService
return BALANCE_MBPController.default.cache_ValidationByService$Action(((vars.value.getOfferDetailInLocal) ? (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr) : (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.homepageBalanceInfoAttr)), false, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, true, vars.value.itemCacheExpirationDateInLocal, callContext).then(function (value) {
cache_ValidationByServiceVar.value = value;
}).then(function () {
// useCache = Cache_ValidationByService.useCache
outVars.value.useCacheOut = cache_ValidationByServiceVar.value.useCacheOut;
// CacheExpirationDate = Cache_ValidationByService.CacheExpirationDate
outVars.value.cacheExpirationDateOut = cache_ValidationByServiceVar.value.cacheExpirationDateOut;
});
}).catch(function (ex) {
OS.Logger.trace("Cache.GetBalance_CheckCache", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Cache.GetBalance_CheckCache$vars", [{
name: "GetOfferDetail",
attrName: "getOfferDetailInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ItemCacheExpirationDate",
attrName: "itemCacheExpirationDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Cache.GetBalance_CheckCache$outVars", [{
name: "useCache",
attrName: "useCacheOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "CacheExpirationDate",
attrName: "cacheExpirationDateOut",
mandatory: false,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalance_CheckCache$Action = function (getOfferDetailIn, applicationIn, cacheValidationIntervalIn, refreshTokenIn, itemCacheExpirationDateIn) {
getOfferDetailIn = (getOfferDetailIn === undefined) ? false : getOfferDetailIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
itemCacheExpirationDateIn = (itemCacheExpirationDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : itemCacheExpirationDateIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalance_CheckCache$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(getOfferDetailIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(itemCacheExpirationDateIn, OS.Types.DateTime)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
useCache: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.useCacheOut, OS.Types.Boolean, true),
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
CacheExpirationDate: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.cacheExpirationDateOut, OS.Types.DateTime, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceConfigInfo", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_BALANCE_INFOList", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFOLocal_BALANCE_CONFIG_ATTRIBUTESLocal_BALANCE_CONFIG_INFO_GROUPRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFOLocal_BALANCE_CONFIG_ATTRIBUTESRecordList", "BALANCE_MBP.model$Local_BALANCE_UNITSRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_BALANCE_LINESRecordList", "BALANCE_MBP.model$Local_BALANCE_UNITSRec", "BALANCE_MBP.model$Local_BALANCE_CONFIG_ATTRIBUTESRec", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFORec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.model$Local_BALANCE_LINESRec", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFO_GROUPRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceConfigInfo$Action = function (balanceConfigIDIn, balanceLineIDIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigInfo$vars"))());
vars.value.balanceConfigIDInLocal = balanceConfigIDIn;
vars.value.balanceLineIDInLocal = balanceLineIDIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getBalanceUnitVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_UNITSRecordList))());
var getBalanceConfigInfoVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_CONFIG_INFOLocal_BALANCE_CONFIG_ATTRIBUTESRecordList))());
var getBalanceConfigByIDVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList))());
var getBalanceLineByIDVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_LINESRecordList))());
var getBalanceConfigInfoGroupVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_CONFIG_INFOLocal_BALANCE_CONFIG_ATTRIBUTESLocal_BALANCE_CONFIG_INFO_GROUPRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigInfo$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetBalanceLineByID
var getBalanceLineByIDAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_LINESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qploId = vars.value.balanceLineIDInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23";
} else {
selectSql += "\"ENLocal_BALANCE_LINES\".\"Id\" o0, \"ENLocal_BALANCE_LINES\".\"BalanceGroupDescription\" o1, \"ENLocal_BALANCE_LINES\".\"AvailableAmount\" o2, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnit\" o3, \"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" o4, \"ENLocal_BALANCE_LINES\".\"ConsumedAmount\" o5, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnit\" o6, \"ENLocal_BALANCE_LINES\".\"TotalAmount\" o7, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnit\" o8, \"ENLocal_BALANCE_LINES\".\"Order\" o9, \"ENLocal_BALANCE_LINES\".\"DateTime\" o10, \"ENLocal_BALANCE_LINES\".\"PackageNumber\" o11, \"ENLocal_BALANCE_LINES\".\"IsCredit\" o12, \"ENLocal_BALANCE_LINES\".\"CreditDescription\" o13, \"ENLocal_BALANCE_LINES\".\"TagCode\" o14, \"ENLocal_BALANCE_LINES\".\"PageCode\" o15, \"ENLocal_BALANCE_LINES\".\"AvailableAmountFmt\" o16, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnitFmt\" o17, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountFmt\" o18, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnitFmt\" o19, \"ENLocal_BALANCE_LINES\".\"TotalAmountFmt\" o20, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnitFmt\" o21, \"ENLocal_BALANCE_LINES\".\"CacheExpirationDate\" o22, \"ENLocal_BALANCE_LINES\".\"ExpiryDate\" o23";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_LINES\" \"ENLocal_BALANCE_LINES\"";
fromAndWhereSql += " WHERE ";
if (qploId != 0) {
fromAndWhereSql += "((\"ENLocal_BALANCE_LINES\".\"Id\" = :qploId) AND (\"ENLocal_BALANCE_LINES\".\"Id\" IS NOT NULL))";
argsList.add("qploId", /*LONGINTEGER*/ 4, qploId);
} else {
fromAndWhereSql += "(\"ENLocal_BALANCE_LINES\".\"Id\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_LINESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_LINESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceLineByIDVar.value;
});
};
return getBalanceLineByIDAggr().then(function () {
// BalanceLineEmpty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceLineByIDVar.value.listOut.isEmpty))) {
// Aggregate: GetBalanceConfigByID
var getBalanceConfigByIDAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qploId = vars.value.balanceConfigIDInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\"";
fromAndWhereSql += " WHERE ";
if (qploId != 0) {
fromAndWhereSql += "((\"ENLocal_BALANCE_CONFIG\".\"Id\" = :qploId) AND (\"ENLocal_BALANCE_CONFIG\".\"Id\" IS NOT NULL))";
argsList.add("qploId", /*LONGINTEGER*/ 4, qploId);
} else {
fromAndWhereSql += "(\"ENLocal_BALANCE_CONFIG\".\"Id\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigByIDVar.value;
});
};
return getBalanceConfigByIDAggr().then(function () {
// BalanceConfigEmpty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigByIDVar.value.listOut.isEmpty))) {
// BalanceUnit = GetBalanceLineByID.List.Current.Local_BALANCE_LINES.TotalAmountUnit
vars.value.balanceUnitVar = getBalanceLineByIDVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_LINESAttr.totalAmountUnitAttr;
// Aggregate: GetBalanceUnit
var getBalanceUnitAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_UNITSRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstUnit = vars.value.balanceUnitVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1";
} else {
selectSql += "\"ENLocal_BALANCE_UNITS\".\"Id\" o0, \"ENLocal_BALANCE_UNITS\".\"Unit\" o1";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_UNITS\" \"ENLocal_BALANCE_UNITS\"";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_UNITS\".\"Unit\" = :qpstUnit)";
argsList.add("qpstUnit", /*TEXT*/ 0, qpstUnit);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_UNITSRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_UNITSAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceUnitVar.value;
});
};
return getBalanceUnitAggr().then(function () {
// GetBalanceUnit.Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceUnitVar.value.listOut.isEmpty))) {
// LocalBalanceUnitID = GetBalanceUnit.List.Current.Local_BALANCE_UNITS.Id
vars.value.localBalanceUnitIDVar = getBalanceUnitVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_UNITSAttr.idAttr;
// Aggregate: GetBalanceConfigInfoGroup
var getBalanceConfigInfoGroupAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_CONFIG_INFOLocal_BALANCE_CONFIG_ATTRIBUTESLocal_BALANCE_CONFIG_INFO_GROUPRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID = vars.value.balanceConfigIDInLocal;
var qploLocal_BALANCE_CONFIG_INFO_GROUP_BalanceUnitID = vars.value.localBalanceUnitIDVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG_ATTR\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG_ATTR\".\"Code\" o1, \"ENLocal_BALANCE_CONFIG_ATTR\".\"Name\" o2, \"ENLocal_BALANCE_CONFIG_ATTR\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG_INFO\".\"Id\" o4, \"ENLocal_BALANCE_CONFIG_INFO\".\"Value\" o5, \"ENLocal_BALANCE_CONFIG_INFO\".\"DateTime\" o6, \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" o7, \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigAttributesID\" o8, \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigGroupID\" o9, \"ENLocal_BALANCE_CONFIG_INF1\".\"Id\" o10, \"ENLocal_BALANCE_CONFIG_INF1\".\"BalanceUnitID\" o11, \"ENLocal_BALANCE_CONFIG_INF1\".\"CardTypeID\" o12, \"ENLocal_BALANCE_CONFIG_INF1\".\"GraphTypeID\" o13";
}
fromAndWhereSql += " FROM ((\"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG_INFO\" \"ENLocal_BALANCE_CONFIG_INFO\" Inner JOIN \"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG_INFO_GROUP\" \"ENLocal_BALANCE_CONFIG_INF1\" ON (\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigGroupID\" = \"ENLocal_BALANCE_CONFIG_INF1\".\"Id\"))  Inner JOIN \"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG_ATTRIBUTES\" \"ENLocal_BALANCE_CONFIG_ATTR\" ON (\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigAttributesID\" = \"ENLocal_BALANCE_CONFIG_ATTR\".\"Id\")) ";
fromAndWhereSql += " WHERE ";
if (qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID != 0) {
fromAndWhereSql += "((\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" = :qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID) AND (\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" IS NOT NULL))";
argsList.add("qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID", /*LONGINTEGER*/ 4, qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID);
} else {
fromAndWhereSql += "(\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" IS NULL)";
}
fromAndWhereSql += " AND ";
if (qploLocal_BALANCE_CONFIG_INFO_GROUP_BalanceUnitID != 0) {
fromAndWhereSql += "((\"ENLocal_BALANCE_CONFIG_INF1\".\"BalanceUnitID\" = :qploLocal_BALANCE_CONFIG_INFO_GROUP_BalanceUnitID) AND (\"ENLocal_BALANCE_CONFIG_INF1\".\"BalanceUnitID\" IS NOT NULL))";
argsList.add("qploLocal_BALANCE_CONFIG_INFO_GROUP_BalanceUnitID", /*LONGINTEGER*/ 4, qploLocal_BALANCE_CONFIG_INFO_GROUP_BalanceUnitID);
} else {
fromAndWhereSql += "(\"ENLocal_BALANCE_CONFIG_INF1\".\"BalanceUnitID\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_CONFIG_INFOLocal_BALANCE_CONFIG_ATTRIBUTESLocal_BALANCE_CONFIG_INFO_GROUPRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIG_ATTRIBUTESAttr",
"local_BALANCE_CONFIG_INFOAttr",
"local_BALANCE_CONFIG_INFO_GROUPAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigInfoGroupVar.value;
});
};
return getBalanceConfigInfoGroupAggr().then(function () {
// GetBalanceConfigInfoGroup.Empty?
if((!(getBalanceConfigInfoGroupVar.value.listOut.isEmpty))) {
// SetOutput
// BalanceCardTypeID = GetBalanceConfigInfoGroup.List.Current.Local_BALANCE_CONFIG_INFO_GROUP.CardTypeID
outVars.value.balanceCardTypeIDOut = getBalanceConfigInfoGroupVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIG_INFO_GROUPAttr.cardTypeIDAttr;
// BalanceGraphTypeID = GetBalanceConfigInfoGroup.List.Current.Local_BALANCE_CONFIG_INFO_GROUP.GraphTypeID
outVars.value.balanceGraphTypeIDOut = getBalanceConfigInfoGroupVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIG_INFO_GROUPAttr.graphTypeIDAttr;
// Execute Action: ListAppendAll
OS.SystemActions.listAppendAll(outVars.value.balanceConfigListOut, OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigInfoGroupVar.value.listOut, new BALANCE_MBPModel.STR_BALANCE_INFOList(), function (source, target) {
target.attributeCodeAttr = source.local_BALANCE_CONFIG_ATTRIBUTESAttr.codeAttr;
target.valueAttr = source.local_BALANCE_CONFIG_INFOAttr.valueAttr;
return target;
}), callContext);
return OS.Flow.returnAsync(outVars.value);

}

});
}

});
}).then(function () {
// Aggregate: GetBalanceConfigInfo
var getBalanceConfigInfoAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_CONFIG_INFOLocal_BALANCE_CONFIG_ATTRIBUTESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID = vars.value.balanceConfigIDInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG_ATTR\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG_ATTR\".\"Code\" o1, \"ENLocal_BALANCE_CONFIG_ATTR\".\"Name\" o2, \"ENLocal_BALANCE_CONFIG_ATTR\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG_INFO\".\"Id\" o4, \"ENLocal_BALANCE_CONFIG_INFO\".\"Value\" o5, \"ENLocal_BALANCE_CONFIG_INFO\".\"DateTime\" o6, \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" o7, \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigAttributesID\" o8, \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigGroupID\" o9";
}
fromAndWhereSql += " FROM (\"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG_ATTRIBUTES\" \"ENLocal_BALANCE_CONFIG_ATTR\" Inner JOIN \"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG_INFO\" \"ENLocal_BALANCE_CONFIG_INFO\" ON (\"ENLocal_BALANCE_CONFIG_ATTR\".\"Id\" = \"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigAttributesID\")) ";
fromAndWhereSql += " WHERE ";
if (qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID != 0) {
fromAndWhereSql += "((\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" = :qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID) AND (\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" IS NOT NULL))";
argsList.add("qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID", /*LONGINTEGER*/ 4, qploLocal_BALANCE_CONFIG_INFO_BalanceConfigID);
} else {
fromAndWhereSql += "(\"ENLocal_BALANCE_CONFIG_INFO\".\"BalanceConfigID\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_CONFIG_INFOLocal_BALANCE_CONFIG_ATTRIBUTESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIG_ATTRIBUTESAttr",
"local_BALANCE_CONFIG_INFOAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigInfoVar.value;
});
};
return getBalanceConfigInfoAggr().then(function () {
// SetOutput
// BalanceCardTypeID = GetBalanceConfigByID.List.Current.Local_BALANCE_CONFIG.CardTypeID
outVars.value.balanceCardTypeIDOut = getBalanceConfigByIDVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIGAttr.cardTypeIDAttr;
// BalanceGraphTypeID = GetBalanceConfigByID.List.Current.Local_BALANCE_CONFIG.GraphTypeID
outVars.value.balanceGraphTypeIDOut = getBalanceConfigByIDVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIGAttr.graphTypeIDAttr;
// Execute Action: ListAppendAll2
OS.SystemActions.listAppendAll(outVars.value.balanceConfigListOut, OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigInfoVar.value.listOut, new BALANCE_MBPModel.STR_BALANCE_INFOList(), function (source, target) {
target.attributeCodeAttr = source.local_BALANCE_CONFIG_ATTRIBUTESAttr.codeAttr;
target.valueAttr = source.local_BALANCE_CONFIG_INFOAttr.valueAttr;
return target;
}), callContext);
});
});
}

});
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("BalanceCards.GetBalanceConfigInfo", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigInfo$vars", [{
name: "BalanceConfigID",
attrName: "balanceConfigIDInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "BalanceLineID",
attrName: "balanceLineIDInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "BalanceUnit",
attrName: "balanceUnitVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "LocalBalanceUnitID",
attrName: "localBalanceUnitIDVar",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigInfo$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "BalanceConfigList",
attrName: "balanceConfigListOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_INFOList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_INFOList
}, {
name: "BalanceCardTypeID",
attrName: "balanceCardTypeIDOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "BalanceGraphTypeID",
attrName: "balanceGraphTypeIDOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceConfigInfo$Action = function (balanceConfigIDIn, balanceLineIDIn) {
balanceConfigIDIn = (balanceConfigIDIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : balanceConfigIDIn;
balanceLineIDIn = (balanceLineIDIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : balanceLineIDIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceConfigInfo$Action.bind(controller, balanceConfigIDIn, balanceLineIDIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
BalanceConfigList: actionResults.balanceConfigListOut,
BalanceCardTypeID: actionResults.balanceCardTypeIDOut,
BalanceGraphTypeID: actionResults.balanceGraphTypeIDOut
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceConfigs", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFO_GROUPRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFORecordList", "BALANCE_MBP.model$Local_BALANCE_UNITSRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIG_ATTRIBUTESRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFO_GROUPList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFOList", "BALANCE_MBP.model$STR_BALANCE_UNITSList", "BALANCE_MBP.model$STR_BALANCE_ATTRIBUTESList", "BALANCE_MBP.model$STR_BALANCE_CONFIGList", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFO_GROUPRec", "BALANCE_MBP.model$Local_BALANCE_CONFIG_ATTRIBUTESRec", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFORec", "BALANCE_MBP.model$Local_BALANCE_UNITSRec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceConfigs$Action = function (balanceConfigsIn, balanceConfigInfosIn, balanceConfigInfoGroupsIn, balanceConfigAttributesIn, balanceUnitsIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs$vars"))());
vars.value.balanceConfigsInLocal = balanceConfigsIn.clone();
vars.value.balanceConfigInfosInLocal = balanceConfigInfosIn.clone();
vars.value.balanceConfigInfoGroupsInLocal = balanceConfigInfoGroupsIn.clone();
vars.value.balanceConfigAttributesInLocal = balanceConfigAttributesIn.clone();
vars.value.balanceUnitsInLocal = balanceUnitsIn.clone();
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteAllBalanceUnits
return BALANCE_MBPModel.entities.Local_BALANCE_UNITS.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceUnits
return BALANCE_MBPModel.entities.Local_BALANCE_UNITS.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceUnitsInLocal, new BALANCE_MBPModel.Local_BALANCE_UNITSRecordList(), function (source, target) {
target.local_BALANCE_UNITSAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_UNITSAttr.unitAttr = source.unitAttr;
return target;
}), callContext);
}).then(function () {
// Execute Action: DeleteAllBalanceAttributes
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_ATTRIBUTES.deleteAll(callContext);
}).then(function () {
// Execute Action: CreateAllBalanceAttributes
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_ATTRIBUTES.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceConfigAttributesInLocal, new BALANCE_MBPModel.Local_BALANCE_CONFIG_ATTRIBUTESRecordList(), function (source, target) {
target.local_BALANCE_CONFIG_ATTRIBUTESAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_CONFIG_ATTRIBUTESAttr.codeAttr = source.codeAttr;
target.local_BALANCE_CONFIG_ATTRIBUTESAttr.nameAttr = source.nameAttr;
target.local_BALANCE_CONFIG_ATTRIBUTESAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
}).then(function () {
// Execute Action: DeleteAllBalanceConfigs
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG.deleteAll(callContext);
}).then(function () {
// Execute Action: CreateAllBalanceConfigs
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceConfigsInLocal, new BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList(), function (source, target) {
target.local_BALANCE_CONFIGAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_CONFIGAttr.tagAttr = source.tagAttr;
target.local_BALANCE_CONFIGAttr.balanceNameAttr = source.balanceNameAttr;
target.local_BALANCE_CONFIGAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.local_BALANCE_CONFIGAttr.cardTypeIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.cardTypeIDAttr);
target.local_BALANCE_CONFIGAttr.graphTypeIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceGraphIDAttr);
target.local_BALANCE_CONFIGAttr.pageIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.pageIDAttr);
return target;
}), callContext);
}).then(function () {
// Execute Action: DeleteAllBalanceConfigInfoGroup
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_INFO_GROUP.deleteAll(callContext);
}).then(function () {
// Execute Action: CreateAllBalanceConfigInfoGroups
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_INFO_GROUP.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceConfigInfoGroupsInLocal, new BALANCE_MBPModel.Local_BALANCE_CONFIG_INFO_GROUPRecordList(), function (source, target) {
target.local_BALANCE_CONFIG_INFO_GROUPAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceConfigInfoGroupIDAttr);
target.local_BALANCE_CONFIG_INFO_GROUPAttr.balanceUnitIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceUnitIDAttr);
target.local_BALANCE_CONFIG_INFO_GROUPAttr.cardTypeIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceCardTypeIDAttr);
target.local_BALANCE_CONFIG_INFO_GROUPAttr.graphTypeIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceGraphTypeIDAttr);
return target;
}), callContext);
}).then(function () {
// Execute Action: DeleteAllBalanceConfigInfo
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_INFO.deleteAll(callContext);
}).then(function () {
// Execute Action: CreateAllBalanceConfigInfo
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_INFO.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceConfigInfosInLocal, new BALANCE_MBPModel.Local_BALANCE_CONFIG_INFORecordList(), function (source, target) {
target.local_BALANCE_CONFIG_INFOAttr.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.local_BALANCE_CONFIG_INFOAttr.valueAttr = source.valueAttr;
target.local_BALANCE_CONFIG_INFOAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.local_BALANCE_CONFIG_INFOAttr.balanceConfigIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceConfigIDAttr);
target.local_BALANCE_CONFIG_INFOAttr.balanceConfigAttributesIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.attributeIDAttr);
target.local_BALANCE_CONFIG_INFOAttr.balanceConfigGroupIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceConfigInfoGroupIDAttr);
return target;
}), callContext);
});
}).catch(function (ex) {
OS.Logger.trace("BalanceCards.GetBalanceConfigs", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs$vars", [{
name: "BalanceConfigs",
attrName: "balanceConfigsInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_CONFIGList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_CONFIGList
}, {
name: "BalanceConfigInfos",
attrName: "balanceConfigInfosInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_CONFIG_INFOList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_CONFIG_INFOList
}, {
name: "BalanceConfigInfoGroups",
attrName: "balanceConfigInfoGroupsInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_CONFIG_INFO_GROUPList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_CONFIG_INFO_GROUPList
}, {
name: "BalanceConfigAttributes",
attrName: "balanceConfigAttributesInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_ATTRIBUTESList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_ATTRIBUTESList
}, {
name: "BalanceUnits",
attrName: "balanceUnitsInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_UNITSList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_UNITSList
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceConfigs$Action = function (balanceConfigsIn, balanceConfigInfosIn, balanceConfigInfoGroupsIn, balanceConfigAttributesIn, balanceUnitsIn) {
balanceConfigsIn = (balanceConfigsIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_CONFIGList() : balanceConfigsIn;
balanceConfigInfosIn = (balanceConfigInfosIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_CONFIG_INFOList() : balanceConfigInfosIn;
balanceConfigInfoGroupsIn = (balanceConfigInfoGroupsIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_CONFIG_INFO_GROUPList() : balanceConfigInfoGroupsIn;
balanceConfigAttributesIn = (balanceConfigAttributesIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_ATTRIBUTESList() : balanceConfigAttributesIn;
balanceUnitsIn = (balanceUnitsIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_UNITSList() : balanceUnitsIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceConfigs$Action.bind(controller, balanceConfigsIn, balanceConfigInfosIn, balanceConfigInfoGroupsIn, balanceConfigAttributesIn, balanceUnitsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceConfigs_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.model$Local_BALANCE_CARD_TYPERecordList", "BALANCE_MBP.model$Local_BALANCE_GRAPH_TYPERecordList", "BALANCE_MBP.controller$Cache_ValidationByService", "BALANCE_MBP.model$Local_PAGERecordList", "BALANCE_MBP.model$STR_BALANCE_CONFIGList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFOList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFO_GROUPList", "BALANCE_MBP.model$STR_BALANCE_ATTRIBUTESList", "BALANCE_MBP.model$STR_BALANCE_UNITSList", "BALANCE_MBP.controller$GetBalanceConfigs", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_BP.model$STR_BALANCE_CONFIGSRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.controller$ServerAction.GetBalanceConfigs_BP", "BALANCE_MBP.model$Local_BALANCE_TAG_CODESRecordList", "BALANCE_MBP.model$Local_SYNC_BALANCE_CONFIGRecord", "BALANCE_MBP.model$Local_BALANCE_TAG_DATATYPERecordList", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$STR_BALANCE_CARD_TYPEList", "BALANCE_MBP.model$STR_BALANCE_GRAPH_TYPEList", "BALANCE_MBP.model$STR_PAGEList", "BALANCE_MBP.model$STR_BALANCE_TAG_CODESList", "BALANCE_MBP.model$STR_BALANCE_TAG_DATATYPEList", "BALANCE_MBP.model$Local_SYNC_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_BALANCE_CARD_TYPERec", "BALANCE_MBP.model$Local_BALANCE_GRAPH_TYPERec", "BALANCE_MBP.model$Local_BALANCE_TAG_DATATYPERec", "BALANCE_MBP.model$Local_BALANCE_TAG_CODESRec", "BALANCE_MBP.model$Local_PAGERec", "BALANCE_MBP.model$Local_SYNC_BALANCE_CONFIGRec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceConfigs_MBP$Action = function (applicationIn, cacheValidationIntervalIn, refreshTokenIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getBalanceConfigs_BPVar = new OS.DataTypes.VariableHolder();
var cache_ValidationByServiceVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigsVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateLocal_SYNC_BALANCE_CONFIGVar = new OS.DataTypes.VariableHolder();
var getLocalUSERPORTFOLIOSYNCSVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_SYNC_BALANCE_CONFIGRecordList))());
var getLocalBALANCECONFIGSVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: Cache_ValidationByService
return BALANCE_MBPController.default.cache_ValidationByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceConfigAttr, false, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, false, OS.DataTypes.DateTime.defaultValue, callContext).then(function (value) {
cache_ValidationByServiceVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((cache_ValidationByServiceVar.value.useCacheOut)) {
// Aggregate: GetLocalBALANCECONFIGS
var getLocalBALANCECONFIGSAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalBALANCECONFIGSVar.value;
});
};
return getLocalBALANCECONFIGSAggr().then(function () {
// Empty?
if((!(getLocalBALANCECONFIGSVar.value.listOut.isEmpty))) {
// Success = True
outVars.value.successOut = true;
return OS.Flow.returnAsync(outVars.value);

}

});
}

});
}).then(function () {
// Execute Action: GetBalanceConfigs_BP
return controller.getBalanceConfigs_BP$ServerAction(vars.value.applicationInLocal, callContext).then(function (value) {
getBalanceConfigs_BPVar.value = value;
});
}).then(function () {
// Success?
return OS.Flow.executeSequence(function () {
if((getBalanceConfigs_BPVar.value.successOut)) {
// BalanceTagDataType Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceTagDataTypesAttr.isEmpty))) {
// Execute Action: DeleteAllBalanceTagDataTypes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_DATATYPE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceTagDatatypes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_DATATYPE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceTagDataTypesAttr, new BALANCE_MBPModel.Local_BALANCE_TAG_DATATYPERecordList(), function (source, target) {
target.local_BALANCE_TAG_DATATYPEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_TAG_DATATYPEAttr.codeAttr = source.codeAttr;
target.local_BALANCE_TAG_DATATYPEAttr.formatAttr = source.formatAttr;
target.local_BALANCE_TAG_DATATYPEAttr.formatReceivedAttr = source.formatReceivedAttr;
target.local_BALANCE_TAG_DATATYPEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

}).then(function () {
// BalanceCardTypes Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceCardTypesAttr.isEmpty))) {
// Execute Action: DeleteAllBalanceCardType
return BALANCE_MBPModel.entities.Local_BALANCE_CARD_TYPE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceCardType
return BALANCE_MBPModel.entities.Local_BALANCE_CARD_TYPE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceCardTypesAttr, new BALANCE_MBPModel.Local_BALANCE_CARD_TYPERecordList(), function (source, target) {
target.local_BALANCE_CARD_TYPEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_CARD_TYPEAttr.labelAttr = source.labelAttr;
target.local_BALANCE_CARD_TYPEAttr.codeAttr = source.codeAttr;
target.local_BALANCE_CARD_TYPEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// BalanceTagCodes Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceTagCodesAttr.isEmpty))) {
// Execute Action: DeleteAllBalanceTagCodes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_CODES.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceTagCodes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_CODES.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceTagCodesAttr, new BALANCE_MBPModel.Local_BALANCE_TAG_CODESRecordList(), function (source, target) {
target.local_BALANCE_TAG_CODESAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_TAG_CODESAttr.codeAttr = source.codeAttr;
target.local_BALANCE_TAG_CODESAttr.isPositionConfigurationAttr = source.isPositionConfigurationAttr;
target.local_BALANCE_TAG_CODESAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// BalanceGraphTypes Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceGraphTypesAttr.isEmpty))) {
// Execute Action: DeleteAllGraphTypes
return BALANCE_MBPModel.entities.Local_BALANCE_GRAPH_TYPE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllGraphTypes
return BALANCE_MBPModel.entities.Local_BALANCE_GRAPH_TYPE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceGraphTypesAttr, new BALANCE_MBPModel.Local_BALANCE_GRAPH_TYPERecordList(), function (source, target) {
target.local_BALANCE_GRAPH_TYPEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_GRAPH_TYPEAttr.labelAttr = source.labelAttr;
target.local_BALANCE_GRAPH_TYPEAttr.isLimitedGraphAttr = source.isLimitedGraphAttr;
target.local_BALANCE_GRAPH_TYPEAttr.isUnlimitedGraphAttr = source.isUnlimitedGraphAttr;
target.local_BALANCE_GRAPH_TYPEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// Pages Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BPVar.value.balanceConfigsOut.pagesAttr.isEmpty))) {
// Execute Action: DeleteAllPages
return BALANCE_MBPModel.entities.Local_PAGE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllPages
return BALANCE_MBPModel.entities.Local_PAGE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BPVar.value.balanceConfigsOut.pagesAttr, new BALANCE_MBPModel.Local_PAGERecordList(), function (source, target) {
target.local_PAGEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_PAGEAttr.labelAttr = source.labelAttr;
target.local_PAGEAttr.codeAttr = source.codeAttr;
target.local_PAGEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// Configs Empty?
return OS.Flow.executeSequence(function () {
if((!(((getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceConfigsAttr.isEmpty || getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceConfigInfosAttr.isEmpty) || getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceConfigAttributesAttr.isEmpty)))) {
// Execute Action: GetBalanceConfigs
return BALANCE_MBPController.default.getBalanceConfigs$Action(getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceConfigsAttr, getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceConfigInfosAttr, getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceConfigInfosGroupAttr, getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceConfigAttributesAttr, getBalanceConfigs_BPVar.value.balanceConfigsOut.balanceUnitsAttr, callContext).then(function (value) {
getBalanceConfigsVar.value = value;
});
}

});
}).then(function () {
// Aggregate: GetLocalUSERPORTFOLIOSYNCS
var getLocalUSERPORTFOLIOSYNCSAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_SYNC_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2";
} else {
selectSql += "\"ENLocal_SYNC_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_SYNC_BALANCE_CONFIG\".\"UpdatedAt\" o1, \"ENLocal_SYNC_BALANCE_CONFIG\".\"BalanceConfigSuccessfullyUpd\" o2";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_SYNC_BALANCE_CONFIG\" \"ENLocal_SYNC_BALANCE_CONFIG\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_SYNC_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_SYNC_BALANCE_CONFIGAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalUSERPORTFOLIOSYNCSVar.value;
});
};
return getLocalUSERPORTFOLIOSYNCSAggr().then(function () {
// GetLocalUSERPORTFOLIOSYNCS.List.Current.Local_SYNC_BALANCE_CONFIG.BalanceConfigSuccessfullyUpd = True
getLocalUSERPORTFOLIOSYNCSVar.value.listOut.getCurrent(callContext.iterationContext).local_SYNC_BALANCE_CONFIGAttr.balanceConfigSuccessfullyUpdAttr = true;
// GetLocalUSERPORTFOLIOSYNCS.List.Current.Local_SYNC_BALANCE_CONFIG.UpdatedAt = CurrDateTime
getLocalUSERPORTFOLIOSYNCSVar.value.listOut.getCurrent(callContext.iterationContext).local_SYNC_BALANCE_CONFIGAttr.updatedAtAttr = OS.BuiltinFunctions.currDateTime();
// Execute Action: CreateOrUpdateLocal_SYNC_BALANCE_CONFIG
return BALANCE_MBPModel.entities.Local_SYNC_BALANCE_CONFIG.createOrUpdate(getLocalUSERPORTFOLIOSYNCSVar.value.listOut.getCurrent(callContext.iterationContext), callContext).then(function (value) {
createOrUpdateLocal_SYNC_BALANCE_CONFIGVar.value = value;
});
});
});
} else {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceConfigAttr, callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// Success = GetBalanceConfigs_BP.Success
outVars.value.successOut = getBalanceConfigs_BPVar.value.successOut;
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("BalanceCards.GetBalanceConfigs_MBP", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceConfigs_MBP$Action = function (applicationIn, cacheValidationIntervalIn, refreshTokenIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceConfigs_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceConfigs_MBP_BO", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.model$Local_BALANCE_CARD_TYPERecordList", "BALANCE_MBP.model$Local_BALANCE_TAG_DATATYPERecordList", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$Local_SYNC_BALANCE_CONFIGRecord", "BALANCE_MBP.model$Local_PAGERecordList", "BALANCE_MBP.model$Local_BALANCE_GRAPH_TYPERecordList", "BALANCE_MBP.model$Local_BALANCE_TAG_CODESRecordList", "BALANCE_MBP.model$STR_BALANCE_CONFIGList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFOList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFO_GROUPList", "BALANCE_MBP.model$STR_BALANCE_ATTRIBUTESList", "BALANCE_MBP.model$STR_BALANCE_UNITSList", "BALANCE_MBP.controller$GetBalanceConfigs", "BALANCE_BP.model$STR_BALANCE_CONFIGSRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.controller$ServerAction.GetBalanceConfigs_BP_BO", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$STR_BALANCE_CARD_TYPEList", "BALANCE_MBP.model$STR_BALANCE_TAG_DATATYPEList", "BALANCE_MBP.model$STR_PAGEList", "BALANCE_MBP.model$STR_BALANCE_GRAPH_TYPEList", "BALANCE_MBP.model$STR_BALANCE_TAG_CODESList", "BALANCE_MBP.model$Local_SYNC_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_BALANCE_CARD_TYPERec", "BALANCE_MBP.model$Local_PAGERec", "BALANCE_MBP.model$Local_BALANCE_TAG_DATATYPERec", "BALANCE_MBP.model$Local_BALANCE_TAG_CODESRec", "BALANCE_MBP.model$Local_SYNC_BALANCE_CONFIGRec", "BALANCE_MBP.model$Local_BALANCE_GRAPH_TYPERec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceConfigs_MBP_BO$Action = function (applicationIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP_BO$vars"))());
vars.value.applicationInLocal = applicationIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getBalanceConfigs_BP_BOVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateLocal_SYNC_BALANCE_CONFIGVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigsVar = new OS.DataTypes.VariableHolder();
var getLocalUSERPORTFOLIOSYNCSVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_SYNC_BALANCE_CONFIGRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP_BO$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetBalanceConfigs_BP_BO
return controller.getBalanceConfigs_BP_BO$ServerAction(vars.value.applicationInLocal, callContext).then(function (value) {
getBalanceConfigs_BP_BOVar.value = value;
}).then(function () {
// Success?
return OS.Flow.executeSequence(function () {
if((getBalanceConfigs_BP_BOVar.value.successOut)) {
// BalanceTagDataType Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceTagDataTypesAttr.isEmpty))) {
// Execute Action: DeleteAllBalanceTagDataTypes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_DATATYPE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceTagDatatypes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_DATATYPE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceTagDataTypesAttr, new BALANCE_MBPModel.Local_BALANCE_TAG_DATATYPERecordList(), function (source, target) {
target.local_BALANCE_TAG_DATATYPEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_TAG_DATATYPEAttr.codeAttr = source.codeAttr;
target.local_BALANCE_TAG_DATATYPEAttr.formatAttr = source.formatAttr;
target.local_BALANCE_TAG_DATATYPEAttr.formatReceivedAttr = source.formatReceivedAttr;
target.local_BALANCE_TAG_DATATYPEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

}).then(function () {
// BalanceCardTypes Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceCardTypesAttr.isEmpty))) {
// Execute Action: DeleteAllBalanceCardType
return BALANCE_MBPModel.entities.Local_BALANCE_CARD_TYPE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceCardType
return BALANCE_MBPModel.entities.Local_BALANCE_CARD_TYPE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceCardTypesAttr, new BALANCE_MBPModel.Local_BALANCE_CARD_TYPERecordList(), function (source, target) {
target.local_BALANCE_CARD_TYPEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_CARD_TYPEAttr.labelAttr = source.labelAttr;
target.local_BALANCE_CARD_TYPEAttr.codeAttr = source.codeAttr;
target.local_BALANCE_CARD_TYPEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// BalanceTagCodes Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceTagCodesAttr.isEmpty))) {
// Execute Action: DeleteAllBalanceTagCodes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_CODES.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceTagCodes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_CODES.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceTagCodesAttr, new BALANCE_MBPModel.Local_BALANCE_TAG_CODESRecordList(), function (source, target) {
target.local_BALANCE_TAG_CODESAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_TAG_CODESAttr.codeAttr = source.codeAttr;
target.local_BALANCE_TAG_CODESAttr.isPositionConfigurationAttr = source.isPositionConfigurationAttr;
target.local_BALANCE_TAG_CODESAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// BalanceGraphTypes Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceGraphTypesAttr.isEmpty))) {
// Execute Action: DeleteAllGraphTypes
return BALANCE_MBPModel.entities.Local_BALANCE_GRAPH_TYPE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllGraphTypes
return BALANCE_MBPModel.entities.Local_BALANCE_GRAPH_TYPE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceGraphTypesAttr, new BALANCE_MBPModel.Local_BALANCE_GRAPH_TYPERecordList(), function (source, target) {
target.local_BALANCE_GRAPH_TYPEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_GRAPH_TYPEAttr.labelAttr = source.labelAttr;
target.local_BALANCE_GRAPH_TYPEAttr.isLimitedGraphAttr = source.isLimitedGraphAttr;
target.local_BALANCE_GRAPH_TYPEAttr.isUnlimitedGraphAttr = source.isUnlimitedGraphAttr;
target.local_BALANCE_GRAPH_TYPEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// Pages Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.pagesAttr.isEmpty))) {
// Execute Action: DeleteAllPages
return BALANCE_MBPModel.entities.Local_PAGE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllPages
return BALANCE_MBPModel.entities.Local_PAGE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.pagesAttr, new BALANCE_MBPModel.Local_PAGERecordList(), function (source, target) {
target.local_PAGEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_PAGEAttr.labelAttr = source.labelAttr;
target.local_PAGEAttr.codeAttr = source.codeAttr;
target.local_PAGEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// Configs Empty?
return OS.Flow.executeSequence(function () {
if((!(((getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceConfigsAttr.isEmpty || getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceConfigInfosAttr.isEmpty) || getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceConfigAttributesAttr.isEmpty)))) {
// Execute Action: GetBalanceConfigs
return BALANCE_MBPController.default.getBalanceConfigs$Action(getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceConfigsAttr, getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceConfigInfosAttr, getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceConfigInfosGroupAttr, getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceConfigAttributesAttr, getBalanceConfigs_BP_BOVar.value.balanceConfigsOut.balanceUnitsAttr, callContext).then(function (value) {
getBalanceConfigsVar.value = value;
});
}

});
}).then(function () {
// Aggregate: GetLocalUSERPORTFOLIOSYNCS
var getLocalUSERPORTFOLIOSYNCSAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_SYNC_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2";
} else {
selectSql += "\"ENLocal_SYNC_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_SYNC_BALANCE_CONFIG\".\"UpdatedAt\" o1, \"ENLocal_SYNC_BALANCE_CONFIG\".\"BalanceConfigSuccessfullyUpd\" o2";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_SYNC_BALANCE_CONFIG\" \"ENLocal_SYNC_BALANCE_CONFIG\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_SYNC_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_SYNC_BALANCE_CONFIGAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalUSERPORTFOLIOSYNCSVar.value;
});
};
return getLocalUSERPORTFOLIOSYNCSAggr().then(function () {
// GetLocalUSERPORTFOLIOSYNCS.List.Current.Local_SYNC_BALANCE_CONFIG.BalanceConfigSuccessfullyUpd = True
getLocalUSERPORTFOLIOSYNCSVar.value.listOut.getCurrent(callContext.iterationContext).local_SYNC_BALANCE_CONFIGAttr.balanceConfigSuccessfullyUpdAttr = true;
// GetLocalUSERPORTFOLIOSYNCS.List.Current.Local_SYNC_BALANCE_CONFIG.UpdatedAt = CurrDateTime
getLocalUSERPORTFOLIOSYNCSVar.value.listOut.getCurrent(callContext.iterationContext).local_SYNC_BALANCE_CONFIGAttr.updatedAtAttr = OS.BuiltinFunctions.currDateTime();
// Execute Action: CreateOrUpdateLocal_SYNC_BALANCE_CONFIG
return BALANCE_MBPModel.entities.Local_SYNC_BALANCE_CONFIG.createOrUpdate(getLocalUSERPORTFOLIOSYNCSVar.value.listOut.getCurrent(callContext.iterationContext), callContext).then(function (value) {
createOrUpdateLocal_SYNC_BALANCE_CONFIGVar.value = value;
});
});
});
} else {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceConfigAttr, callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// Success = GetBalanceConfigs_BP_BO.Success
outVars.value.successOut = getBalanceConfigs_BP_BOVar.value.successOut;
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("BalanceCards.GetBalanceConfigs_MBP_BO", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP_BO$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP_BO$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceConfigs_MBP_BO$Action = function (applicationIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceConfigs_MBP_BO$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceConfigs_MBP_v2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.model$Local_BALANCE_CARD_TYPERecordList", "BALANCE_MBP.controller$Cache_ValidationByService", "BALANCE_MBP.model$Local_BALANCE_TAG_CODESRecordList", "BALANCE_MBP.model$Local_PAGERecordList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_v2List", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFOList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFO_GROUPList", "BALANCE_MBP.model$STR_BALANCE_ATTRIBUTESList", "BALANCE_MBP.model$STR_BALANCE_UNITSList", "BALANCE_MBP.controller$GetBalanceConfigs_v2", "BALANCE_MBP.model$Local_BALANCE_GRAPH_TYPERecordList", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$Local_BALANCE_TAG_DATATYPERecordList", "BALANCE_BP.model$STR_BALANCE_CONFIGS_v2Rec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.controller$ServerAction.GetBalanceConfigs_BP_v2", "BALANCE_MBP.model$Local_SYNC_BALANCE_CONFIGRecord", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$STR_BALANCE_CARD_TYPEList", "BALANCE_MBP.model$STR_BALANCE_TAG_CODESList", "BALANCE_MBP.model$STR_PAGEList", "BALANCE_MBP.model$STR_BALANCE_GRAPH_TYPEList", "BALANCE_MBP.model$STR_BALANCE_TAG_DATATYPEList", "BALANCE_MBP.model$Local_SYNC_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_BALANCE_CARD_TYPERec", "BALANCE_MBP.model$Local_PAGERec", "BALANCE_MBP.model$Local_BALANCE_TAG_CODESRec", "BALANCE_MBP.model$Local_BALANCE_TAG_DATATYPERec", "BALANCE_MBP.model$Local_BALANCE_GRAPH_TYPERec", "BALANCE_MBP.model$Local_SYNC_BALANCE_CONFIGRec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceConfigs_MBP_v2$Action = function (applicationIn, cacheValidationIntervalIn, refreshTokenIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP_v2$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getBalanceConfigs_BP_v2Var = new OS.DataTypes.VariableHolder();
var cache_ValidationByServiceVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigs_v2Var = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateLocal_SYNC_BALANCE_CONFIGVar = new OS.DataTypes.VariableHolder();
var getLocalUSERPORTFOLIOSYNCSVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_SYNC_BALANCE_CONFIGRecordList))());
var getLocalBALANCECONFIGSVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP_v2$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: Cache_ValidationByService
return BALANCE_MBPController.default.cache_ValidationByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceConfigAttr, false, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, false, OS.DataTypes.DateTime.defaultValue, callContext).then(function (value) {
cache_ValidationByServiceVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((cache_ValidationByServiceVar.value.useCacheOut)) {
// Aggregate: GetLocalBALANCECONFIGS
var getLocalBALANCECONFIGSAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalBALANCECONFIGSVar.value;
});
};
return getLocalBALANCECONFIGSAggr().then(function () {
// Empty?
if((!(getLocalBALANCECONFIGSVar.value.listOut.isEmpty))) {
// Success = True
outVars.value.successOut = true;
return OS.Flow.returnAsync(outVars.value);

}

});
}

});
}).then(function () {
// Execute Action: GetBalanceConfigs_BP_v2
return controller.getBalanceConfigs_BP_v2$ServerAction(vars.value.applicationInLocal, callContext).then(function (value) {
getBalanceConfigs_BP_v2Var.value = value;
});
}).then(function () {
// Success?
return OS.Flow.executeSequence(function () {
if((getBalanceConfigs_BP_v2Var.value.successOut)) {
// BalanceTagDataType Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceTagDataTypesAttr.isEmpty))) {
// Execute Action: DeleteAllBalanceTagDataTypes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_DATATYPE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceTagDatatypes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_DATATYPE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceTagDataTypesAttr, new BALANCE_MBPModel.Local_BALANCE_TAG_DATATYPERecordList(), function (source, target) {
target.local_BALANCE_TAG_DATATYPEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_TAG_DATATYPEAttr.codeAttr = source.codeAttr;
target.local_BALANCE_TAG_DATATYPEAttr.formatAttr = source.formatAttr;
target.local_BALANCE_TAG_DATATYPEAttr.formatReceivedAttr = source.formatReceivedAttr;
target.local_BALANCE_TAG_DATATYPEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

}).then(function () {
// BalanceCardTypes Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceCardTypesAttr.isEmpty))) {
// Execute Action: DeleteAllBalanceCardType
return BALANCE_MBPModel.entities.Local_BALANCE_CARD_TYPE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceCardType
return BALANCE_MBPModel.entities.Local_BALANCE_CARD_TYPE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceCardTypesAttr, new BALANCE_MBPModel.Local_BALANCE_CARD_TYPERecordList(), function (source, target) {
target.local_BALANCE_CARD_TYPEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_CARD_TYPEAttr.labelAttr = source.labelAttr;
target.local_BALANCE_CARD_TYPEAttr.codeAttr = source.codeAttr;
target.local_BALANCE_CARD_TYPEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// BalanceTagCodes Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceTagCodesAttr.isEmpty))) {
// Execute Action: DeleteAllBalanceTagCodes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_CODES.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceTagCodes
return BALANCE_MBPModel.entities.Local_BALANCE_TAG_CODES.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceTagCodesAttr, new BALANCE_MBPModel.Local_BALANCE_TAG_CODESRecordList(), function (source, target) {
target.local_BALANCE_TAG_CODESAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_TAG_CODESAttr.codeAttr = source.codeAttr;
target.local_BALANCE_TAG_CODESAttr.isPositionConfigurationAttr = source.isPositionConfigurationAttr;
target.local_BALANCE_TAG_CODESAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// BalanceGraphTypes Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceGraphTypesAttr.isEmpty))) {
// Execute Action: DeleteAllGraphTypes
return BALANCE_MBPModel.entities.Local_BALANCE_GRAPH_TYPE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllGraphTypes
return BALANCE_MBPModel.entities.Local_BALANCE_GRAPH_TYPE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceGraphTypesAttr, new BALANCE_MBPModel.Local_BALANCE_GRAPH_TYPERecordList(), function (source, target) {
target.local_BALANCE_GRAPH_TYPEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_GRAPH_TYPEAttr.labelAttr = source.labelAttr;
target.local_BALANCE_GRAPH_TYPEAttr.isLimitedGraphAttr = source.isLimitedGraphAttr;
target.local_BALANCE_GRAPH_TYPEAttr.isUnlimitedGraphAttr = source.isUnlimitedGraphAttr;
target.local_BALANCE_GRAPH_TYPEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// Pages Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.pagesAttr.isEmpty))) {
// Execute Action: DeleteAllPages
return BALANCE_MBPModel.entities.Local_PAGE.deleteAll(callContext).then(function () {
// Execute Action: CreateAllPages
return BALANCE_MBPModel.entities.Local_PAGE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.pagesAttr, new BALANCE_MBPModel.Local_PAGERecordList(), function (source, target) {
target.local_PAGEAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_PAGEAttr.labelAttr = source.labelAttr;
target.local_PAGEAttr.codeAttr = source.codeAttr;
target.local_PAGEAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
});
}

});
}).then(function () {
// Configs Empty?
return OS.Flow.executeSequence(function () {
if((!(((getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceConfigsAttr.isEmpty || getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceConfigInfosAttr.isEmpty) || getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceConfigAttributesAttr.isEmpty)))) {
// Execute Action: GetBalanceConfigs_v2
return BALANCE_MBPController.default.getBalanceConfigs_v2$Action(getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceConfigsAttr, getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceConfigInfosAttr, getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceConfigInfosGroupAttr, getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceConfigAttributesAttr, getBalanceConfigs_BP_v2Var.value.balanceConfigsOut.balanceUnitsAttr, callContext).then(function (value) {
getBalanceConfigs_v2Var.value = value;
});
}

});
}).then(function () {
// Aggregate: GetLocalUSERPORTFOLIOSYNCS
var getLocalUSERPORTFOLIOSYNCSAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_SYNC_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2";
} else {
selectSql += "\"ENLocal_SYNC_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_SYNC_BALANCE_CONFIG\".\"UpdatedAt\" o1, \"ENLocal_SYNC_BALANCE_CONFIG\".\"BalanceConfigSuccessfullyUpd\" o2";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_SYNC_BALANCE_CONFIG\" \"ENLocal_SYNC_BALANCE_CONFIG\"";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_SYNC_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_SYNC_BALANCE_CONFIGAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalUSERPORTFOLIOSYNCSVar.value;
});
};
return getLocalUSERPORTFOLIOSYNCSAggr().then(function () {
// GetLocalUSERPORTFOLIOSYNCS.List.Current.Local_SYNC_BALANCE_CONFIG.BalanceConfigSuccessfullyUpd = True
getLocalUSERPORTFOLIOSYNCSVar.value.listOut.getCurrent(callContext.iterationContext).local_SYNC_BALANCE_CONFIGAttr.balanceConfigSuccessfullyUpdAttr = true;
// GetLocalUSERPORTFOLIOSYNCS.List.Current.Local_SYNC_BALANCE_CONFIG.UpdatedAt = CurrDateTime
getLocalUSERPORTFOLIOSYNCSVar.value.listOut.getCurrent(callContext.iterationContext).local_SYNC_BALANCE_CONFIGAttr.updatedAtAttr = OS.BuiltinFunctions.currDateTime();
// Execute Action: CreateOrUpdateLocal_SYNC_BALANCE_CONFIG
return BALANCE_MBPModel.entities.Local_SYNC_BALANCE_CONFIG.createOrUpdate(getLocalUSERPORTFOLIOSYNCSVar.value.listOut.getCurrent(callContext.iterationContext), callContext).then(function (value) {
createOrUpdateLocal_SYNC_BALANCE_CONFIGVar.value = value;
});
});
});
} else {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceConfigAttr, callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// Success = GetBalanceConfigs_BP_v2.Success
outVars.value.successOut = getBalanceConfigs_BP_v2Var.value.successOut;
});
}

});
});
}).catch(function (ex) {
OS.Logger.trace("BalanceCards.GetBalanceConfigs_MBP_v2", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP_v2$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_MBP_v2$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceConfigs_MBP_v2$Action = function (applicationIn, cacheValidationIntervalIn, refreshTokenIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceConfigs_MBP_v2$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceConfigs_v2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_BALANCE_CONFIG_ATTRIBUTESRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFORecordList", "BALANCE_MBP.model$Local_BALANCE_UNITSRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFO_GROUPRecordList", "BALANCE_MBP.model$STR_BALANCE_ATTRIBUTESList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFOList", "BALANCE_MBP.model$STR_BALANCE_UNITSList", "BALANCE_MBP.model$STR_BALANCE_CONFIG_v2List", "BALANCE_MBP.model$STR_BALANCE_CONFIG_INFO_GROUPList", "BALANCE_MBP.model$Local_BALANCE_CONFIG_ATTRIBUTESRec", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFORec", "BALANCE_MBP.model$Local_BALANCE_CONFIG_INFO_GROUPRec", "BALANCE_MBP.model$Local_BALANCE_UNITSRec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceConfigs_v2$Action = function (balanceConfigsIn, balanceConfigInfosIn, balanceConfigInfoGroupsIn, balanceConfigAttributesIn, balanceUnitsIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_v2$vars"))());
vars.value.balanceConfigsInLocal = balanceConfigsIn.clone();
vars.value.balanceConfigInfosInLocal = balanceConfigInfosIn.clone();
vars.value.balanceConfigInfoGroupsInLocal = balanceConfigInfoGroupsIn.clone();
vars.value.balanceConfigAttributesInLocal = balanceConfigAttributesIn.clone();
vars.value.balanceUnitsInLocal = balanceUnitsIn.clone();
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_v2$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteAllBalanceUnits
return BALANCE_MBPModel.entities.Local_BALANCE_UNITS.deleteAll(callContext).then(function () {
// Execute Action: CreateAllBalanceUnits
return BALANCE_MBPModel.entities.Local_BALANCE_UNITS.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceUnitsInLocal, new BALANCE_MBPModel.Local_BALANCE_UNITSRecordList(), function (source, target) {
target.local_BALANCE_UNITSAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_UNITSAttr.unitAttr = source.unitAttr;
return target;
}), callContext);
}).then(function () {
// Execute Action: DeleteAllBalanceAttributes
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_ATTRIBUTES.deleteAll(callContext);
}).then(function () {
// Execute Action: CreateAllBalanceAttributes
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_ATTRIBUTES.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceConfigAttributesInLocal, new BALANCE_MBPModel.Local_BALANCE_CONFIG_ATTRIBUTESRecordList(), function (source, target) {
target.local_BALANCE_CONFIG_ATTRIBUTESAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_CONFIG_ATTRIBUTESAttr.codeAttr = source.codeAttr;
target.local_BALANCE_CONFIG_ATTRIBUTESAttr.nameAttr = source.nameAttr;
target.local_BALANCE_CONFIG_ATTRIBUTESAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
return target;
}), callContext);
}).then(function () {
// Execute Action: DeleteAllBalanceConfigs
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG.deleteAll(callContext);
}).then(function () {
// Execute Action: CreateAllBalanceConfigs
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceConfigsInLocal, new BALANCE_MBPModel.Local_BALANCE_CONFIGRecordList(), function (source, target) {
target.local_BALANCE_CONFIGAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.iDAttr);
target.local_BALANCE_CONFIGAttr.tagAttr = source.tagAttr;
target.local_BALANCE_CONFIGAttr.balanceNameAttr = source.balanceNameAttr;
target.local_BALANCE_CONFIGAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.local_BALANCE_CONFIGAttr.hideWhenBalanceIsZeroAttr = source.hideWhenBalanceIsZeroAttr;
target.local_BALANCE_CONFIGAttr.cardTypeIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.cardTypeIDAttr);
target.local_BALANCE_CONFIGAttr.graphTypeIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceGraphIDAttr);
target.local_BALANCE_CONFIGAttr.pageIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.pageIDAttr);
return target;
}), callContext);
}).then(function () {
// Execute Action: DeleteAllBalanceConfigInfoGroup
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_INFO_GROUP.deleteAll(callContext);
}).then(function () {
// Execute Action: CreateAllBalanceConfigInfoGroups
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_INFO_GROUP.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceConfigInfoGroupsInLocal, new BALANCE_MBPModel.Local_BALANCE_CONFIG_INFO_GROUPRecordList(), function (source, target) {
target.local_BALANCE_CONFIG_INFO_GROUPAttr.idAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceConfigInfoGroupIDAttr);
target.local_BALANCE_CONFIG_INFO_GROUPAttr.balanceUnitIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceUnitIDAttr);
target.local_BALANCE_CONFIG_INFO_GROUPAttr.cardTypeIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceCardTypeIDAttr);
target.local_BALANCE_CONFIG_INFO_GROUPAttr.graphTypeIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceGraphTypeIDAttr);
return target;
}), callContext);
}).then(function () {
// Execute Action: DeleteAllBalanceConfigInfo
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_INFO.deleteAll(callContext);
}).then(function () {
// Execute Action: CreateAllBalanceConfigInfo
return BALANCE_MBPModel.entities.Local_BALANCE_CONFIG_INFO.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.balanceConfigInfosInLocal, new BALANCE_MBPModel.Local_BALANCE_CONFIG_INFORecordList(), function (source, target) {
target.local_BALANCE_CONFIG_INFOAttr.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.local_BALANCE_CONFIG_INFOAttr.valueAttr = source.valueAttr;
target.local_BALANCE_CONFIG_INFOAttr.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.local_BALANCE_CONFIG_INFOAttr.balanceConfigIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceConfigIDAttr);
target.local_BALANCE_CONFIG_INFOAttr.balanceConfigAttributesIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.attributeIDAttr);
target.local_BALANCE_CONFIG_INFOAttr.balanceConfigGroupIDAttr = OS.BuiltinFunctions.longIntegerToIdentifier(source.balanceConfigInfoGroupIDAttr);
return target;
}), callContext);
});
}).catch(function (ex) {
OS.Logger.trace("BalanceCards.GetBalanceConfigs_v2", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_v2$vars", [{
name: "BalanceConfigs",
attrName: "balanceConfigsInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_CONFIG_v2List();
},
complexType: BALANCE_MBPModel.STR_BALANCE_CONFIG_v2List
}, {
name: "BalanceConfigInfos",
attrName: "balanceConfigInfosInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_CONFIG_INFOList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_CONFIG_INFOList
}, {
name: "BalanceConfigInfoGroups",
attrName: "balanceConfigInfoGroupsInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_CONFIG_INFO_GROUPList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_CONFIG_INFO_GROUPList
}, {
name: "BalanceConfigAttributes",
attrName: "balanceConfigAttributesInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_ATTRIBUTESList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_ATTRIBUTESList
}, {
name: "BalanceUnits",
attrName: "balanceUnitsInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_UNITSList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_UNITSList
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBalanceConfigs_v2$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceConfigs_v2$Action = function (balanceConfigsIn, balanceConfigInfosIn, balanceConfigInfoGroupsIn, balanceConfigAttributesIn, balanceUnitsIn) {
balanceConfigsIn = (balanceConfigsIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_CONFIG_v2List() : balanceConfigsIn;
balanceConfigInfosIn = (balanceConfigInfosIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_CONFIG_INFOList() : balanceConfigInfosIn;
balanceConfigInfoGroupsIn = (balanceConfigInfoGroupsIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_CONFIG_INFO_GROUPList() : balanceConfigInfoGroupsIn;
balanceConfigAttributesIn = (balanceConfigAttributesIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_ATTRIBUTESList() : balanceConfigAttributesIn;
balanceUnitsIn = (balanceUnitsIn === undefined) ? new BALANCE_MBPModel.STR_BALANCE_UNITSList() : balanceUnitsIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceConfigs_v2$Action.bind(controller, balanceConfigsIn, balanceConfigInfosIn, balanceConfigInfoGroupsIn, balanceConfigAttributesIn, balanceUnitsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceLines", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.model$STR_PHBALANCEList", "BALANCE_MBP.controller$ServerAction.GetPHBalance_BP_BO", "BALANCE_MBP.controller$CreatePipeInformation", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$Local_BALANCE_LINESRecord", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRecordList", "BALANCE_MBP.model$Local_BALANCE_LINESRecordList", "BALANCE_BP.model$STR_PHBALANCERec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.model$Local_BALANCE_LINESRec", "BALANCE_BP.model$STR_BALANCE_NOT_FOUNDRec", "BALANCE_MBP.model$STR_BALANCE_NOT_FOUNDList", "BALANCE_MBP.model$Local_PAGERecordList", "BALANCE_MBP.model$Local_PAGELocal_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRec", "BALANCE_MBP.model$Local_PAGERec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceLines$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, applicationIn, correlationIdIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines$vars"))());
vars.value.phoneNumberInLocal = phoneNumberIn;
vars.value.processInLocal = processIn;
vars.value.offerDetailInLocal = offerDetailIn;
vars.value.pageCodeInLocal = pageCodeIn;
vars.value.applicationInLocal = applicationIn;
vars.value.correlationIdInLocal = correlationIdIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getPHBalance_BP_BOVar = new OS.DataTypes.VariableHolder();
var listFilterBalanceVar = new OS.DataTypes.VariableHolder();
var createPipeInformationVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateBalanceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateCreditBalanceVar = new OS.DataTypes.VariableHolder();
var listFilterIsCreditVar = new OS.DataTypes.VariableHolder();
var getPageByCodeVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getPipeInformationVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList))());
var getBalanceLinesVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_LINESRecordList))());
var getBalanceConfigVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage2
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Entering the action..."), "SELFCARE_MBP", callContext);
// EmptyPhoneNumber?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.phoneNumberInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
// Execute Action: LogMessage5
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After phonenumber validation..."), "SELFCARE_MBP", callContext);
// PageCodeEmpty?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.pageCodeInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
// Aggregate: GetPageByCode
var getPageByCodeAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCodeVar.value;
});
};
return getPageByCodeAggr().then(function () {
// Execute Action: LogMessage6
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Pagecode validation..."), "SELFCARE_MBP", callContext);
// Aggregate: GetBalanceLines
var getBalanceLinesAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_LINESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstPageCode = vars.value.pageCodeInLocal;
var qpstCellPhoneNumber = vars.value.phoneNumberInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23";
} else {
selectSql += "\"ENLocal_BALANCE_LINES\".\"Id\" o0, \"ENLocal_BALANCE_LINES\".\"BalanceGroupDescription\" o1, \"ENLocal_BALANCE_LINES\".\"AvailableAmount\" o2, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnit\" o3, \"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" o4, \"ENLocal_BALANCE_LINES\".\"ConsumedAmount\" o5, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnit\" o6, \"ENLocal_BALANCE_LINES\".\"TotalAmount\" o7, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnit\" o8, \"ENLocal_BALANCE_LINES\".\"Order\" o9, \"ENLocal_BALANCE_LINES\".\"DateTime\" o10, \"ENLocal_BALANCE_LINES\".\"PackageNumber\" o11, \"ENLocal_BALANCE_LINES\".\"IsCredit\" o12, \"ENLocal_BALANCE_LINES\".\"CreditDescription\" o13, \"ENLocal_BALANCE_LINES\".\"TagCode\" o14, \"ENLocal_BALANCE_LINES\".\"PageCode\" o15, \"ENLocal_BALANCE_LINES\".\"AvailableAmountFmt\" o16, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnitFmt\" o17, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountFmt\" o18, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnitFmt\" o19, \"ENLocal_BALANCE_LINES\".\"TotalAmountFmt\" o20, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnitFmt\" o21, \"ENLocal_BALANCE_LINES\".\"CacheExpirationDate\" o22, \"ENLocal_BALANCE_LINES\".\"ExpiryDate\" o23";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_LINES\" \"ENLocal_BALANCE_LINES\"";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" = :qpstCellPhoneNumber) AND (\"ENLocal_BALANCE_LINES\".\"PageCode\" = :qpstPageCode)";
argsList.add("qpstCellPhoneNumber", /*TEXT*/ 0, qpstCellPhoneNumber);
argsList.add("qpstPageCode", /*TEXT*/ 0, qpstPageCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_LINESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_LINESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceLinesVar.value;
});
};
return getBalanceLinesAggr();
}).then(function () {
// Execute Action: LogMessage7
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Cache validation..."), "SELFCARE_MBP", callContext);
// Execute Action: GetPHBalance_BP_BO
return controller.getPHBalance_BP_BO$ServerAction(vars.value.phoneNumberInLocal, vars.value.processInLocal, true, vars.value.offerDetailInLocal, vars.value.applicationInLocal, vars.value.correlationIdInLocal, callContext).then(function (value) {
getPHBalance_BP_BOVar.value = value;
});
}).then(function () {
// Execute Action: LogMessage8
OS.SystemActions.logMessage((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After GetPHBalance Status:") + (getPHBalance_BP_BOVar.value.successOut ? "True" : "False")) + " Balances:") + (getPHBalance_BP_BOVar.value.balancesOut.length).toString()), "SELFCARE_MBP", callContext);
}).then(function () {
// NotSuccessfulIntegration?
return OS.Flow.executeSequence(function () {
if((!(getPHBalance_BP_BOVar.value.successOut))) {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(((vars.value.offerDetailInLocal) ? (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr) : (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.homepageBalanceInfoAttr)), callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
});
} else {
// Execute Action: LogMessage
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "Before deleting old records..."), "SELFCARE_MBP", callContext);
// GetBalanceLines
// Foreach GetBalanceLines.List
callContext.iterationContext.registerIterationStart(getBalanceLinesVar.value.listOut);
return OS.Flow.tryFinally(function () {
var getBalanceLinesIterator = callContext.iterationContext.getIterator(getBalanceLinesVar.value.listOut);
var getBalanceLinesIndexMax = getBalanceLinesVar.value.listOut.length;
var getBalanceLinesIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getBalanceLinesIndex < getBalanceLinesVar.value.listOut.length)) && (getBalanceLinesIndexMax > 0));
}, function () {
getBalanceLinesIterator.currentRowNumber = getBalanceLinesIndex;
// Execute Action: DeleteBalanceLines
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.delete(getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr, callContext).then(function () {
// Aggregate: GetPipeInformation
var getPipeInformationAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploBalanceLineID = getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5";
} else {
selectSql += "\"ENLocal_PIPE_INFORMATION\".\"Id\" o0, \"ENLocal_PIPE_INFORMATION\".\"Tag\" o1, \"ENLocal_PIPE_INFORMATION\".\"Value\" o2, \"ENLocal_PIPE_INFORMATION\".\"DataTypeID\" o3, \"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" o4, \"ENLocal_PIPE_INFORMATION\".\"BalanceConfigID\" o5";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PIPE_INFORMATION\" \"ENLocal_PIPE_INFORMATION\"";
fromAndWhereSql += " WHERE ";
if (qploBalanceLineID != 0) {
fromAndWhereSql += "((\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" = :qploBalanceLineID) AND (\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NOT NULL))";
argsList.add("qploBalanceLineID", /*LONGINTEGER*/ 4, qploBalanceLineID);
} else {
fromAndWhereSql += "(\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PIPE_INFORMATIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPipeInformationVar.value;
});
};
return getPipeInformationAggr();
}).then(function () {
// GetPipes
// Foreach GetPipeInformation.List
callContext.iterationContext.registerIterationStart(getPipeInformationVar.value.listOut);
}).then(function () {
return OS.Flow.tryFinally(function () {
var getPipeInformationIterator = callContext.iterationContext.getIterator(getPipeInformationVar.value.listOut);
var getPipeInformationIndexMax = getPipeInformationVar.value.listOut.length;
var getPipeInformationIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getPipeInformationIndex < getPipeInformationVar.value.listOut.length)) && (getPipeInformationIndexMax > 0));
}, function () {
getPipeInformationIterator.currentRowNumber = getPipeInformationIndex;
// Execute Action: DeletePipeInformation
return BALANCE_MBPModel.entities.Local_PIPE_INFORMATION.delete(getPipeInformationVar.value.listOut.getItem(getPipeInformationIndex.valueOf()).local_PIPE_INFORMATIONAttr.idAttr, callContext).then(function () {
getPipeInformationIndexMax--;
getPipeInformationIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getPipeInformationVar.value.listOut);
});
}).then(function () {
getBalanceLinesIndexMax--;
getBalanceLinesIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getBalanceLinesVar.value.listOut);
}).then(function () {
// Execute Action: LogMessage3
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "After deleting old records..."), "SELFCARE_MBP", callContext);
// Execute Action: ListFilterIsCredit
listFilterIsCreditVar.value = OS.SystemActions.listFilter(getPHBalance_BP_BOVar.value.balancesOut, function (p) {
return (p.isCreditBalanceAttr === true);
}, callContext);

// CreditList
// Foreach ListFilterIsCredit.FilteredList
callContext.iterationContext.registerIterationStart(listFilterIsCreditVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterIsCreditVar.value.filteredListOut);
var filteredListIndexMax = listFilterIsCreditVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterIsCreditVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(getPHBalance_BP_BOVar.value.balancesOut.getCurrent(callContext.iterationContext).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// TempLocalBalance = ListFilterIsCredit.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterIsCreditVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = 0;
target.isCreditAttr = true;
target.creditDescriptionAttr = source.labelAttr;
target.tagCodeAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
return target;
});
// Execute Action: CreateOrUpdateCreditBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateCreditBalanceVar.value = value;
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterIsCreditVar.value.filteredListOut);
});
}).then(function () {
// Execute Action: ListFilterBalance
listFilterBalanceVar.value = OS.SystemActions.listFilter(getPHBalance_BP_BOVar.value.balancesOut, function (p) {
return (p.isCreditBalanceAttr === false);
}, callContext);

// BalanceList
// Foreach ListFilterBalance.FilteredList
callContext.iterationContext.registerIterationStart(listFilterBalanceVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterBalanceVar.value.filteredListOut);
var filteredListIndexMax = listFilterBalanceVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterBalanceVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// SetTagAux
// TagAux = ListFilterBalance.FilteredList.Current.Tag
vars.value.tagAuxVar = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr;
// PipeFound?
if(((OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false) >= 0))) {
// SetTag
// Tag = Substr
vars.value.tagVar = OS.BuiltinFunctions.substr(vars.value.tagAuxVar, 0, OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false));
} else {
// SetTag
// Tag = TagAux
vars.value.tagVar = vars.value.tagAuxVar;
}

// Aggregate: GetBalanceConfig
var getBalanceConfigAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstLocal_PAGE_Code = vars.value.pageCodeInLocal;
var qpstLocal_BALANCE_CONFIG_Tag = vars.value.tagVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7, \"ENLocal_PAGE\".\"Id\" o8, \"ENLocal_PAGE\".\"Label\" o9, \"ENLocal_PAGE\".\"Code\" o10, \"ENLocal_PAGE\".\"DateTime\" o11";
}
fromAndWhereSql += " FROM (\"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\" Inner JOIN \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\" ON (\"ENLocal_BALANCE_CONFIG\".\"PageID\" = \"ENLocal_PAGE\".\"Id\")) ";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_CONFIG\".\"Tag\" = :qpstLocal_BALANCE_CONFIG_Tag) AND (\"ENLocal_PAGE\".\"Code\" = :qpstLocal_PAGE_Code)";
argsList.add("qpstLocal_BALANCE_CONFIG_Tag", /*TEXT*/ 0, qpstLocal_BALANCE_CONFIG_Tag);
argsList.add("qpstLocal_PAGE_Code", /*TEXT*/ 0, qpstLocal_PAGE_Code);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigVar.value;
});
};
return getBalanceConfigAggr().then(function () {
// GetBalanceConfig.Empty?
return OS.Flow.executeSequence(function () {
if((getBalanceConfigVar.value.listOut.isEmpty)) {
// SetTagsNotFound
// BalanceNotFound.BalanceTag = Tag
vars.value.balanceNotFoundVar.balanceTagAttr = vars.value.tagVar;
// Execute Action: ListAppend
OS.SystemActions.listAppend(outVars.value.balanceNotFound_RLOut, vars.value.balanceNotFoundVar, callContext);
} else {
// SetTempLocalBalance
// TempLocalBalance = ListFilterBalance.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).packageNumberAttr;
target.isCreditAttr = false;
target.creditDescriptionAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
target.cacheExpirationDateAttr = getPageByCodeVar.value.listOut.getCurrent(callContext.iterationContext).local_PAGEAttr.dateTimeAttr;
return target;
});
// TempLocalBalance.TagCode = Tag
vars.value.tempLocalBalanceVar.tagCodeAttr = vars.value.tagVar;
// Execute Action: CreateOrUpdateBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateBalanceVar.value = value;
}).then(function () {
// Execute Action: CreatePipeInformation
return BALANCE_MBPController.default.createPipeInformation$Action(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr, createOrUpdateBalanceVar.value.idOut, getBalanceConfigVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIGAttr.idAttr, callContext).then(function (value) {
createPipeInformationVar.value = value;
});
});
}

});
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterBalanceVar.value.filteredListOut);
});
}).then(function () {
// Execute Action: LogMessage4
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After all logic..."), "SELFCARE_MBP", callContext);
});
}

});
});
}

});
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.GetBalanceLines", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines$vars", [{
name: "PhoneNumber",
attrName: "phoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OfferDetail",
attrName: "offerDetailInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PageCode",
attrName: "pageCodeInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CorrelationId",
attrName: "correlationIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TempLocalBalance",
attrName: "tempLocalBalanceVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BALANCE_LINESRec();
},
complexType: BALANCE_MBPModel.Local_BALANCE_LINESRec
}, {
name: "Tag",
attrName: "tagVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TagAux",
attrName: "tagAuxVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BalanceNotFound",
attrName: "balanceNotFoundVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec();
},
complexType: BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "BalanceNotFound_RL",
attrName: "balanceNotFound_RLOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceLines$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, applicationIn, correlationIdIn) {
phoneNumberIn = (phoneNumberIn === undefined) ? "" : phoneNumberIn;
processIn = (processIn === undefined) ? "" : processIn;
offerDetailIn = (offerDetailIn === undefined) ? false : offerDetailIn;
pageCodeIn = (pageCodeIn === undefined) ? "" : pageCodeIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
correlationIdIn = (correlationIdIn === undefined) ? "" : correlationIdIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceLines$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(phoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(offerDetailIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(pageCodeIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(correlationIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
BalanceNotFound_RL: actionResults.balanceNotFound_RLOut
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceLines_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.model$Local_BALANCE_LINESRecord", "BALANCE_MBP.controller$CreatePipeInformation", "BALANCE_MBP.model$STR_BALANCE_NOT_FOUNDList", "BALANCE_MBP.controller$ServerAction.SendBalanceNotFoundEmail", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.controller$GetBalance_CheckCache", "BALANCE_MBP.controller$GetBalanceConfigs_MBP", "BALANCE_MBP.model$STR_PHBALANCEList", "BALANCE_MBP.controller$ServerAction.GetPHBalance_BP", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_BP.model$STR_PHBALANCERec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.model$Local_BALANCE_LINESRec", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRecordList", "BALANCE_BP.model$STR_BALANCE_NOT_FOUNDRec", "BALANCE_MBP.model$Local_BALANCE_LINESRecordList", "BALANCE_MBP.model$Local_PAGERecordList", "BALANCE_MBP.model$Local_PAGELocal_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRec", "BALANCE_MBP.model$Local_PAGERec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceLines_MBP$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, refreshTokenIn, associationIDIn, applicationIn, cacheValidationIntervalIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines_MBP$vars"))());
vars.value.phoneNumberInLocal = phoneNumberIn;
vars.value.processInLocal = processIn;
vars.value.offerDetailInLocal = offerDetailIn;
vars.value.pageCodeInLocal = pageCodeIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIDInLocal = associationIDIn;
vars.value.applicationInLocal = applicationIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var sendBalanceNotFoundEmailVar = new OS.DataTypes.VariableHolder();
var getPHBalance_BPVar = new OS.DataTypes.VariableHolder();
var createOrUpdateCreditBalanceVar = new OS.DataTypes.VariableHolder();
var createPipeInformationVar = new OS.DataTypes.VariableHolder();
var createOrUpdateBalanceVar = new OS.DataTypes.VariableHolder();
var cache_DisableByService2Var = new OS.DataTypes.VariableHolder();
var listFilterBalanceVar = new OS.DataTypes.VariableHolder();
var listFilterIsCreditVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var getBalance_CheckCacheVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigs_MBPVar = new OS.DataTypes.VariableHolder();
var getPipeInformationVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList))());
var getPageByCode2Var = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getBalanceConfigVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList))());
var getPageByCodeVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getBalanceLinesVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_LINESRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines_MBP$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage2
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Entering the action..."), "SELFCARE_MBP", callContext);
// EmptyPhoneNumber?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.phoneNumberInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
// Execute Action: LogMessage5
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After phonenumber validation..."), "SELFCARE_MBP", callContext);
// PageCodeEmpty?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.pageCodeInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
return OS.Flow.doWhileAsync(function () {
return false;
}, function () {
// Aggregate: GetPageByCode
var getPageByCodeAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCodeVar.value;
});
};
return getPageByCodeAggr().then(function () {
// GetPageByCode.Empty?
return OS.Flow.executeSequence(function () {
if((getPageByCodeVar.value.listOut.isEmpty)) {
// Execute Action: GetBalanceConfigs_MBP
return BALANCE_MBPController.default.getBalanceConfigs_MBP$Action(vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, callContext).then(function (value) {
getBalanceConfigs_MBPVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((getBalanceConfigs_MBPVar.value.successOut)) {
// Aggregate: GetPageByCode2
var getPageByCode2Aggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCode2Var.value;
});
};
return getPageByCode2Aggr().then(function () {
// GetPageByCode.Empty?
if((!(getPageByCode2Var.value.listOut.isEmpty))) {
return OS.Flow.breakAsync();
}

});
}

});
}).then(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
} else {
// Execute Action: LogMessage6
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Pagecode validation..."), "SELFCARE_MBP", callContext);
}

});
});
}).then(function () {
// Aggregate: GetBalanceLines
var getBalanceLinesAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_LINESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstPageCode = vars.value.pageCodeInLocal;
var qpstCellPhoneNumber = vars.value.phoneNumberInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23";
} else {
selectSql += "\"ENLocal_BALANCE_LINES\".\"Id\" o0, \"ENLocal_BALANCE_LINES\".\"BalanceGroupDescription\" o1, \"ENLocal_BALANCE_LINES\".\"AvailableAmount\" o2, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnit\" o3, \"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" o4, \"ENLocal_BALANCE_LINES\".\"ConsumedAmount\" o5, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnit\" o6, \"ENLocal_BALANCE_LINES\".\"TotalAmount\" o7, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnit\" o8, \"ENLocal_BALANCE_LINES\".\"Order\" o9, \"ENLocal_BALANCE_LINES\".\"DateTime\" o10, \"ENLocal_BALANCE_LINES\".\"PackageNumber\" o11, \"ENLocal_BALANCE_LINES\".\"IsCredit\" o12, \"ENLocal_BALANCE_LINES\".\"CreditDescription\" o13, \"ENLocal_BALANCE_LINES\".\"TagCode\" o14, \"ENLocal_BALANCE_LINES\".\"PageCode\" o15, \"ENLocal_BALANCE_LINES\".\"AvailableAmountFmt\" o16, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnitFmt\" o17, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountFmt\" o18, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnitFmt\" o19, \"ENLocal_BALANCE_LINES\".\"TotalAmountFmt\" o20, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnitFmt\" o21, \"ENLocal_BALANCE_LINES\".\"CacheExpirationDate\" o22, \"ENLocal_BALANCE_LINES\".\"ExpiryDate\" o23";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_LINES\" \"ENLocal_BALANCE_LINES\"";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" = :qpstCellPhoneNumber) AND (\"ENLocal_BALANCE_LINES\".\"PageCode\" = :qpstPageCode)";
argsList.add("qpstCellPhoneNumber", /*TEXT*/ 0, qpstCellPhoneNumber);
argsList.add("qpstPageCode", /*TEXT*/ 0, qpstPageCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_LINESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_LINESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceLinesVar.value;
});
};
return getBalanceLinesAggr().then(function () {
// Execute Action: GetBalance_CheckCache
return BALANCE_MBPController.default.getBalance_CheckCache$Action(vars.value.offerDetailInLocal, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, getBalanceLinesVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_LINESAttr.cacheExpirationDateAttr, callContext).then(function (value) {
getBalance_CheckCacheVar.value = value;
});
});
}).then(function () {
// Balances Empty?
if((!(getBalanceLinesVar.value.listOut.isEmpty))) {
// IsCacheInValid?
if((!(!(getBalance_CheckCacheVar.value.useCacheOut)))) {
// Success = True
outVars.value.successOut = true;
return OS.Flow.returnAsync(outVars.value);

}

}

// Execute Action: LogMessage7
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Cache validation..."), "SELFCARE_MBP", callContext);
// Execute Action: GetPHBalance_BP
return controller.getPHBalance_BP$ServerAction(vars.value.phoneNumberInLocal, vars.value.processInLocal, true, vars.value.offerDetailInLocal, vars.value.refreshTokenInLocal, vars.value.associationIDInLocal, vars.value.applicationInLocal, callContext).then(function (value) {
getPHBalance_BPVar.value = value;
}).then(function () {
// Execute Action: LogMessage8
OS.SystemActions.logMessage((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After GetPHBalance Status:") + (getPHBalance_BPVar.value.successOut ? "True" : "False")) + " Balances:") + (getPHBalance_BPVar.value.balancesOut.length).toString()), "SELFCARE_MBP", callContext);
});
}).then(function () {
// NotSuccessfulIntegration?
return OS.Flow.executeSequence(function () {
if((!(getPHBalance_BPVar.value.successOut))) {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(((vars.value.offerDetailInLocal) ? (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr) : (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.homepageBalanceInfoAttr)), callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
});
} else {
return OS.Flow.executeSequence(function () {
if((!(vars.value.offerDetailInLocal))) {
// Execute Action: Cache_DisableByService2
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr, callContext).then(function (value) {
cache_DisableByService2Var.value = value;
});
}

}).then(function () {
// Execute Action: LogMessage
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "Before deleting old records..."), "SELFCARE_MBP", callContext);
// GetBalanceLines
// Foreach GetBalanceLines.List
callContext.iterationContext.registerIterationStart(getBalanceLinesVar.value.listOut);
return OS.Flow.tryFinally(function () {
var getBalanceLinesIterator = callContext.iterationContext.getIterator(getBalanceLinesVar.value.listOut);
var getBalanceLinesIndexMax = getBalanceLinesVar.value.listOut.length;
var getBalanceLinesIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getBalanceLinesIndex < getBalanceLinesVar.value.listOut.length)) && (getBalanceLinesIndexMax > 0));
}, function () {
getBalanceLinesIterator.currentRowNumber = getBalanceLinesIndex;
// Execute Action: DeleteBalanceLines
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.delete(getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr, callContext).then(function () {
// Aggregate: GetPipeInformation
var getPipeInformationAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploBalanceLineID = getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5";
} else {
selectSql += "\"ENLocal_PIPE_INFORMATION\".\"Id\" o0, \"ENLocal_PIPE_INFORMATION\".\"Tag\" o1, \"ENLocal_PIPE_INFORMATION\".\"Value\" o2, \"ENLocal_PIPE_INFORMATION\".\"DataTypeID\" o3, \"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" o4, \"ENLocal_PIPE_INFORMATION\".\"BalanceConfigID\" o5";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PIPE_INFORMATION\" \"ENLocal_PIPE_INFORMATION\"";
fromAndWhereSql += " WHERE ";
if (qploBalanceLineID != 0) {
fromAndWhereSql += "((\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" = :qploBalanceLineID) AND (\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NOT NULL))";
argsList.add("qploBalanceLineID", /*LONGINTEGER*/ 4, qploBalanceLineID);
} else {
fromAndWhereSql += "(\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PIPE_INFORMATIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPipeInformationVar.value;
});
};
return getPipeInformationAggr();
}).then(function () {
// GetPipes
// Foreach GetPipeInformation.List
callContext.iterationContext.registerIterationStart(getPipeInformationVar.value.listOut);
}).then(function () {
return OS.Flow.tryFinally(function () {
var getPipeInformationIterator = callContext.iterationContext.getIterator(getPipeInformationVar.value.listOut);
var getPipeInformationIndexMax = getPipeInformationVar.value.listOut.length;
var getPipeInformationIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getPipeInformationIndex < getPipeInformationVar.value.listOut.length)) && (getPipeInformationIndexMax > 0));
}, function () {
getPipeInformationIterator.currentRowNumber = getPipeInformationIndex;
// Execute Action: DeletePipeInformation
return BALANCE_MBPModel.entities.Local_PIPE_INFORMATION.delete(getPipeInformationVar.value.listOut.getItem(getPipeInformationIndex.valueOf()).local_PIPE_INFORMATIONAttr.idAttr, callContext).then(function () {
getPipeInformationIndexMax--;
getPipeInformationIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getPipeInformationVar.value.listOut);
});
}).then(function () {
getBalanceLinesIndexMax--;
getBalanceLinesIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getBalanceLinesVar.value.listOut);
});
}).then(function () {
// Execute Action: LogMessage3
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "After deleting old records..."), "SELFCARE_MBP", callContext);
// Execute Action: ListFilterIsCredit
listFilterIsCreditVar.value = OS.SystemActions.listFilter(getPHBalance_BPVar.value.balancesOut, function (p) {
return p.isCreditBalanceAttr;
}, callContext);

// CreditList
// Foreach ListFilterIsCredit.FilteredList
callContext.iterationContext.registerIterationStart(listFilterIsCreditVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterIsCreditVar.value.filteredListOut);
var filteredListIndexMax = listFilterIsCreditVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterIsCreditVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(getPHBalance_BPVar.value.balancesOut.getCurrent(callContext.iterationContext).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// TempLocalBalance = ListFilterIsCredit.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterIsCreditVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = 0;
target.isCreditAttr = true;
target.creditDescriptionAttr = source.labelAttr;
target.tagCodeAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
target.cacheExpirationDateAttr = getBalance_CheckCacheVar.value.cacheExpirationDateOut;
return target;
});
// Execute Action: CreateOrUpdateCreditBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateCreditBalanceVar.value = value;
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterIsCreditVar.value.filteredListOut);
});
}).then(function () {
// Execute Action: ListFilterBalance
listFilterBalanceVar.value = OS.SystemActions.listFilter(getPHBalance_BPVar.value.balancesOut, function (p) {
return !(p.isCreditBalanceAttr);
}, callContext);

// BalanceList
// Foreach ListFilterBalance.FilteredList
callContext.iterationContext.registerIterationStart(listFilterBalanceVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterBalanceVar.value.filteredListOut);
var filteredListIndexMax = listFilterBalanceVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterBalanceVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// SetTagAux
// TagAux = ListFilterBalance.FilteredList.Current.Tag
vars.value.tagAuxVar = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr;
// PipeFound?
if(((OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false) >= 0))) {
// SetTag
// Tag = Substr
vars.value.tagVar = OS.BuiltinFunctions.substr(vars.value.tagAuxVar, 0, OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false));
} else {
// SetTag
// Tag = TagAux
vars.value.tagVar = vars.value.tagAuxVar;
}

// Aggregate: GetBalanceConfig
var getBalanceConfigAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstLocal_PAGE_Code = vars.value.pageCodeInLocal;
var qpstLocal_BALANCE_CONFIG_Tag = vars.value.tagVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7, \"ENLocal_PAGE\".\"Id\" o8, \"ENLocal_PAGE\".\"Label\" o9, \"ENLocal_PAGE\".\"Code\" o10, \"ENLocal_PAGE\".\"DateTime\" o11";
}
fromAndWhereSql += " FROM (\"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\" Inner JOIN \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\" ON (\"ENLocal_BALANCE_CONFIG\".\"PageID\" = \"ENLocal_PAGE\".\"Id\")) ";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_CONFIG\".\"Tag\" = :qpstLocal_BALANCE_CONFIG_Tag) AND (\"ENLocal_PAGE\".\"Code\" = :qpstLocal_PAGE_Code)";
argsList.add("qpstLocal_BALANCE_CONFIG_Tag", /*TEXT*/ 0, qpstLocal_BALANCE_CONFIG_Tag);
argsList.add("qpstLocal_PAGE_Code", /*TEXT*/ 0, qpstLocal_PAGE_Code);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigVar.value;
});
};
return getBalanceConfigAggr().then(function () {
// GetBalanceConfig.Empty?
return OS.Flow.executeSequence(function () {
if((getBalanceConfigVar.value.listOut.isEmpty)) {
// SetTagsNotFound
// BalanceNotFound.BalanceTag = Tag
vars.value.balanceNotFoundVar.balanceTagAttr = vars.value.tagVar;
// Execute Action: ListAppend
OS.SystemActions.listAppend(vars.value.balanceNotFound_RLVar, vars.value.balanceNotFoundVar, callContext);
} else {
// SetTempLocalBalance
// TempLocalBalance = ListFilterBalance.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).packageNumberAttr;
target.isCreditAttr = false;
target.creditDescriptionAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
target.cacheExpirationDateAttr = getBalance_CheckCacheVar.value.cacheExpirationDateOut;
return target;
});
// TempLocalBalance.TagCode = Tag
vars.value.tempLocalBalanceVar.tagCodeAttr = vars.value.tagVar;
// Execute Action: CreateOrUpdateBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateBalanceVar.value = value;
}).then(function () {
// Execute Action: CreatePipeInformation
return BALANCE_MBPController.default.createPipeInformation$Action(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr, createOrUpdateBalanceVar.value.idOut, getBalanceConfigVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIGAttr.idAttr, callContext).then(function (value) {
createPipeInformationVar.value = value;
});
});
}

});
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterBalanceVar.value.filteredListOut);
});
}).then(function () {
// TagsNotFoundEmpty?
return OS.Flow.executeSequence(function () {
if((!(vars.value.balanceNotFound_RLVar.isEmpty))) {
// Execute Action: SendBalanceNotFoundEmail
return controller.sendBalanceNotFoundEmail$ServerAction(vars.value.phoneNumberInLocal, getPageByCodeVar.value.listOut.getCurrent(callContext.iterationContext).local_PAGEAttr.labelAttr, vars.value.balanceNotFound_RLVar, vars.value.applicationInLocal, callContext).then(function (value) {
sendBalanceNotFoundEmailVar.value = value;
});
}

});
}).then(function () {
// Execute Action: LogMessage4
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After all logic..."), "SELFCARE_MBP", callContext);
});
}

});
});
}

});
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.GetBalanceLines_MBP", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines_MBP$vars", [{
name: "PhoneNumber",
attrName: "phoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OfferDetail",
attrName: "offerDetailInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PageCode",
attrName: "pageCodeInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationID",
attrName: "associationIDInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "TempLocalBalance",
attrName: "tempLocalBalanceVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BALANCE_LINESRec();
},
complexType: BALANCE_MBPModel.Local_BALANCE_LINESRec
}, {
name: "Tag",
attrName: "tagVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TagAux",
attrName: "tagAuxVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BalanceNotFound_RL",
attrName: "balanceNotFound_RLVar",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList
}, {
name: "BalanceNotFound",
attrName: "balanceNotFoundVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec();
},
complexType: BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines_MBP$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceLines_MBP$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, refreshTokenIn, associationIDIn, applicationIn, cacheValidationIntervalIn) {
phoneNumberIn = (phoneNumberIn === undefined) ? "" : phoneNumberIn;
processIn = (processIn === undefined) ? "" : processIn;
offerDetailIn = (offerDetailIn === undefined) ? false : offerDetailIn;
pageCodeIn = (pageCodeIn === undefined) ? "" : pageCodeIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIDIn = (associationIDIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIDIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceLines_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(phoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(offerDetailIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(pageCodeIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIDIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceLines_MBP_BO", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.model$Local_BALANCE_LINESRecord", "BALANCE_MBP.controller$CreatePipeInformation", "BALANCE_MBP.model$STR_PHBALANCEList", "BALANCE_MBP.controller$ServerAction.GetPHBalance_BP_BO", "BALANCE_MBP.controller$GetBalanceConfigs_MBP_BO", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_BALANCE_LINESRec", "BALANCE_MBP.model$Local_BALANCE_LINESRecordList", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRecordList", "BALANCE_BP.model$STR_PHBALANCERec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.model$Local_PAGELocal_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_PAGERecordList", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.model$Local_PAGERec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceLines_MBP_BO$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, applicationIn, correlationIdIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines_MBP_BO$vars"))());
vars.value.phoneNumberInLocal = phoneNumberIn;
vars.value.processInLocal = processIn;
vars.value.offerDetailInLocal = offerDetailIn;
vars.value.pageCodeInLocal = pageCodeIn;
vars.value.applicationInLocal = applicationIn;
vars.value.correlationIdInLocal = correlationIdIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getPHBalance_BP_BOVar = new OS.DataTypes.VariableHolder();
var createOrUpdateBalanceVar = new OS.DataTypes.VariableHolder();
var createPipeInformationVar = new OS.DataTypes.VariableHolder();
var listFilterIsCreditVar = new OS.DataTypes.VariableHolder();
var listFilterBalanceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateCreditBalanceVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigs_MBP_BOVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList))());
var getBalanceLinesVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_LINESRecordList))());
var getPageByCode2Var = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getPageByCodeVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getPipeInformationVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines_MBP_BO$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage2
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Entering the action..."), "SELFCARE_MBP", callContext);
// EmptyPhoneNumber?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.phoneNumberInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
// Execute Action: LogMessage5
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After phonenumber validation..."), "SELFCARE_MBP", callContext);
// PageCodeEmpty?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.pageCodeInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
return OS.Flow.doWhileAsync(function () {
return false;
}, function () {
// Aggregate: GetPageByCode
var getPageByCodeAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCodeVar.value;
});
};
return getPageByCodeAggr().then(function () {
// GetPageByCode.Empty?
return OS.Flow.executeSequence(function () {
if((getPageByCodeVar.value.listOut.isEmpty)) {
// Execute Action: GetBalanceConfigs_MBP_BO
return BALANCE_MBPController.default.getBalanceConfigs_MBP_BO$Action(vars.value.applicationInLocal, callContext).then(function (value) {
getBalanceConfigs_MBP_BOVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((getBalanceConfigs_MBP_BOVar.value.successOut)) {
// Aggregate: GetPageByCode2
var getPageByCode2Aggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCode2Var.value;
});
};
return getPageByCode2Aggr().then(function () {
// GetPageByCode.Empty?
if((!(getPageByCode2Var.value.listOut.isEmpty))) {
return OS.Flow.breakAsync();
}

});
}

});
}).then(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
} else {
// Execute Action: LogMessage6
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Pagecode validation..."), "SELFCARE_MBP", callContext);
}

});
});
}).then(function () {
// Aggregate: GetBalanceLines
var getBalanceLinesAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_LINESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstPageCode = vars.value.pageCodeInLocal;
var qpstCellPhoneNumber = vars.value.phoneNumberInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23";
} else {
selectSql += "\"ENLocal_BALANCE_LINES\".\"Id\" o0, \"ENLocal_BALANCE_LINES\".\"BalanceGroupDescription\" o1, \"ENLocal_BALANCE_LINES\".\"AvailableAmount\" o2, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnit\" o3, \"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" o4, \"ENLocal_BALANCE_LINES\".\"ConsumedAmount\" o5, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnit\" o6, \"ENLocal_BALANCE_LINES\".\"TotalAmount\" o7, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnit\" o8, \"ENLocal_BALANCE_LINES\".\"Order\" o9, \"ENLocal_BALANCE_LINES\".\"DateTime\" o10, \"ENLocal_BALANCE_LINES\".\"PackageNumber\" o11, \"ENLocal_BALANCE_LINES\".\"IsCredit\" o12, \"ENLocal_BALANCE_LINES\".\"CreditDescription\" o13, \"ENLocal_BALANCE_LINES\".\"TagCode\" o14, \"ENLocal_BALANCE_LINES\".\"PageCode\" o15, \"ENLocal_BALANCE_LINES\".\"AvailableAmountFmt\" o16, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnitFmt\" o17, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountFmt\" o18, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnitFmt\" o19, \"ENLocal_BALANCE_LINES\".\"TotalAmountFmt\" o20, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnitFmt\" o21, \"ENLocal_BALANCE_LINES\".\"CacheExpirationDate\" o22, \"ENLocal_BALANCE_LINES\".\"ExpiryDate\" o23";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_LINES\" \"ENLocal_BALANCE_LINES\"";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" = :qpstCellPhoneNumber) AND (\"ENLocal_BALANCE_LINES\".\"PageCode\" = :qpstPageCode)";
argsList.add("qpstCellPhoneNumber", /*TEXT*/ 0, qpstCellPhoneNumber);
argsList.add("qpstPageCode", /*TEXT*/ 0, qpstPageCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_LINESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_LINESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceLinesVar.value;
});
};
return getBalanceLinesAggr().then(function () {
// Execute Action: LogMessage7
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Cache validation..."), "SELFCARE_MBP", callContext);
// Execute Action: GetPHBalance_BP_BO
return controller.getPHBalance_BP_BO$ServerAction(vars.value.phoneNumberInLocal, vars.value.processInLocal, true, vars.value.offerDetailInLocal, vars.value.applicationInLocal, vars.value.correlationIdInLocal, callContext).then(function (value) {
getPHBalance_BP_BOVar.value = value;
});
}).then(function () {
// Execute Action: LogMessage8
OS.SystemActions.logMessage((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After GetPHBalance Status:") + (getPHBalance_BP_BOVar.value.successOut ? "True" : "False")) + " Balances:") + (getPHBalance_BP_BOVar.value.balancesOut.length).toString()), "SELFCARE_MBP", callContext);
});
}).then(function () {
// NotSuccessfulIntegration?
return OS.Flow.executeSequence(function () {
if((!(getPHBalance_BP_BOVar.value.successOut))) {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(((vars.value.offerDetailInLocal) ? (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr) : (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.homepageBalanceInfoAttr)), callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
});
} else {
// Execute Action: LogMessage
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "Before deleting old records..."), "SELFCARE_MBP", callContext);
// GetBalanceLines
// Foreach GetBalanceLines.List
callContext.iterationContext.registerIterationStart(getBalanceLinesVar.value.listOut);
return OS.Flow.tryFinally(function () {
var getBalanceLinesIterator = callContext.iterationContext.getIterator(getBalanceLinesVar.value.listOut);
var getBalanceLinesIndexMax = getBalanceLinesVar.value.listOut.length;
var getBalanceLinesIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getBalanceLinesIndex < getBalanceLinesVar.value.listOut.length)) && (getBalanceLinesIndexMax > 0));
}, function () {
getBalanceLinesIterator.currentRowNumber = getBalanceLinesIndex;
// Execute Action: DeleteBalanceLines
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.delete(getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr, callContext).then(function () {
// Aggregate: GetPipeInformation
var getPipeInformationAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploBalanceLineID = getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5";
} else {
selectSql += "\"ENLocal_PIPE_INFORMATION\".\"Id\" o0, \"ENLocal_PIPE_INFORMATION\".\"Tag\" o1, \"ENLocal_PIPE_INFORMATION\".\"Value\" o2, \"ENLocal_PIPE_INFORMATION\".\"DataTypeID\" o3, \"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" o4, \"ENLocal_PIPE_INFORMATION\".\"BalanceConfigID\" o5";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PIPE_INFORMATION\" \"ENLocal_PIPE_INFORMATION\"";
fromAndWhereSql += " WHERE ";
if (qploBalanceLineID != 0) {
fromAndWhereSql += "((\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" = :qploBalanceLineID) AND (\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NOT NULL))";
argsList.add("qploBalanceLineID", /*LONGINTEGER*/ 4, qploBalanceLineID);
} else {
fromAndWhereSql += "(\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PIPE_INFORMATIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPipeInformationVar.value;
});
};
return getPipeInformationAggr();
}).then(function () {
// GetPipes
// Foreach GetPipeInformation.List
callContext.iterationContext.registerIterationStart(getPipeInformationVar.value.listOut);
}).then(function () {
return OS.Flow.tryFinally(function () {
var getPipeInformationIterator = callContext.iterationContext.getIterator(getPipeInformationVar.value.listOut);
var getPipeInformationIndexMax = getPipeInformationVar.value.listOut.length;
var getPipeInformationIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getPipeInformationIndex < getPipeInformationVar.value.listOut.length)) && (getPipeInformationIndexMax > 0));
}, function () {
getPipeInformationIterator.currentRowNumber = getPipeInformationIndex;
// Execute Action: DeletePipeInformation
return BALANCE_MBPModel.entities.Local_PIPE_INFORMATION.delete(getPipeInformationVar.value.listOut.getItem(getPipeInformationIndex.valueOf()).local_PIPE_INFORMATIONAttr.idAttr, callContext).then(function () {
getPipeInformationIndexMax--;
getPipeInformationIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getPipeInformationVar.value.listOut);
});
}).then(function () {
getBalanceLinesIndexMax--;
getBalanceLinesIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getBalanceLinesVar.value.listOut);
}).then(function () {
// Execute Action: LogMessage3
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "After deleting old records..."), "SELFCARE_MBP", callContext);
// Execute Action: ListFilterIsCredit
listFilterIsCreditVar.value = OS.SystemActions.listFilter(getPHBalance_BP_BOVar.value.balancesOut, function (p) {
return (p.isCreditBalanceAttr === true);
}, callContext);

// CreditList
// Foreach ListFilterIsCredit.FilteredList
callContext.iterationContext.registerIterationStart(listFilterIsCreditVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterIsCreditVar.value.filteredListOut);
var filteredListIndexMax = listFilterIsCreditVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterIsCreditVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(getPHBalance_BP_BOVar.value.balancesOut.getCurrent(callContext.iterationContext).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// TempLocalBalance = ListFilterIsCredit.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterIsCreditVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = 0;
target.isCreditAttr = true;
target.creditDescriptionAttr = source.labelAttr;
target.tagCodeAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
return target;
});
// Execute Action: CreateOrUpdateCreditBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateCreditBalanceVar.value = value;
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterIsCreditVar.value.filteredListOut);
});
}).then(function () {
// Execute Action: ListFilterBalance
listFilterBalanceVar.value = OS.SystemActions.listFilter(getPHBalance_BP_BOVar.value.balancesOut, function (p) {
return (p.isCreditBalanceAttr === false);
}, callContext);

// BalanceList
// Foreach ListFilterBalance.FilteredList
callContext.iterationContext.registerIterationStart(listFilterBalanceVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterBalanceVar.value.filteredListOut);
var filteredListIndexMax = listFilterBalanceVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterBalanceVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// SetTagAux
// TagAux = ListFilterBalance.FilteredList.Current.Tag
vars.value.tagAuxVar = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr;
// PipeFound?
if(((OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false) >= 0))) {
// SetTag
// Tag = Substr
vars.value.tagVar = OS.BuiltinFunctions.substr(vars.value.tagAuxVar, 0, OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false));
} else {
// SetTag
// Tag = TagAux
vars.value.tagVar = vars.value.tagAuxVar;
}

// Aggregate: GetBalanceConfig
var getBalanceConfigAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstLocal_PAGE_Code = vars.value.pageCodeInLocal;
var qpstLocal_BALANCE_CONFIG_Tag = vars.value.tagVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7, \"ENLocal_PAGE\".\"Id\" o8, \"ENLocal_PAGE\".\"Label\" o9, \"ENLocal_PAGE\".\"Code\" o10, \"ENLocal_PAGE\".\"DateTime\" o11";
}
fromAndWhereSql += " FROM (\"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\" Inner JOIN \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\" ON (\"ENLocal_BALANCE_CONFIG\".\"PageID\" = \"ENLocal_PAGE\".\"Id\")) ";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_CONFIG\".\"Tag\" = :qpstLocal_BALANCE_CONFIG_Tag) AND (\"ENLocal_PAGE\".\"Code\" = :qpstLocal_PAGE_Code)";
argsList.add("qpstLocal_BALANCE_CONFIG_Tag", /*TEXT*/ 0, qpstLocal_BALANCE_CONFIG_Tag);
argsList.add("qpstLocal_PAGE_Code", /*TEXT*/ 0, qpstLocal_PAGE_Code);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigVar.value;
});
};
return getBalanceConfigAggr().then(function () {
// GetBalanceConfig.Empty?
return OS.Flow.executeSequence(function () {
if((!(getBalanceConfigVar.value.listOut.isEmpty))) {
// SetTempLocalBalance
// TempLocalBalance = ListFilterBalance.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).packageNumberAttr;
target.isCreditAttr = false;
target.creditDescriptionAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
return target;
});
// TempLocalBalance.TagCode = Tag
vars.value.tempLocalBalanceVar.tagCodeAttr = vars.value.tagVar;
// Execute Action: CreateOrUpdateBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateBalanceVar.value = value;
}).then(function () {
// Execute Action: CreatePipeInformation
return BALANCE_MBPController.default.createPipeInformation$Action(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr, createOrUpdateBalanceVar.value.idOut, getBalanceConfigVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIGAttr.idAttr, callContext).then(function (value) {
createPipeInformationVar.value = value;
});
});
}

});
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterBalanceVar.value.filteredListOut);
});
}).then(function () {
// Execute Action: LogMessage4
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After all logic..."), "SELFCARE_MBP", callContext);
});
}

});
});
}

});
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.GetBalanceLines_MBP_BO", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines_MBP_BO$vars", [{
name: "PhoneNumber",
attrName: "phoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OfferDetail",
attrName: "offerDetailInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PageCode",
attrName: "pageCodeInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CorrelationId",
attrName: "correlationIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TempLocalBalance",
attrName: "tempLocalBalanceVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BALANCE_LINESRec();
},
complexType: BALANCE_MBPModel.Local_BALANCE_LINESRec
}, {
name: "Tag",
attrName: "tagVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TagAux",
attrName: "tagAuxVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLines_MBP_BO$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceLines_MBP_BO$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, applicationIn, correlationIdIn) {
phoneNumberIn = (phoneNumberIn === undefined) ? "" : phoneNumberIn;
processIn = (processIn === undefined) ? "" : processIn;
offerDetailIn = (offerDetailIn === undefined) ? false : offerDetailIn;
pageCodeIn = (pageCodeIn === undefined) ? "" : pageCodeIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
correlationIdIn = (correlationIdIn === undefined) ? "" : correlationIdIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceLines_MBP_BO$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(phoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(offerDetailIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(pageCodeIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(correlationIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceLinesV2_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$Local_BALANCE_NEXT_CHARGE_DETAILRec", "BALANCE_MBP.controller$CreateOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic", "BALANCE_MBP.model$Local_BALANCE_LINESRecord", "BALANCE_MBP.model$STR_PHBALANCEList", "BALANCE_MBP.controller$ServerAction.GetPHBalanceV2_BP", "BALANCE_MBP.controller$CreatePipeInformation", "BALANCE_MBP.controller$DeleteAll_BALANCENEXTCHARGEDETAIL_Logic", "BALANCE_MBP.controller$GetBalanceConfigs_MBP", "BALANCE_MBP.model$STR_BALANCE_NOT_FOUNDList", "BALANCE_MBP.controller$ServerAction.SendBalanceNotFoundEmail", "BALANCE_MBP.controller$GetBalance_CheckCache", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_BALANCE_LINESRec", "BALANCE_BP.model$STR_BALANCE_NOT_FOUNDRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.model$Local_BALANCE_LINESRecordList", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRecordList", "BALANCE_BP.model$STR_PHBALANCERec", "BALANCE_MBP.model$Local_PAGELocal_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_PAGERecordList", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.model$Local_PAGERec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceLinesV2_MBP$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, refreshTokenIn, associationIDIn, applicationIn, cacheValidationIntervalIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV2_MBP$vars"))());
vars.value.phoneNumberInLocal = phoneNumberIn;
vars.value.processInLocal = processIn;
vars.value.offerDetailInLocal = offerDetailIn;
vars.value.pageCodeInLocal = pageCodeIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIDInLocal = associationIDIn;
vars.value.applicationInLocal = applicationIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getPHBalanceV2_BPVar = new OS.DataTypes.VariableHolder();
var sendBalanceNotFoundEmailVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_LogicVar = new OS.DataTypes.VariableHolder();
var createOrUpdateBalanceVar = new OS.DataTypes.VariableHolder();
var createPipeInformationVar = new OS.DataTypes.VariableHolder();
var listFilterBalanceVar = new OS.DataTypes.VariableHolder();
var cache_DisableByService2Var = new OS.DataTypes.VariableHolder();
var deleteAll_BALANCENEXTCHARGEDETAIL_LogicVar = new OS.DataTypes.VariableHolder();
var listFilterIsCreditVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigs_MBPVar = new OS.DataTypes.VariableHolder();
var createOrUpdateCreditBalanceVar = new OS.DataTypes.VariableHolder();
var getBalance_CheckCacheVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList))());
var getBalanceLinesVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_LINESRecordList))());
var getPageByCodeVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getPipeInformationVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList))());
var getPageByCode2Var = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV2_MBP$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage2
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Entering the action..."), "SELFCARE_MBP", callContext);
// EmptyPhoneNumber?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.phoneNumberInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
// Execute Action: LogMessage5
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After phonenumber validation..."), "SELFCARE_MBP", callContext);
// PageCodeEmpty?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.pageCodeInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
return OS.Flow.doWhileAsync(function () {
return false;
}, function () {
// Aggregate: GetPageByCode
var getPageByCodeAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCodeVar.value;
});
};
return getPageByCodeAggr().then(function () {
// GetPageByCode.Empty?
return OS.Flow.executeSequence(function () {
if((getPageByCodeVar.value.listOut.isEmpty)) {
// Execute Action: GetBalanceConfigs_MBP
return BALANCE_MBPController.default.getBalanceConfigs_MBP$Action(vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, callContext).then(function (value) {
getBalanceConfigs_MBPVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((getBalanceConfigs_MBPVar.value.successOut)) {
// Aggregate: GetPageByCode2
var getPageByCode2Aggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCode2Var.value;
});
};
return getPageByCode2Aggr().then(function () {
// GetPageByCode.Empty?
if((!(getPageByCode2Var.value.listOut.isEmpty))) {
return OS.Flow.breakAsync();
}

});
}

});
}).then(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
} else {
// Execute Action: LogMessage6
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Pagecode validation..."), "SELFCARE_MBP", callContext);
}

});
});
}).then(function () {
// Aggregate: GetBalanceLines
var getBalanceLinesAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_LINESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstPageCode = vars.value.pageCodeInLocal;
var qpstCellPhoneNumber = vars.value.phoneNumberInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23";
} else {
selectSql += "\"ENLocal_BALANCE_LINES\".\"Id\" o0, \"ENLocal_BALANCE_LINES\".\"BalanceGroupDescription\" o1, \"ENLocal_BALANCE_LINES\".\"AvailableAmount\" o2, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnit\" o3, \"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" o4, \"ENLocal_BALANCE_LINES\".\"ConsumedAmount\" o5, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnit\" o6, \"ENLocal_BALANCE_LINES\".\"TotalAmount\" o7, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnit\" o8, \"ENLocal_BALANCE_LINES\".\"Order\" o9, \"ENLocal_BALANCE_LINES\".\"DateTime\" o10, \"ENLocal_BALANCE_LINES\".\"PackageNumber\" o11, \"ENLocal_BALANCE_LINES\".\"IsCredit\" o12, \"ENLocal_BALANCE_LINES\".\"CreditDescription\" o13, \"ENLocal_BALANCE_LINES\".\"TagCode\" o14, \"ENLocal_BALANCE_LINES\".\"PageCode\" o15, \"ENLocal_BALANCE_LINES\".\"AvailableAmountFmt\" o16, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnitFmt\" o17, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountFmt\" o18, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnitFmt\" o19, \"ENLocal_BALANCE_LINES\".\"TotalAmountFmt\" o20, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnitFmt\" o21, \"ENLocal_BALANCE_LINES\".\"CacheExpirationDate\" o22, \"ENLocal_BALANCE_LINES\".\"ExpiryDate\" o23";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_LINES\" \"ENLocal_BALANCE_LINES\"";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" = :qpstCellPhoneNumber) AND (\"ENLocal_BALANCE_LINES\".\"PageCode\" = :qpstPageCode)";
argsList.add("qpstCellPhoneNumber", /*TEXT*/ 0, qpstCellPhoneNumber);
argsList.add("qpstPageCode", /*TEXT*/ 0, qpstPageCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_LINESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_LINESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceLinesVar.value;
});
};
return getBalanceLinesAggr().then(function () {
// Execute Action: GetBalance_CheckCache
return BALANCE_MBPController.default.getBalance_CheckCache$Action(vars.value.offerDetailInLocal, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, getBalanceLinesVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_LINESAttr.cacheExpirationDateAttr, callContext).then(function (value) {
getBalance_CheckCacheVar.value = value;
});
});
}).then(function () {
// Balances Empty?
if((!(getBalanceLinesVar.value.listOut.isEmpty))) {
// IsCacheInValid?
if((!(!(getBalance_CheckCacheVar.value.useCacheOut)))) {
// Success = True
outVars.value.successOut = true;
return OS.Flow.returnAsync(outVars.value);

}

}

// Execute Action: LogMessage7
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Cache validation..."), "SELFCARE_MBP", callContext);
// Execute Action: GetPHBalanceV2_BP
return controller.getPHBalanceV2_BP$ServerAction(vars.value.phoneNumberInLocal, vars.value.processInLocal, true, vars.value.offerDetailInLocal, vars.value.refreshTokenInLocal, vars.value.associationIDInLocal, vars.value.applicationInLocal, callContext).then(function (value) {
getPHBalanceV2_BPVar.value = value;
}).then(function () {
// Execute Action: LogMessage8
OS.SystemActions.logMessage((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After GetPHBalance Status:") + (getPHBalanceV2_BPVar.value.successOut ? "True" : "False")) + " Balances:") + (getPHBalanceV2_BPVar.value.balancesOut.length).toString()), "SELFCARE_MBP", callContext);
});
}).then(function () {
// NotSuccessfulIntegration?
return OS.Flow.executeSequence(function () {
if((!(getPHBalanceV2_BPVar.value.successOut))) {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(((vars.value.offerDetailInLocal) ? (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr) : (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.homepageBalanceInfoAttr)), callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
});
} else {
// Execute Action: DeleteAll_BALANCENEXTCHARGEDETAIL_Logic
return BALANCE_MBPController.default.deleteAll_BALANCENEXTCHARGEDETAIL_Logic$Action(callContext).then(function (value) {
deleteAll_BALANCENEXTCHARGEDETAIL_LogicVar.value = value;
}).then(function () {
// BalanceNextChargeDetail.Amount = GetPHBalanceV2_BP.NextChargeAmount
vars.value.balanceNextChargeDetailVar.amountAttr = getPHBalanceV2_BPVar.value.nextChargeAmountOut;
// BalanceNextChargeDetail.Date = GetPHBalanceV2_BP.NextChargeDate
vars.value.balanceNextChargeDetailVar.dateAttr = getPHBalanceV2_BPVar.value.nextChargeDateOut;
// Execute Action: CreateOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic
return BALANCE_MBPController.default.createOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_Logic$Action(vars.value.balanceNextChargeDetailVar, callContext).then(function (value) {
createOrUpdateLocal_BALANCE_NEXTCHARGEDETAIL_LogicVar.value = value;
});
}).then(function () {
return OS.Flow.executeSequence(function () {
if((!(vars.value.offerDetailInLocal))) {
// Execute Action: Cache_DisableByService2
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr, callContext).then(function (value) {
cache_DisableByService2Var.value = value;
});
}

});
}).then(function () {
// Execute Action: LogMessage
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "Before deleting old records..."), "SELFCARE_MBP", callContext);
// GetBalanceLines
// Foreach GetBalanceLines.List
callContext.iterationContext.registerIterationStart(getBalanceLinesVar.value.listOut);
return OS.Flow.tryFinally(function () {
var getBalanceLinesIterator = callContext.iterationContext.getIterator(getBalanceLinesVar.value.listOut);
var getBalanceLinesIndexMax = getBalanceLinesVar.value.listOut.length;
var getBalanceLinesIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getBalanceLinesIndex < getBalanceLinesVar.value.listOut.length)) && (getBalanceLinesIndexMax > 0));
}, function () {
getBalanceLinesIterator.currentRowNumber = getBalanceLinesIndex;
// Execute Action: DeleteBalanceLines
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.delete(getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr, callContext).then(function () {
// Aggregate: GetPipeInformation
var getPipeInformationAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploBalanceLineID = getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5";
} else {
selectSql += "\"ENLocal_PIPE_INFORMATION\".\"Id\" o0, \"ENLocal_PIPE_INFORMATION\".\"Tag\" o1, \"ENLocal_PIPE_INFORMATION\".\"Value\" o2, \"ENLocal_PIPE_INFORMATION\".\"DataTypeID\" o3, \"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" o4, \"ENLocal_PIPE_INFORMATION\".\"BalanceConfigID\" o5";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PIPE_INFORMATION\" \"ENLocal_PIPE_INFORMATION\"";
fromAndWhereSql += " WHERE ";
if (qploBalanceLineID != 0) {
fromAndWhereSql += "((\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" = :qploBalanceLineID) AND (\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NOT NULL))";
argsList.add("qploBalanceLineID", /*LONGINTEGER*/ 4, qploBalanceLineID);
} else {
fromAndWhereSql += "(\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PIPE_INFORMATIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPipeInformationVar.value;
});
};
return getPipeInformationAggr();
}).then(function () {
// GetPipes
// Foreach GetPipeInformation.List
callContext.iterationContext.registerIterationStart(getPipeInformationVar.value.listOut);
}).then(function () {
return OS.Flow.tryFinally(function () {
var getPipeInformationIterator = callContext.iterationContext.getIterator(getPipeInformationVar.value.listOut);
var getPipeInformationIndexMax = getPipeInformationVar.value.listOut.length;
var getPipeInformationIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getPipeInformationIndex < getPipeInformationVar.value.listOut.length)) && (getPipeInformationIndexMax > 0));
}, function () {
getPipeInformationIterator.currentRowNumber = getPipeInformationIndex;
// Execute Action: DeletePipeInformation
return BALANCE_MBPModel.entities.Local_PIPE_INFORMATION.delete(getPipeInformationVar.value.listOut.getItem(getPipeInformationIndex.valueOf()).local_PIPE_INFORMATIONAttr.idAttr, callContext).then(function () {
getPipeInformationIndexMax--;
getPipeInformationIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getPipeInformationVar.value.listOut);
});
}).then(function () {
getBalanceLinesIndexMax--;
getBalanceLinesIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getBalanceLinesVar.value.listOut);
});
}).then(function () {
// Execute Action: LogMessage3
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "After deleting old records..."), "SELFCARE_MBP", callContext);
// Execute Action: ListFilterIsCredit
listFilterIsCreditVar.value = OS.SystemActions.listFilter(getPHBalanceV2_BPVar.value.balancesOut, function (p) {
return p.isCreditBalanceAttr;
}, callContext);

// CreditList
// Foreach ListFilterIsCredit.FilteredList
callContext.iterationContext.registerIterationStart(listFilterIsCreditVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterIsCreditVar.value.filteredListOut);
var filteredListIndexMax = listFilterIsCreditVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterIsCreditVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(getPHBalanceV2_BPVar.value.balancesOut.getCurrent(callContext.iterationContext).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// TempLocalBalance = ListFilterIsCredit.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterIsCreditVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = 0;
target.isCreditAttr = true;
target.creditDescriptionAttr = source.labelAttr;
target.tagCodeAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
target.cacheExpirationDateAttr = getBalance_CheckCacheVar.value.cacheExpirationDateOut;
return target;
});
// Execute Action: CreateOrUpdateCreditBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateCreditBalanceVar.value = value;
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterIsCreditVar.value.filteredListOut);
});
}).then(function () {
// Execute Action: ListFilterBalance
listFilterBalanceVar.value = OS.SystemActions.listFilter(getPHBalanceV2_BPVar.value.balancesOut, function (p) {
return !(p.isCreditBalanceAttr);
}, callContext);

// BalanceList
// Foreach ListFilterBalance.FilteredList
callContext.iterationContext.registerIterationStart(listFilterBalanceVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterBalanceVar.value.filteredListOut);
var filteredListIndexMax = listFilterBalanceVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterBalanceVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// SetTagAux
// TagAux = ListFilterBalance.FilteredList.Current.Tag
vars.value.tagAuxVar = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr;
// PipeFound?
if(((OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false) >= 0))) {
// SetTag
// Tag = Substr
vars.value.tagVar = OS.BuiltinFunctions.substr(vars.value.tagAuxVar, 0, OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false));
} else {
// SetTag
// Tag = TagAux
vars.value.tagVar = vars.value.tagAuxVar;
}

// Aggregate: GetBalanceConfig
var getBalanceConfigAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstLocal_PAGE_Code = vars.value.pageCodeInLocal;
var qpstLocal_BALANCE_CONFIG_Tag = vars.value.tagVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7, \"ENLocal_PAGE\".\"Id\" o8, \"ENLocal_PAGE\".\"Label\" o9, \"ENLocal_PAGE\".\"Code\" o10, \"ENLocal_PAGE\".\"DateTime\" o11";
}
fromAndWhereSql += " FROM (\"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\" Inner JOIN \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\" ON (\"ENLocal_BALANCE_CONFIG\".\"PageID\" = \"ENLocal_PAGE\".\"Id\")) ";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_CONFIG\".\"Tag\" = :qpstLocal_BALANCE_CONFIG_Tag) AND (\"ENLocal_PAGE\".\"Code\" = :qpstLocal_PAGE_Code)";
argsList.add("qpstLocal_BALANCE_CONFIG_Tag", /*TEXT*/ 0, qpstLocal_BALANCE_CONFIG_Tag);
argsList.add("qpstLocal_PAGE_Code", /*TEXT*/ 0, qpstLocal_PAGE_Code);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigVar.value;
});
};
return getBalanceConfigAggr().then(function () {
// GetBalanceConfig.Empty?
return OS.Flow.executeSequence(function () {
if((getBalanceConfigVar.value.listOut.isEmpty)) {
// SetTagsNotFound
// BalanceNotFound.BalanceTag = Tag
vars.value.balanceNotFoundVar.balanceTagAttr = vars.value.tagVar;
// Execute Action: ListAppend
OS.SystemActions.listAppend(vars.value.balanceNotFound_RLVar, vars.value.balanceNotFoundVar, callContext);
} else {
// SetTempLocalBalance
// TempLocalBalance = ListFilterBalance.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).packageNumberAttr;
target.isCreditAttr = false;
target.creditDescriptionAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
target.cacheExpirationDateAttr = getBalance_CheckCacheVar.value.cacheExpirationDateOut;
return target;
});
// TempLocalBalance.TagCode = Tag
vars.value.tempLocalBalanceVar.tagCodeAttr = vars.value.tagVar;
// Execute Action: CreateOrUpdateBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateBalanceVar.value = value;
}).then(function () {
// Execute Action: CreatePipeInformation
return BALANCE_MBPController.default.createPipeInformation$Action(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr, createOrUpdateBalanceVar.value.idOut, getBalanceConfigVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIGAttr.idAttr, callContext).then(function (value) {
createPipeInformationVar.value = value;
});
});
}

});
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterBalanceVar.value.filteredListOut);
});
}).then(function () {
// TagsNotFoundEmpty?
return OS.Flow.executeSequence(function () {
if((!(vars.value.balanceNotFound_RLVar.isEmpty))) {
// Execute Action: SendBalanceNotFoundEmail
return controller.sendBalanceNotFoundEmail$ServerAction(vars.value.phoneNumberInLocal, getPageByCodeVar.value.listOut.getCurrent(callContext.iterationContext).local_PAGEAttr.labelAttr, vars.value.balanceNotFound_RLVar, vars.value.applicationInLocal, callContext).then(function (value) {
sendBalanceNotFoundEmailVar.value = value;
});
}

});
}).then(function () {
// Execute Action: LogMessage4
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After all logic..."), "SELFCARE_MBP", callContext);
});
}

});
});
}

});
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.GetBalanceLinesV2_MBP", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV2_MBP$vars", [{
name: "PhoneNumber",
attrName: "phoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OfferDetail",
attrName: "offerDetailInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PageCode",
attrName: "pageCodeInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationID",
attrName: "associationIDInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "TempLocalBalance",
attrName: "tempLocalBalanceVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BALANCE_LINESRec();
},
complexType: BALANCE_MBPModel.Local_BALANCE_LINESRec
}, {
name: "Tag",
attrName: "tagVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TagAux",
attrName: "tagAuxVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BalanceNotFound_RL",
attrName: "balanceNotFound_RLVar",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList
}, {
name: "BalanceNotFound",
attrName: "balanceNotFoundVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec();
},
complexType: BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec
}, {
name: "BalanceNextChargeDetail",
attrName: "balanceNextChargeDetailVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BALANCE_NEXT_CHARGE_DETAILRec();
},
complexType: BALANCE_MBPModel.Local_BALANCE_NEXT_CHARGE_DETAILRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV2_MBP$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceLinesV2_MBP$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, refreshTokenIn, associationIDIn, applicationIn, cacheValidationIntervalIn) {
phoneNumberIn = (phoneNumberIn === undefined) ? "" : phoneNumberIn;
processIn = (processIn === undefined) ? "" : processIn;
offerDetailIn = (offerDetailIn === undefined) ? false : offerDetailIn;
pageCodeIn = (pageCodeIn === undefined) ? "" : pageCodeIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIDIn = (associationIDIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIDIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceLinesV2_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(phoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(offerDetailIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(pageCodeIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIDIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceLinesV3_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.model$STR_BALANCE_NOT_FOUNDList", "BALANCE_MBP.controller$ServerAction.SendBalanceNotFoundEmail", "BALANCE_MBP.model$Local_BALANCE_LINESRecord", "BALANCE_MBP.controller$GetBalanceConfigs_MBP", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.controller$CreatePipeInformation", "BALANCE_MBP.controller$GetBalance_CheckCache", "BALANCE_MBP.model$STR_PHBALANCEV2List", "BALANCE_MBP.controller$ServerAction.GetPHBalanceV3_BP", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_BALANCE_LINESRec", "BALANCE_MBP.model$Local_BALANCE_LINESRecordList", "BALANCE_BP.model$STR_PHBALANCEV2Rec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRecordList", "BALANCE_BP.model$STR_BALANCE_NOT_FOUNDRec", "BALANCE_MBP.model$Local_PAGERecordList", "BALANCE_MBP.model$Local_PAGELocal_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRec", "BALANCE_MBP.model$Local_PAGERec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceLinesV3_MBP$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, refreshTokenIn, associationIDIn, applicationIn, cacheValidationIntervalIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV3_MBP$vars"))());
vars.value.phoneNumberInLocal = phoneNumberIn;
vars.value.processInLocal = processIn;
vars.value.offerDetailInLocal = offerDetailIn;
vars.value.pageCodeInLocal = pageCodeIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIDInLocal = associationIDIn;
vars.value.applicationInLocal = applicationIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var sendBalanceNotFoundEmailVar = new OS.DataTypes.VariableHolder();
var getPHBalanceV3_BPVar = new OS.DataTypes.VariableHolder();
var listFilterBalanceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateBalanceVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigs_MBPVar = new OS.DataTypes.VariableHolder();
var cache_DisableByService2Var = new OS.DataTypes.VariableHolder();
var createOrUpdateCreditBalanceVar = new OS.DataTypes.VariableHolder();
var listFilterIsCreditVar = new OS.DataTypes.VariableHolder();
var createPipeInformationVar = new OS.DataTypes.VariableHolder();
var getBalance_CheckCacheVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var getPageByCodeVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getBalanceConfigVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList))());
var getBalanceLinesVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_LINESRecordList))());
var getPageByCode2Var = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getPipeInformationVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV3_MBP$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage2
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Entering the action..."), "SELFCARE_MBP", callContext);
// EmptyPhoneNumber?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.phoneNumberInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
// Execute Action: LogMessage5
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After phonenumber validation..."), "SELFCARE_MBP", callContext);
// PageCodeEmpty?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.pageCodeInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
return OS.Flow.doWhileAsync(function () {
return false;
}, function () {
// Aggregate: GetPageByCode
var getPageByCodeAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCodeVar.value;
});
};
return getPageByCodeAggr().then(function () {
// GetPageByCode.Empty?
return OS.Flow.executeSequence(function () {
if((getPageByCodeVar.value.listOut.isEmpty)) {
// Execute Action: GetBalanceConfigs_MBP
return BALANCE_MBPController.default.getBalanceConfigs_MBP$Action(vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, callContext).then(function (value) {
getBalanceConfigs_MBPVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((getBalanceConfigs_MBPVar.value.successOut)) {
// Aggregate: GetPageByCode2
var getPageByCode2Aggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCode2Var.value;
});
};
return getPageByCode2Aggr().then(function () {
// GetPageByCode.Empty?
if((!(getPageByCode2Var.value.listOut.isEmpty))) {
return OS.Flow.breakAsync();
}

});
}

});
}).then(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
} else {
// Execute Action: LogMessage6
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Pagecode validation..."), "SELFCARE_MBP", callContext);
}

});
});
}).then(function () {
// Aggregate: GetBalanceLines
var getBalanceLinesAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_LINESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstPageCode = vars.value.pageCodeInLocal;
var qpstCellPhoneNumber = vars.value.phoneNumberInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23";
} else {
selectSql += "\"ENLocal_BALANCE_LINES\".\"Id\" o0, \"ENLocal_BALANCE_LINES\".\"BalanceGroupDescription\" o1, \"ENLocal_BALANCE_LINES\".\"AvailableAmount\" o2, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnit\" o3, \"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" o4, \"ENLocal_BALANCE_LINES\".\"ConsumedAmount\" o5, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnit\" o6, \"ENLocal_BALANCE_LINES\".\"TotalAmount\" o7, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnit\" o8, \"ENLocal_BALANCE_LINES\".\"Order\" o9, \"ENLocal_BALANCE_LINES\".\"DateTime\" o10, \"ENLocal_BALANCE_LINES\".\"PackageNumber\" o11, \"ENLocal_BALANCE_LINES\".\"IsCredit\" o12, \"ENLocal_BALANCE_LINES\".\"CreditDescription\" o13, \"ENLocal_BALANCE_LINES\".\"TagCode\" o14, \"ENLocal_BALANCE_LINES\".\"PageCode\" o15, \"ENLocal_BALANCE_LINES\".\"AvailableAmountFmt\" o16, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnitFmt\" o17, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountFmt\" o18, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnitFmt\" o19, \"ENLocal_BALANCE_LINES\".\"TotalAmountFmt\" o20, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnitFmt\" o21, \"ENLocal_BALANCE_LINES\".\"CacheExpirationDate\" o22, \"ENLocal_BALANCE_LINES\".\"ExpiryDate\" o23";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_LINES\" \"ENLocal_BALANCE_LINES\"";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" = :qpstCellPhoneNumber) AND (\"ENLocal_BALANCE_LINES\".\"PageCode\" = :qpstPageCode)";
argsList.add("qpstCellPhoneNumber", /*TEXT*/ 0, qpstCellPhoneNumber);
argsList.add("qpstPageCode", /*TEXT*/ 0, qpstPageCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_LINESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_LINESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceLinesVar.value;
});
};
return getBalanceLinesAggr().then(function () {
// Execute Action: GetBalance_CheckCache
return BALANCE_MBPController.default.getBalance_CheckCache$Action(vars.value.offerDetailInLocal, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, getBalanceLinesVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_LINESAttr.cacheExpirationDateAttr, callContext).then(function (value) {
getBalance_CheckCacheVar.value = value;
});
});
}).then(function () {
// Balances Empty?
if((!(getBalanceLinesVar.value.listOut.isEmpty))) {
// IsCacheInValid?
if((!(!(getBalance_CheckCacheVar.value.useCacheOut)))) {
// Success = True
outVars.value.successOut = true;
return OS.Flow.returnAsync(outVars.value);

}

}

// Execute Action: LogMessage7
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Cache validation..."), "SELFCARE_MBP", callContext);
// Execute Action: GetPHBalanceV3_BP
return controller.getPHBalanceV3_BP$ServerAction(vars.value.phoneNumberInLocal, vars.value.processInLocal, true, vars.value.offerDetailInLocal, vars.value.refreshTokenInLocal, vars.value.associationIDInLocal, vars.value.applicationInLocal, callContext).then(function (value) {
getPHBalanceV3_BPVar.value = value;
}).then(function () {
// Execute Action: LogMessage8
OS.SystemActions.logMessage((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After GetPHBalance Status:") + (getPHBalanceV3_BPVar.value.successOut ? "True" : "False")) + " Balances:") + (getPHBalanceV3_BPVar.value.balancesOut.length).toString()), "SELFCARE_MBP", callContext);
});
}).then(function () {
// NotSuccessfulIntegration?
return OS.Flow.executeSequence(function () {
if((!(getPHBalanceV3_BPVar.value.successOut))) {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(((vars.value.offerDetailInLocal) ? (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr) : (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.homepageBalanceInfoAttr)), callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
});
} else {
return OS.Flow.executeSequence(function () {
if((!(vars.value.offerDetailInLocal))) {
// Execute Action: Cache_DisableByService2
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr, callContext).then(function (value) {
cache_DisableByService2Var.value = value;
});
}

}).then(function () {
// Execute Action: LogMessage
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "Before deleting old records..."), "SELFCARE_MBP", callContext);
// GetBalanceLines
// Foreach GetBalanceLines.List
callContext.iterationContext.registerIterationStart(getBalanceLinesVar.value.listOut);
return OS.Flow.tryFinally(function () {
var getBalanceLinesIterator = callContext.iterationContext.getIterator(getBalanceLinesVar.value.listOut);
var getBalanceLinesIndexMax = getBalanceLinesVar.value.listOut.length;
var getBalanceLinesIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getBalanceLinesIndex < getBalanceLinesVar.value.listOut.length)) && (getBalanceLinesIndexMax > 0));
}, function () {
getBalanceLinesIterator.currentRowNumber = getBalanceLinesIndex;
// Execute Action: DeleteBalanceLines
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.delete(getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr, callContext).then(function () {
// Aggregate: GetPipeInformation
var getPipeInformationAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploBalanceLineID = getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5";
} else {
selectSql += "\"ENLocal_PIPE_INFORMATION\".\"Id\" o0, \"ENLocal_PIPE_INFORMATION\".\"Tag\" o1, \"ENLocal_PIPE_INFORMATION\".\"Value\" o2, \"ENLocal_PIPE_INFORMATION\".\"DataTypeID\" o3, \"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" o4, \"ENLocal_PIPE_INFORMATION\".\"BalanceConfigID\" o5";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PIPE_INFORMATION\" \"ENLocal_PIPE_INFORMATION\"";
fromAndWhereSql += " WHERE ";
if (qploBalanceLineID != 0) {
fromAndWhereSql += "((\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" = :qploBalanceLineID) AND (\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NOT NULL))";
argsList.add("qploBalanceLineID", /*LONGINTEGER*/ 4, qploBalanceLineID);
} else {
fromAndWhereSql += "(\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PIPE_INFORMATIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPipeInformationVar.value;
});
};
return getPipeInformationAggr();
}).then(function () {
// GetPipes
// Foreach GetPipeInformation.List
callContext.iterationContext.registerIterationStart(getPipeInformationVar.value.listOut);
}).then(function () {
return OS.Flow.tryFinally(function () {
var getPipeInformationIterator = callContext.iterationContext.getIterator(getPipeInformationVar.value.listOut);
var getPipeInformationIndexMax = getPipeInformationVar.value.listOut.length;
var getPipeInformationIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getPipeInformationIndex < getPipeInformationVar.value.listOut.length)) && (getPipeInformationIndexMax > 0));
}, function () {
getPipeInformationIterator.currentRowNumber = getPipeInformationIndex;
// Execute Action: DeletePipeInformation
return BALANCE_MBPModel.entities.Local_PIPE_INFORMATION.delete(getPipeInformationVar.value.listOut.getItem(getPipeInformationIndex.valueOf()).local_PIPE_INFORMATIONAttr.idAttr, callContext).then(function () {
getPipeInformationIndexMax--;
getPipeInformationIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getPipeInformationVar.value.listOut);
});
}).then(function () {
getBalanceLinesIndexMax--;
getBalanceLinesIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getBalanceLinesVar.value.listOut);
});
}).then(function () {
// Execute Action: LogMessage3
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "After deleting old records..."), "SELFCARE_MBP", callContext);
// Execute Action: ListFilterIsCredit
listFilterIsCreditVar.value = OS.SystemActions.listFilter(getPHBalanceV3_BPVar.value.balancesOut, function (p) {
return p.isCreditBalanceAttr;
}, callContext);

// CreditList
// Foreach ListFilterIsCredit.FilteredList
callContext.iterationContext.registerIterationStart(listFilterIsCreditVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterIsCreditVar.value.filteredListOut);
var filteredListIndexMax = listFilterIsCreditVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterIsCreditVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(getPHBalanceV3_BPVar.value.balancesOut.getCurrent(callContext.iterationContext).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// TempLocalBalance = ListFilterIsCredit.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterIsCreditVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = 0;
target.isCreditAttr = true;
target.creditDescriptionAttr = source.labelAttr;
target.tagCodeAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
target.cacheExpirationDateAttr = getBalance_CheckCacheVar.value.cacheExpirationDateOut;
return target;
});
// Execute Action: CreateOrUpdateCreditBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateCreditBalanceVar.value = value;
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterIsCreditVar.value.filteredListOut);
});
}).then(function () {
// Execute Action: ListFilterBalance
listFilterBalanceVar.value = OS.SystemActions.listFilter(getPHBalanceV3_BPVar.value.balancesOut, function (p) {
return !(p.isCreditBalanceAttr);
}, callContext);

// BalanceList
// Foreach ListFilterBalance.FilteredList
callContext.iterationContext.registerIterationStart(listFilterBalanceVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterBalanceVar.value.filteredListOut);
var filteredListIndexMax = listFilterBalanceVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterBalanceVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// SetTagAux
// TagAux = ListFilterBalance.FilteredList.Current.Tag
vars.value.tagAuxVar = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr;
// PipeFound?
if(((OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false) >= 0))) {
// SetTag
// Tag = Substr
vars.value.tagVar = OS.BuiltinFunctions.substr(vars.value.tagAuxVar, 0, OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false));
} else {
// SetTag
// Tag = TagAux
vars.value.tagVar = vars.value.tagAuxVar;
}

// Aggregate: GetBalanceConfig
var getBalanceConfigAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstLocal_PAGE_Code = vars.value.pageCodeInLocal;
var qpstLocal_BALANCE_CONFIG_Tag = vars.value.tagVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7, \"ENLocal_PAGE\".\"Id\" o8, \"ENLocal_PAGE\".\"Label\" o9, \"ENLocal_PAGE\".\"Code\" o10, \"ENLocal_PAGE\".\"DateTime\" o11";
}
fromAndWhereSql += " FROM (\"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\" Inner JOIN \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\" ON (\"ENLocal_BALANCE_CONFIG\".\"PageID\" = \"ENLocal_PAGE\".\"Id\")) ";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_CONFIG\".\"Tag\" = :qpstLocal_BALANCE_CONFIG_Tag) AND (\"ENLocal_PAGE\".\"Code\" = :qpstLocal_PAGE_Code)";
argsList.add("qpstLocal_BALANCE_CONFIG_Tag", /*TEXT*/ 0, qpstLocal_BALANCE_CONFIG_Tag);
argsList.add("qpstLocal_PAGE_Code", /*TEXT*/ 0, qpstLocal_PAGE_Code);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigVar.value;
});
};
return getBalanceConfigAggr().then(function () {
// GetBalanceConfig.Empty?
return OS.Flow.executeSequence(function () {
if((getBalanceConfigVar.value.listOut.isEmpty)) {
// SetTagsNotFound
// BalanceNotFound.BalanceTag = Tag
vars.value.balanceNotFoundVar.balanceTagAttr = vars.value.tagVar;
// Execute Action: ListAppend
OS.SystemActions.listAppend(vars.value.balanceNotFound_RLVar, vars.value.balanceNotFoundVar, callContext);
} else {
// SetTempLocalBalance
// TempLocalBalance = ListFilterBalance.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).packageNumberAttr;
target.isCreditAttr = false;
target.creditDescriptionAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
target.cacheExpirationDateAttr = getBalance_CheckCacheVar.value.cacheExpirationDateOut;
target.expiryDateAttr = source.expiryDateAttr;
return target;
});
// TempLocalBalance.TagCode = Tag
vars.value.tempLocalBalanceVar.tagCodeAttr = vars.value.tagVar;
// Execute Action: CreateOrUpdateBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateBalanceVar.value = value;
}).then(function () {
// Execute Action: CreatePipeInformation
return BALANCE_MBPController.default.createPipeInformation$Action(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr, createOrUpdateBalanceVar.value.idOut, getBalanceConfigVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIGAttr.idAttr, callContext).then(function (value) {
createPipeInformationVar.value = value;
});
});
}

});
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterBalanceVar.value.filteredListOut);
});
}).then(function () {
// TagsNotFoundEmpty?
return OS.Flow.executeSequence(function () {
if((!(vars.value.balanceNotFound_RLVar.isEmpty))) {
// Execute Action: SendBalanceNotFoundEmail
return controller.sendBalanceNotFoundEmail$ServerAction(vars.value.phoneNumberInLocal, getPageByCodeVar.value.listOut.getCurrent(callContext.iterationContext).local_PAGEAttr.labelAttr, vars.value.balanceNotFound_RLVar, vars.value.applicationInLocal, callContext).then(function (value) {
sendBalanceNotFoundEmailVar.value = value;
});
}

});
}).then(function () {
// Execute Action: LogMessage4
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After all logic..."), "SELFCARE_MBP", callContext);
});
}

});
});
}

});
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.GetBalanceLinesV3_MBP", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV3_MBP$vars", [{
name: "PhoneNumber",
attrName: "phoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OfferDetail",
attrName: "offerDetailInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PageCode",
attrName: "pageCodeInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationID",
attrName: "associationIDInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "TempLocalBalance",
attrName: "tempLocalBalanceVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BALANCE_LINESRec();
},
complexType: BALANCE_MBPModel.Local_BALANCE_LINESRec
}, {
name: "Tag",
attrName: "tagVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TagAux",
attrName: "tagAuxVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BalanceNotFound_RL",
attrName: "balanceNotFound_RLVar",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList
}, {
name: "BalanceNotFound",
attrName: "balanceNotFoundVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec();
},
complexType: BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV3_MBP$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceLinesV3_MBP$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, refreshTokenIn, associationIDIn, applicationIn, cacheValidationIntervalIn) {
phoneNumberIn = (phoneNumberIn === undefined) ? "" : phoneNumberIn;
processIn = (processIn === undefined) ? "" : processIn;
offerDetailIn = (offerDetailIn === undefined) ? false : offerDetailIn;
pageCodeIn = (pageCodeIn === undefined) ? "" : pageCodeIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIDIn = (associationIDIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIDIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceLinesV3_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(phoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(offerDetailIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(pageCodeIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIDIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBalanceLinesV4_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.model$Local_BALANCE_LINESRecord", "BALANCE_MBP.model$STR_PHBALANCEV2List", "BALANCE_MBP.controller$ServerAction.GetPHBalanceV3_BP", "BALANCE_MBP.controller$GetBalance_CheckCache", "BALANCE_MBP.controller$GetBalanceConfigs_MBP_v2", "BALANCE_MBP.controller$CreatePipeInformation", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$STR_BALANCE_NOT_FOUNDList", "BALANCE_MBP.controller$ServerAction.SendBalanceNotFoundEmail", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_BALANCE_LINESRec", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRecordList", "BALANCE_BP.model$STR_PHBALANCEV2Rec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.model$Local_BALANCE_LINESRecordList", "BALANCE_BP.model$STR_BALANCE_NOT_FOUNDRec", "BALANCE_MBP.model$Local_PAGERecordList", "BALANCE_MBP.model$Local_PAGELocal_BALANCE_CONFIGRecordList", "BALANCE_MBP.model$Local_PIPE_INFORMATIONRec", "BALANCE_MBP.model$Local_PAGERec", "BALANCE_MBP.model$Local_BALANCE_CONFIGRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceLinesV4_MBP$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, refreshTokenIn, associationIDIn, applicationIn, cacheValidationIntervalIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV4_MBP$vars"))());
vars.value.phoneNumberInLocal = phoneNumberIn;
vars.value.processInLocal = processIn;
vars.value.offerDetailInLocal = offerDetailIn;
vars.value.pageCodeInLocal = pageCodeIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIDInLocal = associationIDIn;
vars.value.applicationInLocal = applicationIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getPHBalanceV3_BPVar = new OS.DataTypes.VariableHolder();
var sendBalanceNotFoundEmailVar = new OS.DataTypes.VariableHolder();
var createOrUpdateCreditBalanceVar = new OS.DataTypes.VariableHolder();
var getBalance_CheckCacheVar = new OS.DataTypes.VariableHolder();
var getBalanceConfigs_MBP_v2Var = new OS.DataTypes.VariableHolder();
var createPipeInformationVar = new OS.DataTypes.VariableHolder();
var createOrUpdateBalanceVar = new OS.DataTypes.VariableHolder();
var listFilterIsCreditVar = new OS.DataTypes.VariableHolder();
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
var cache_DisableByService2Var = new OS.DataTypes.VariableHolder();
var listFilterBalanceVar = new OS.DataTypes.VariableHolder();
var getBalanceLinesVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BALANCE_LINESRecordList))());
var getPipeInformationVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList))());
var getPageByCodeVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getPageByCode2Var = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGERecordList))());
var getBalanceConfigVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV4_MBP$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage2
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Entering the action..."), "SELFCARE_MBP", callContext);
// EmptyPhoneNumber?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.phoneNumberInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
// Execute Action: LogMessage5
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After phonenumber validation..."), "SELFCARE_MBP", callContext);
// PageCodeEmpty?
return OS.Flow.executeSequence(function () {
if(((OS.BuiltinFunctions.trim(vars.value.pageCodeInLocal) === ""))) {
// Success = False
outVars.value.successOut = false;
} else {
return OS.Flow.doWhileAsync(function () {
return false;
}, function () {
// Aggregate: GetPageByCode
var getPageByCodeAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCodeVar.value;
});
};
return getPageByCodeAggr().then(function () {
// GetPageByCode.Empty?
return OS.Flow.executeSequence(function () {
if((getPageByCodeVar.value.listOut.isEmpty)) {
// Execute Action: GetBalanceConfigs_MBP_v2
return BALANCE_MBPController.default.getBalanceConfigs_MBP_v2$Action(vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, callContext).then(function (value) {
getBalanceConfigs_MBP_v2Var.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((getBalanceConfigs_MBP_v2Var.value.successOut)) {
// Aggregate: GetPageByCode2
var getPageByCode2Aggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstCode = vars.value.pageCodeInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_PAGE\".\"Id\" o0, \"ENLocal_PAGE\".\"Label\" o1, \"ENLocal_PAGE\".\"Code\" o2, \"ENLocal_PAGE\".\"DateTime\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_PAGE\".\"Code\" = :qpstCode)";
argsList.add("qpstCode", /*TEXT*/ 0, qpstCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPageByCode2Var.value;
});
};
return getPageByCode2Aggr().then(function () {
// GetPageByCode.Empty?
if((!(getPageByCode2Var.value.listOut.isEmpty))) {
return OS.Flow.breakAsync();
}

});
}

});
}).then(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
} else {
// Execute Action: LogMessage6
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Pagecode validation..."), "SELFCARE_MBP", callContext);
}

});
});
}).then(function () {
// Aggregate: GetBalanceLines
var getBalanceLinesAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BALANCE_LINESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstPageCode = vars.value.pageCodeInLocal;
var qpstCellPhoneNumber = vars.value.phoneNumberInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23";
} else {
selectSql += "\"ENLocal_BALANCE_LINES\".\"Id\" o0, \"ENLocal_BALANCE_LINES\".\"BalanceGroupDescription\" o1, \"ENLocal_BALANCE_LINES\".\"AvailableAmount\" o2, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnit\" o3, \"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" o4, \"ENLocal_BALANCE_LINES\".\"ConsumedAmount\" o5, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnit\" o6, \"ENLocal_BALANCE_LINES\".\"TotalAmount\" o7, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnit\" o8, \"ENLocal_BALANCE_LINES\".\"Order\" o9, \"ENLocal_BALANCE_LINES\".\"DateTime\" o10, \"ENLocal_BALANCE_LINES\".\"PackageNumber\" o11, \"ENLocal_BALANCE_LINES\".\"IsCredit\" o12, \"ENLocal_BALANCE_LINES\".\"CreditDescription\" o13, \"ENLocal_BALANCE_LINES\".\"TagCode\" o14, \"ENLocal_BALANCE_LINES\".\"PageCode\" o15, \"ENLocal_BALANCE_LINES\".\"AvailableAmountFmt\" o16, \"ENLocal_BALANCE_LINES\".\"AvailableAmountUnitFmt\" o17, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountFmt\" o18, \"ENLocal_BALANCE_LINES\".\"ConsumedAmountUnitFmt\" o19, \"ENLocal_BALANCE_LINES\".\"TotalAmountFmt\" o20, \"ENLocal_BALANCE_LINES\".\"TotalAmountUnitFmt\" o21, \"ENLocal_BALANCE_LINES\".\"CacheExpirationDate\" o22, \"ENLocal_BALANCE_LINES\".\"ExpiryDate\" o23";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BALANCE_LINES\" \"ENLocal_BALANCE_LINES\"";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_LINES\".\"CellPhoneNumber\" = :qpstCellPhoneNumber) AND (\"ENLocal_BALANCE_LINES\".\"PageCode\" = :qpstPageCode)";
argsList.add("qpstCellPhoneNumber", /*TEXT*/ 0, qpstCellPhoneNumber);
argsList.add("qpstPageCode", /*TEXT*/ 0, qpstPageCode);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BALANCE_LINESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_LINESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceLinesVar.value;
});
};
return getBalanceLinesAggr().then(function () {
// Execute Action: GetBalance_CheckCache
return BALANCE_MBPController.default.getBalance_CheckCache$Action(vars.value.offerDetailInLocal, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, getBalanceLinesVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_LINESAttr.cacheExpirationDateAttr, callContext).then(function (value) {
getBalance_CheckCacheVar.value = value;
});
});
}).then(function () {
// Balances Empty?
if((!(getBalanceLinesVar.value.listOut.isEmpty))) {
// IsCacheInValid?
if((!(!(getBalance_CheckCacheVar.value.useCacheOut)))) {
// Success = True
outVars.value.successOut = true;
return OS.Flow.returnAsync(outVars.value);

}

}

// Execute Action: LogMessage7
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After Cache validation..."), "SELFCARE_MBP", callContext);
// Execute Action: GetPHBalanceV3_BP
return controller.getPHBalanceV3_BP$ServerAction(vars.value.phoneNumberInLocal, vars.value.processInLocal, true, vars.value.offerDetailInLocal, vars.value.refreshTokenInLocal, vars.value.associationIDInLocal, vars.value.applicationInLocal, callContext).then(function (value) {
getPHBalanceV3_BPVar.value = value;
}).then(function () {
// Execute Action: LogMessage8
OS.SystemActions.logMessage((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After GetPHBalance Status:") + (getPHBalanceV3_BPVar.value.successOut ? "True" : "False")) + " Balances:") + (getPHBalanceV3_BPVar.value.balancesOut.length).toString()), "SELFCARE_MBP", callContext);
});
}).then(function () {
// NotSuccessfulIntegration?
return OS.Flow.executeSequence(function () {
if((!(getPHBalanceV3_BPVar.value.successOut))) {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(((vars.value.offerDetailInLocal) ? (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr) : (BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.homepageBalanceInfoAttr)), callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
});
} else {
return OS.Flow.executeSequence(function () {
if((!(vars.value.offerDetailInLocal))) {
// Execute Action: Cache_DisableByService2
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr, callContext).then(function (value) {
cache_DisableByService2Var.value = value;
});
}

}).then(function () {
// Execute Action: LogMessage
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "Before deleting old records..."), "SELFCARE_MBP", callContext);
// GetBalanceLines
// Foreach GetBalanceLines.List
callContext.iterationContext.registerIterationStart(getBalanceLinesVar.value.listOut);
return OS.Flow.tryFinally(function () {
var getBalanceLinesIterator = callContext.iterationContext.getIterator(getBalanceLinesVar.value.listOut);
var getBalanceLinesIndexMax = getBalanceLinesVar.value.listOut.length;
var getBalanceLinesIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getBalanceLinesIndex < getBalanceLinesVar.value.listOut.length)) && (getBalanceLinesIndexMax > 0));
}, function () {
getBalanceLinesIterator.currentRowNumber = getBalanceLinesIndex;
// Execute Action: DeleteBalanceLines
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.delete(getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr, callContext).then(function () {
// Aggregate: GetPipeInformation
var getPipeInformationAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploBalanceLineID = getBalanceLinesVar.value.listOut.getItem(getBalanceLinesIndex.valueOf()).local_BALANCE_LINESAttr.idAttr;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5";
} else {
selectSql += "\"ENLocal_PIPE_INFORMATION\".\"Id\" o0, \"ENLocal_PIPE_INFORMATION\".\"Tag\" o1, \"ENLocal_PIPE_INFORMATION\".\"Value\" o2, \"ENLocal_PIPE_INFORMATION\".\"DataTypeID\" o3, \"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" o4, \"ENLocal_PIPE_INFORMATION\".\"BalanceConfigID\" o5";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_PIPE_INFORMATION\" \"ENLocal_PIPE_INFORMATION\"";
fromAndWhereSql += " WHERE ";
if (qploBalanceLineID != 0) {
fromAndWhereSql += "((\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" = :qploBalanceLineID) AND (\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NOT NULL))";
argsList.add("qploBalanceLineID", /*LONGINTEGER*/ 4, qploBalanceLineID);
} else {
fromAndWhereSql += "(\"ENLocal_PIPE_INFORMATION\".\"BalanceLineID\" IS NULL)";
}
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PIPE_INFORMATIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_PIPE_INFORMATIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getPipeInformationVar.value;
});
};
return getPipeInformationAggr();
}).then(function () {
// GetPipes
// Foreach GetPipeInformation.List
callContext.iterationContext.registerIterationStart(getPipeInformationVar.value.listOut);
}).then(function () {
return OS.Flow.tryFinally(function () {
var getPipeInformationIterator = callContext.iterationContext.getIterator(getPipeInformationVar.value.listOut);
var getPipeInformationIndexMax = getPipeInformationVar.value.listOut.length;
var getPipeInformationIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getPipeInformationIndex < getPipeInformationVar.value.listOut.length)) && (getPipeInformationIndexMax > 0));
}, function () {
getPipeInformationIterator.currentRowNumber = getPipeInformationIndex;
// Execute Action: DeletePipeInformation
return BALANCE_MBPModel.entities.Local_PIPE_INFORMATION.delete(getPipeInformationVar.value.listOut.getItem(getPipeInformationIndex.valueOf()).local_PIPE_INFORMATIONAttr.idAttr, callContext).then(function () {
getPipeInformationIndexMax--;
getPipeInformationIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getPipeInformationVar.value.listOut);
});
}).then(function () {
getBalanceLinesIndexMax--;
getBalanceLinesIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getBalanceLinesVar.value.listOut);
});
}).then(function () {
// Execute Action: LogMessage3
OS.SystemActions.logMessage((((((((((((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "Phone Number: ") + vars.value.phoneNumberInLocal) + "\r\n") + "Page: ") + vars.value.pageCodeInLocal) + "\r\n") + "Process: ") + vars.value.processInLocal) + "\r\n") + "After deleting old records..."), "SELFCARE_MBP", callContext);
// Execute Action: ListFilterIsCredit
listFilterIsCreditVar.value = OS.SystemActions.listFilter(getPHBalanceV3_BPVar.value.balancesOut, function (p) {
return p.isCreditBalanceAttr;
}, callContext);

// CreditList
// Foreach ListFilterIsCredit.FilteredList
callContext.iterationContext.registerIterationStart(listFilterIsCreditVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterIsCreditVar.value.filteredListOut);
var filteredListIndexMax = listFilterIsCreditVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterIsCreditVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(getPHBalanceV3_BPVar.value.balancesOut.getCurrent(callContext.iterationContext).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// TempLocalBalance = ListFilterIsCredit.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterIsCreditVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = 0;
target.isCreditAttr = true;
target.creditDescriptionAttr = source.labelAttr;
target.tagCodeAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
target.cacheExpirationDateAttr = getBalance_CheckCacheVar.value.cacheExpirationDateOut;
return target;
});
// Execute Action: CreateOrUpdateCreditBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateCreditBalanceVar.value = value;
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterIsCreditVar.value.filteredListOut);
});
}).then(function () {
// Execute Action: ListFilterBalance
listFilterBalanceVar.value = OS.SystemActions.listFilter(getPHBalanceV3_BPVar.value.balancesOut, function (p) {
return !(p.isCreditBalanceAttr);
}, callContext);

// BalanceList
// Foreach ListFilterBalance.FilteredList
callContext.iterationContext.registerIterationStart(listFilterBalanceVar.value.filteredListOut);
return OS.Flow.tryFinally(function () {
var filteredListIterator = callContext.iterationContext.getIterator(listFilterBalanceVar.value.filteredListOut);
var filteredListIndexMax = listFilterBalanceVar.value.filteredListOut.length;
var filteredListIndex = 0;
return OS.Flow.whileAsync(function () {
return (((filteredListIndex < listFilterBalanceVar.value.filteredListOut.length)) && (filteredListIndexMax > 0));
}, function () {
filteredListIterator.currentRowNumber = filteredListIndex;
// BallanceGroupId.IsNull?
return OS.Flow.executeSequence(function () {
if((!(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).balanceGroupIdAttr.equals(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier()))))) {
// SetTagAux
// TagAux = ListFilterBalance.FilteredList.Current.Tag
vars.value.tagAuxVar = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr;
// PipeFound?
if(((OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false) >= 0))) {
// SetTag
// Tag = Substr
vars.value.tagVar = OS.BuiltinFunctions.substr(vars.value.tagAuxVar, 0, OS.BuiltinFunctions.index(vars.value.tagAuxVar, "|", 0, false, false));
} else {
// SetTag
// Tag = TagAux
vars.value.tagVar = vars.value.tagAuxVar;
}

// Aggregate: GetBalanceConfig
var getBalanceConfigAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstLocal_PAGE_Code = vars.value.pageCodeInLocal;
var qpstLocal_BALANCE_CONFIG_Tag = vars.value.tagVar;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11";
} else {
selectSql += "\"ENLocal_BALANCE_CONFIG\".\"Id\" o0, \"ENLocal_BALANCE_CONFIG\".\"Tag\" o1, \"ENLocal_BALANCE_CONFIG\".\"BalanceName\" o2, \"ENLocal_BALANCE_CONFIG\".\"DateTime\" o3, \"ENLocal_BALANCE_CONFIG\".\"HideWhenBalanceIsZero\" o4, \"ENLocal_BALANCE_CONFIG\".\"CardTypeID\" o5, \"ENLocal_BALANCE_CONFIG\".\"GraphTypeID\" o6, \"ENLocal_BALANCE_CONFIG\".\"PageID\" o7, \"ENLocal_PAGE\".\"Id\" o8, \"ENLocal_PAGE\".\"Label\" o9, \"ENLocal_PAGE\".\"Code\" o10, \"ENLocal_PAGE\".\"DateTime\" o11";
}
fromAndWhereSql += " FROM (\"MAIN\".\"OSUSR_qsx_Local_BALANCE_CONFIG\" \"ENLocal_BALANCE_CONFIG\" Inner JOIN \"MAIN\".\"OSUSR_qsx_Local_PAGE\" \"ENLocal_PAGE\" ON (\"ENLocal_BALANCE_CONFIG\".\"PageID\" = \"ENLocal_PAGE\".\"Id\")) ";
fromAndWhereSql += " WHERE (\"ENLocal_BALANCE_CONFIG\".\"Tag\" = :qpstLocal_BALANCE_CONFIG_Tag) AND (\"ENLocal_PAGE\".\"Code\" = :qpstLocal_PAGE_Code)";
argsList.add("qpstLocal_BALANCE_CONFIG_Tag", /*TEXT*/ 0, qpstLocal_BALANCE_CONFIG_Tag);
argsList.add("qpstLocal_PAGE_Code", /*TEXT*/ 0, qpstLocal_PAGE_Code);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_PAGELocal_BALANCE_CONFIGRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BALANCE_CONFIGAttr",
"local_PAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getBalanceConfigVar.value;
});
};
return getBalanceConfigAggr().then(function () {
// GetBalanceConfig.Empty?
return OS.Flow.executeSequence(function () {
if((getBalanceConfigVar.value.listOut.isEmpty)) {
// SetTagsNotFound
// BalanceNotFound.BalanceTag = Tag
vars.value.balanceNotFoundVar.balanceTagAttr = vars.value.tagVar;
// Execute Action: ListAppend
OS.SystemActions.listAppend(vars.value.balanceNotFound_RLVar, vars.value.balanceNotFoundVar, callContext);
} else {
// SetTempLocalBalance
// TempLocalBalance = ListFilterBalance.FilteredList.Current
vars.value.tempLocalBalanceVar = OS.DataTypes.JSConversions.typeConvertRecord(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()), new BALANCE_MBPModel.Local_BALANCE_LINESRec(), function (source, target) {
target.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.balanceGroupDescriptionAttr = source.balanceGroupDescriptionAttr;
target.availableAmountAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountAttr);
target.availableAmountUnitAttr = source.unitAttr;
target.cellPhoneNumberAttr = vars.value.phoneNumberInLocal;
target.consumedAmountAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountAttr);
target.consumedAmountUnitAttr = source.unitAttr;
target.totalAmountAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountAttr);
target.totalAmountUnitAttr = source.unitAttr;
target.orderAttr = source.orderAttr;
target.dateTimeAttr = OS.BuiltinFunctions.currDateTime();
target.packageNumberAttr = listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).packageNumberAttr;
target.isCreditAttr = false;
target.creditDescriptionAttr = "";
target.pageCodeAttr = vars.value.pageCodeInLocal;
target.availableAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.availableAmountFmtAttr);
target.availableAmountUnitFmtAttr = source.availableAmountUnitFmtAttr;
target.consumedAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.consumedAmountFmtAttr);
target.consumedAmountUnitFmtAttr = source.consumedAmountUnitFmtAttr;
target.totalAmountFmtAttr = OS.BuiltinFunctions.decimalToText(source.totalAmountFmtAttr);
target.totalAmountUnitFmtAttr = source.totalAmountUnitFmtAttr;
target.cacheExpirationDateAttr = getBalance_CheckCacheVar.value.cacheExpirationDateOut;
target.expiryDateAttr = source.expiryDateAttr;
return target;
});
// TempLocalBalance.TagCode = Tag
vars.value.tempLocalBalanceVar.tagCodeAttr = vars.value.tagVar;
// Execute Action: CreateOrUpdateBalance
return BALANCE_MBPModel.entities.Local_BALANCE_LINES.createOrUpdate(BALANCE_MBPModel.Local_BALANCE_LINESRecord.fromStructure(vars.value.tempLocalBalanceVar), callContext).then(function (value) {
createOrUpdateBalanceVar.value = value;
}).then(function () {
// Execute Action: CreatePipeInformation
return BALANCE_MBPController.default.createPipeInformation$Action(listFilterBalanceVar.value.filteredListOut.getItem(filteredListIndex.valueOf()).tagAttr, createOrUpdateBalanceVar.value.idOut, getBalanceConfigVar.value.listOut.getCurrent(callContext.iterationContext).local_BALANCE_CONFIGAttr.idAttr, callContext).then(function (value) {
createPipeInformationVar.value = value;
});
});
}

});
});
}

}).then(function () {
filteredListIndexMax--;
filteredListIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(listFilterBalanceVar.value.filteredListOut);
});
}).then(function () {
// TagsNotFoundEmpty?
return OS.Flow.executeSequence(function () {
if((!(vars.value.balanceNotFound_RLVar.isEmpty))) {
// Execute Action: SendBalanceNotFoundEmail
return controller.sendBalanceNotFoundEmail$ServerAction(vars.value.phoneNumberInLocal, getPageByCodeVar.value.listOut.getCurrent(callContext.iterationContext).local_PAGEAttr.labelAttr, vars.value.balanceNotFound_RLVar, vars.value.applicationInLocal, callContext).then(function (value) {
sendBalanceNotFoundEmailVar.value = value;
});
}

});
}).then(function () {
// Execute Action: LogMessage4
OS.SystemActions.logMessage(((((("Date Time: " + OS.BuiltinFunctions.dateTimeToText(OS.BuiltinFunctions.currDateTime())) + "\r\n") + "Action: GetBalanceLines ") + "\r\n") + "After all logic..."), "SELFCARE_MBP", callContext);
});
}

});
});
}

});
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.GetBalanceLinesV4_MBP", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV4_MBP$vars", [{
name: "PhoneNumber",
attrName: "phoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OfferDetail",
attrName: "offerDetailInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PageCode",
attrName: "pageCodeInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationID",
attrName: "associationIDInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "TempLocalBalance",
attrName: "tempLocalBalanceVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BALANCE_LINESRec();
},
complexType: BALANCE_MBPModel.Local_BALANCE_LINESRec
}, {
name: "Tag",
attrName: "tagVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TagAux",
attrName: "tagAuxVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BalanceNotFound_RL",
attrName: "balanceNotFound_RLVar",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList();
},
complexType: BALANCE_MBPModel.STR_BALANCE_NOT_FOUNDList
}, {
name: "BalanceNotFound",
attrName: "balanceNotFoundVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec();
},
complexType: BALANCE_BPModel.STR_BALANCE_NOT_FOUNDRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetBalanceLinesV4_MBP$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getBalanceLinesV4_MBP$Action = function (phoneNumberIn, processIn, offerDetailIn, pageCodeIn, refreshTokenIn, associationIDIn, applicationIn, cacheValidationIntervalIn) {
phoneNumberIn = (phoneNumberIn === undefined) ? "" : phoneNumberIn;
processIn = (processIn === undefined) ? "" : processIn;
offerDetailIn = (offerDetailIn === undefined) ? false : offerDetailIn;
pageCodeIn = (pageCodeIn === undefined) ? "" : pageCodeIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIDIn = (associationIDIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIDIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBalanceLinesV4_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(phoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(offerDetailIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(pageCodeIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIDIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetBLMBalanceList", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_BP.model$STR_KANGURU_CONSUMPTIONSRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.controller$GetBLMBalanceList", "BALANCE_MBP.controller$GetKanguruConsumptions", "BALANCE_MBP.model$Local_BLM_BALANCERecordList", "BALANCE_MBP.model$Local_BLM_BALANCERec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBLMBalanceList$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, serviceIdIn, associationIdIn, isSecondTryIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBLMBalanceList$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.serviceIdInLocal = serviceIdIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.isSecondTryInLocal = isSecondTryIn;
var getBLMBalanceListVar = new OS.DataTypes.VariableHolder();
var getKanguruConsumptionsVar = new OS.DataTypes.VariableHolder();
var getLocalBLMBALANCESByServiceIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BLM_BALANCERecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBLMBalanceList$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetKanguruConsumptions
return BALANCE_MBPController.default.getKanguruConsumptions$Action(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.associationIdInLocal, vars.value.serviceIdInLocal, "Consumptions", callContext).then(function (value) {
getKanguruConsumptionsVar.value = value;
}).then(function () {
// Success?
return OS.Flow.executeSequence(function () {
if((getKanguruConsumptionsVar.value.successOut)) {
// Aggregate: GetLocalBLMBALANCESByServiceId
var getLocalBLMBALANCESByServiceIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BLM_BALANCERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstServiceId = vars.value.serviceIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55";
} else {
selectSql += "\"ENLocal_BLM_BALANCE\".\"Id\" o0, \"ENLocal_BLM_BALANCE\".\"ServiceId\" o1, \"ENLocal_BLM_BALANCE\".\"IsUnlimited\" o2, \"ENLocal_BLM_BALANCE\".\"AvailableValueNEW\" o3, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnit\" o4, \"ENLocal_BLM_BALANCE\".\"SpentValueNEW\" o5, \"ENLocal_BLM_BALANCE\".\"SpentValueUnit\" o6, \"ENLocal_BLM_BALANCE\".\"TotalValueNEW\" o7, \"ENLocal_BLM_BALANCE\".\"TotalValueUnit\" o8, \"ENLocal_BLM_BALANCE\".\"ShowPlafondExtra\" o9, \"ENLocal_BLM_BALANCE\".\"PlafondExtraNEW\" o10, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnit\" o11, \"ENLocal_BLM_BALANCE\".\"ShowMaxValueToRestablish\" o12, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishNEW\" o13, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnit\" o14, \"ENLocal_BLM_BALANCE\".\"ShowUETraffic\" o15, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountNEW\" o16, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnit\" o17, \"ENLocal_BLM_BALANCE\".\"UERoamingExpireDate\" o18, \"ENLocal_BLM_BALANCE\".\"ShowRMTraffic\" o19, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountNEW\" o20, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnit\" o21, \"ENLocal_BLM_BALANCE\".\"RMRoamingExpireDate\" o22, \"ENLocal_BLM_BALANCE\".\"ShowHappyHour\" o23, \"ENLocal_BLM_BALANCE\".\"HappyHourValueNEW\" o24, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnit\" o25, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishFmtNEW\" o26, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnitFmt\" o27, \"ENLocal_BLM_BALANCE\".\"PlafondExtraFmtNEW\" o28, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnitFmt\" o29, \"ENLocal_BLM_BALANCE\".\"AvailableValueFmtNEW\" o30, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnitFmt\" o31, \"ENLocal_BLM_BALANCE\".\"SpentValueFmtNEW\" o32, \"ENLocal_BLM_BALANCE\".\"SpentValueUnitFmt\" o33, \"ENLocal_BLM_BALANCE\".\"TotalValueFmtNEW\" o34, \"ENLocal_BLM_BALANCE\".\"TotalValueUnitFmt\" o35, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountFmtNEW\" o36, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnitFmt\" o37, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountFmtNEW\" o38, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnitFmt\" o39, \"ENLocal_BLM_BALANCE\".\"HappyHourValueFmtNEW\" o40, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnitFmt\" o41, \"ENLocal_BLM_BALANCE\".\"CacheExpirationDate\" o42, \"ENLocal_BLM_BALANCE\".\"ShowRecurrPack\" o43, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmt\" o44, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmtUnit\" o45, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmt\" o46, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnit\" o47, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmt\" o48, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnit\" o49, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountFmt\" o50, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountUnitFmt\" o51, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtFmt\" o52, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnitFmt\" o53, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtFmt\" o54, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnitFm\" o55";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BLM_BALANCE\" \"ENLocal_BLM_BALANCE\"";
fromAndWhereSql += " WHERE (\"ENLocal_BLM_BALANCE\".\"ServiceId\" = :qpstServiceId)";
argsList.add("qpstServiceId", /*TEXT*/ 0, qpstServiceId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BLM_BALANCERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BLM_BALANCEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalBLMBALANCESByServiceIdVar.value;
});
};
return getLocalBLMBALANCESByServiceIdAggr().then(function () {
// EmptyList?
if((!(getLocalBLMBALANCESByServiceIdVar.value.listOut.isEmpty))) {
// BLMBalance
// BLMBalance.AvailableValue = TextToDecimal
outVars.value.bLMBalanceOut.availableValueAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.availableValueNEWAttr);
// BLMBalance.SpentValue = TextToDecimal
outVars.value.bLMBalanceOut.spentValueAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.spentValueNEWAttr);
// BLMBalance.TotalValue = TextToDecimal
outVars.value.bLMBalanceOut.totalValueAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.totalValueNEWAttr);
// BLMBalance.MSISDN = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ServiceId
outVars.value.bLMBalanceOut.mSISDNAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.serviceIdAttr;
// BLMBalance.UERoamingExpireDate = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.UERoamingExpireDate
outVars.value.bLMBalanceOut.uERoamingExpireDateAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uERoamingExpireDateAttr;
// BLMBalance.MaxValueToRestablish = TextToDecimal
outVars.value.bLMBalanceOut.maxValueToRestablishAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.maxValueToRestablishNEWAttr);
// BLMBalance.PlafondExtra = TextToDecimal
outVars.value.bLMBalanceOut.plafondExtraAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.plafondExtraNEWAttr);
// BLMBalance.UETrafficAmount = TextToDecimal
outVars.value.bLMBalanceOut.uETrafficAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uETrafficAmountNEWAttr);
// BLMBalance.IsUnlimited = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.IsUnlimited
outVars.value.bLMBalanceOut.isUnlimitedAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.isUnlimitedAttr;
// BLMBalance.PlafondExtraUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.PlafondExtraUnit
outVars.value.bLMBalanceOut.plafondExtraUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.plafondExtraUnitAttr;
// BLMBalance.AvailableValueUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.AvailableValueUnit
outVars.value.bLMBalanceOut.availableValueUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.availableValueUnitAttr;
// BLMBalance.SpentValueUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.SpentValueUnit
outVars.value.bLMBalanceOut.spentValueUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.spentValueUnitAttr;
// BLMBalance.TotalValueUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.TotalValueUnit
outVars.value.bLMBalanceOut.totalValueUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.totalValueUnitAttr;
// BLMBalance.UETrafficAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.UETrafficAmountUnit
outVars.value.bLMBalanceOut.uETrafficAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uETrafficAmountUnitAttr;
// BLMBalance.MaxValueToRestablishUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.MaxValueToRestablishUnit
outVars.value.bLMBalanceOut.maxValueToRestablishUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.maxValueToRestablishUnitAttr;
// BLMBalance.RMTrafficAmount = TextToDecimal
outVars.value.bLMBalanceOut.rMTrafficAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMTrafficAmountNEWAttr);
// BLMBalance.RMTrafficAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RMTrafficAmountUnit
outVars.value.bLMBalanceOut.rMTrafficAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMTrafficAmountUnitAttr;
// BLMBalance.RMRoamingExpireDate = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RMRoamingExpireDate
outVars.value.bLMBalanceOut.rMRoamingExpireDateAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMRoamingExpireDateAttr;
// BLMBalance.HappyHourValueUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.HappyHourValueUnit
outVars.value.bLMBalanceOut.happyHourValueUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.happyHourValueUnitAttr;
// BLMBalance.ShowMaxValueToRestablish = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowMaxValueToRestablish
outVars.value.bLMBalanceOut.showMaxValueToRestablishAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showMaxValueToRestablishAttr;
// BLMBalance.ShowPlafondExtra = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowPlafondExtra
outVars.value.bLMBalanceOut.showPlafondExtraAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showPlafondExtraAttr;
// BLMBalance.ShowUETraffic = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowUETraffic
outVars.value.bLMBalanceOut.showUETrafficAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showUETrafficAttr;
// BLMBalance.ShowRMTraffic = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowRMTraffic
outVars.value.bLMBalanceOut.showRMTrafficAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showRMTrafficAttr;
// BLMBalance.ShowHappyHour = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowHappyHour
outVars.value.bLMBalanceOut.showHappyHourAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showHappyHourAttr;
// BLMBalance.HappyHourValue = TextToDecimal
outVars.value.bLMBalanceOut.happyHourValueAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.happyHourValueNEWAttr);
// BLMBalance.MaxValueToRestablishFmt = TextToDecimal
outVars.value.bLMBalanceOut.maxValueToRestablishFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.maxValueToRestablishFmtNEWAttr);
// BLMBalance.MaxValueToRestablishUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.MaxValueToRestablishUnitFmt
outVars.value.bLMBalanceOut.maxValueToRestablishUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.maxValueToRestablishUnitFmtAttr;
// BLMBalance.PlafondExtraFmt = TextToDecimal
outVars.value.bLMBalanceOut.plafondExtraFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.plafondExtraFmtNEWAttr);
// BLMBalance.PlafondExtraUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.PlafondExtraUnitFmt
outVars.value.bLMBalanceOut.plafondExtraUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.plafondExtraUnitFmtAttr;
// BLMBalance.AvailableValueFmt = TextToDecimal
outVars.value.bLMBalanceOut.availableValueFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.availableValueFmtNEWAttr);
// BLMBalance.AvailableValueUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.AvailableValueUnitFmt
outVars.value.bLMBalanceOut.availableValueUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.availableValueUnitFmtAttr;
// BLMBalance.SpentValueFmt = TextToDecimal
outVars.value.bLMBalanceOut.spentValueFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.spentValueFmtNEWAttr);
// BLMBalance.SpentValueUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.SpentValueUnitFmt
outVars.value.bLMBalanceOut.spentValueUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.spentValueUnitFmtAttr;
// BLMBalance.TotalValueFmt = TextToDecimal
outVars.value.bLMBalanceOut.totalValueFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.totalValueFmtNEWAttr);
// BLMBalance.TotalValueUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.TotalValueUnitFmt
outVars.value.bLMBalanceOut.totalValueUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.totalValueUnitFmtAttr;
// BLMBalance.UETrafficAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.uETrafficAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uETrafficAmountFmtNEWAttr);
// BLMBalance.UETrafficAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.UETrafficAmountUnitFmt
outVars.value.bLMBalanceOut.uETrafficAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uETrafficAmountUnitFmtAttr;
// BLMBalance.RMTrafficAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.rMTrafficAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMTrafficAmountFmtNEWAttr);
// BLMBalance.RMTrafficAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RMTrafficAmountUnitFmt
outVars.value.bLMBalanceOut.rMTrafficAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMTrafficAmountUnitFmtAttr;
// BLMBalance.HappyHourValueFmt = TextToDecimal
outVars.value.bLMBalanceOut.happyHourValueFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.happyHourValueFmtNEWAttr);
// BLMBalance.HappyHourValueUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.HappyHourValueUnitFmt
outVars.value.bLMBalanceOut.happyHourValueUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.happyHourValueUnitFmtAttr;
// BLMBalance.ShowRecurrentPackage = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowRecurrPack
outVars.value.bLMBalanceOut.showRecurrentPackageAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showRecurrPackAttr;
// BLMBalance.RecurrentPackageAmount = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAmtAttr);
// BLMBalance.RecurrentPackageAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackAmtUnit
outVars.value.bLMBalanceOut.recurrentPackageAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAmtUnitAttr;
// BLMBalance.RecurrentPackageInitialAmount = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageInitialAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackInitialAmtAttr);
// BLMBalance.RecurrentPackageInitialAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackInitialAmtUnit
outVars.value.bLMBalanceOut.recurrentPackageInitialAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackInitialAmtUnitAttr;
// BLMBalance.RecurrentPackageAvailableAmount = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageAvailableAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAvailableAmtAttr);
// BLMBalance.RecurrentPackageAvailableAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackAvailableAmtUnit
outVars.value.bLMBalanceOut.recurrentPackageAvailableAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAvailableAmtUnitAttr;
// BLMBalance.RecurrentPackageAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAmountFmtAttr);
// BLMBalance.RecurrentPackageAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackAmountUnitFmt
outVars.value.bLMBalanceOut.recurrentPackageAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAmountUnitFmtAttr;
// BLMBalance.RecurrentPackageInitialAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageInitialAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackInitialAmtFmtAttr);
// BLMBalance.RecurrentPackageInitialAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackInitialAmtUnitFmt
outVars.value.bLMBalanceOut.recurrentPackageInitialAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackInitialAmtUnitFmtAttr;
// BLMBalance.RecurrentPackageAvailableAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageAvailableAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAvailableAmtFmtAttr);
// BLMBalance.RecurrentPackageAvailableAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackAvailableAmtUnitFm
outVars.value.bLMBalanceOut.recurrentPackageAvailableAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAvailableAmtUnitFmAttr;
// Success = True
outVars.value.successOut = true;
return OS.Flow.returnAsync(outVars.value);

}

});
}

});
}).then(function () {
return OS.Flow.executeSequence(function () {
if((vars.value.isSecondTryInLocal)) {
// Success = False
outVars.value.successOut = false;
// IsEmpty = True
outVars.value.isEmptyOut = true;
} else {
// Execute Action: GetBLMBalanceList
return BALANCE_MBPController.default.getBLMBalanceList$Action(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.serviceIdInLocal, vars.value.associationIdInLocal, true, callContext).then(function (value) {
getBLMBalanceListVar.value = value;
}).then(function () {
// Success = GetBLMBalanceList.Success
outVars.value.successOut = getBLMBalanceListVar.value.successOut;
// IsEmpty = GetBLMBalanceList.IsEmpty
outVars.value.isEmptyOut = getBLMBalanceListVar.value.isEmptyOut;
// BLMBalance = GetBLMBalanceList.BLMBalance
outVars.value.bLMBalanceOut = getBLMBalanceListVar.value.bLMBalanceOut;
});
}

});
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBLMBalanceList$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "ServiceId",
attrName: "serviceIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsSecondTry",
attrName: "isSecondTryInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBLMBalanceList$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "IsEmpty",
attrName: "isEmptyOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "BLMBalance",
attrName: "bLMBalanceOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_KANGURU_CONSUMPTIONSRec();
},
complexType: BALANCE_BPModel.STR_KANGURU_CONSUMPTIONSRec
}]);
BALANCE_MBPController.default.clientActionProxies.getBLMBalanceList$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, serviceIdIn, associationIdIn, isSecondTryIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
serviceIdIn = (serviceIdIn === undefined) ? "" : serviceIdIn;
associationIdIn = (associationIdIn === undefined) ? "" : associationIdIn;
isSecondTryIn = (isSecondTryIn === undefined) ? false : isSecondTryIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBLMBalanceList$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(serviceIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isSecondTryIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
IsEmpty: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isEmptyOut, OS.Types.Boolean, true),
BLMBalance: actionResults.bLMBalanceOut
};
});
};
});

define("BALANCE_MBP.controller$GetBLMBalanceList_v2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.controller$GetKanguruConsumptions_v2", "BALANCE_BP.model$STR_KANGURU_CONSUMPTIONSRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.controller$GetBLMBalanceList_v2", "BALANCE_MBP.model$Local_BLM_BALANCERecordList", "BALANCE_MBP.model$Local_BLM_BALANCERec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBLMBalanceList_v2$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, serviceIdIn, associationIdIn, isSecondTryIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBLMBalanceList_v2$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.serviceIdInLocal = serviceIdIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.isSecondTryInLocal = isSecondTryIn;
var getKanguruConsumptions_v2Var = new OS.DataTypes.VariableHolder();
var getBLMBalanceList_v2Var = new OS.DataTypes.VariableHolder();
var getLocalBLMBALANCESByServiceIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BLM_BALANCERecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.GetBLMBalanceList_v2$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetKanguruConsumptions_v2
return BALANCE_MBPController.default.getKanguruConsumptions_v2$Action(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.associationIdInLocal, vars.value.serviceIdInLocal, "Consumptions", callContext).then(function (value) {
getKanguruConsumptions_v2Var.value = value;
}).then(function () {
// Success?
return OS.Flow.executeSequence(function () {
if((getKanguruConsumptions_v2Var.value.successOut)) {
// Aggregate: GetLocalBLMBALANCESByServiceId
var getLocalBLMBALANCESByServiceIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BLM_BALANCERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}

var qpstServiceId = vars.value.serviceIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55";
} else {
selectSql += "\"ENLocal_BLM_BALANCE\".\"Id\" o0, \"ENLocal_BLM_BALANCE\".\"ServiceId\" o1, \"ENLocal_BLM_BALANCE\".\"IsUnlimited\" o2, \"ENLocal_BLM_BALANCE\".\"AvailableValueNEW\" o3, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnit\" o4, \"ENLocal_BLM_BALANCE\".\"SpentValueNEW\" o5, \"ENLocal_BLM_BALANCE\".\"SpentValueUnit\" o6, \"ENLocal_BLM_BALANCE\".\"TotalValueNEW\" o7, \"ENLocal_BLM_BALANCE\".\"TotalValueUnit\" o8, \"ENLocal_BLM_BALANCE\".\"ShowPlafondExtra\" o9, \"ENLocal_BLM_BALANCE\".\"PlafondExtraNEW\" o10, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnit\" o11, \"ENLocal_BLM_BALANCE\".\"ShowMaxValueToRestablish\" o12, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishNEW\" o13, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnit\" o14, \"ENLocal_BLM_BALANCE\".\"ShowUETraffic\" o15, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountNEW\" o16, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnit\" o17, \"ENLocal_BLM_BALANCE\".\"UERoamingExpireDate\" o18, \"ENLocal_BLM_BALANCE\".\"ShowRMTraffic\" o19, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountNEW\" o20, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnit\" o21, \"ENLocal_BLM_BALANCE\".\"RMRoamingExpireDate\" o22, \"ENLocal_BLM_BALANCE\".\"ShowHappyHour\" o23, \"ENLocal_BLM_BALANCE\".\"HappyHourValueNEW\" o24, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnit\" o25, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishFmtNEW\" o26, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnitFmt\" o27, \"ENLocal_BLM_BALANCE\".\"PlafondExtraFmtNEW\" o28, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnitFmt\" o29, \"ENLocal_BLM_BALANCE\".\"AvailableValueFmtNEW\" o30, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnitFmt\" o31, \"ENLocal_BLM_BALANCE\".\"SpentValueFmtNEW\" o32, \"ENLocal_BLM_BALANCE\".\"SpentValueUnitFmt\" o33, \"ENLocal_BLM_BALANCE\".\"TotalValueFmtNEW\" o34, \"ENLocal_BLM_BALANCE\".\"TotalValueUnitFmt\" o35, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountFmtNEW\" o36, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnitFmt\" o37, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountFmtNEW\" o38, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnitFmt\" o39, \"ENLocal_BLM_BALANCE\".\"HappyHourValueFmtNEW\" o40, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnitFmt\" o41, \"ENLocal_BLM_BALANCE\".\"CacheExpirationDate\" o42, \"ENLocal_BLM_BALANCE\".\"ShowRecurrPack\" o43, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmt\" o44, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmtUnit\" o45, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmt\" o46, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnit\" o47, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmt\" o48, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnit\" o49, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountFmt\" o50, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountUnitFmt\" o51, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtFmt\" o52, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnitFmt\" o53, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtFmt\" o54, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnitFm\" o55";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BLM_BALANCE\" \"ENLocal_BLM_BALANCE\"";
fromAndWhereSql += " WHERE (\"ENLocal_BLM_BALANCE\".\"ServiceId\" = :qpstServiceId)";
argsList.add("qpstServiceId", /*TEXT*/ 0, qpstServiceId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BLM_BALANCERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BLM_BALANCEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalBLMBALANCESByServiceIdVar.value;
});
};
return getLocalBLMBALANCESByServiceIdAggr().then(function () {
// EmptyList?
if((!(getLocalBLMBALANCESByServiceIdVar.value.listOut.isEmpty))) {
// BLMBalance
// BLMBalance.AvailableValue = TextToDecimal
outVars.value.bLMBalanceOut.availableValueAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.availableValueNEWAttr);
// BLMBalance.SpentValue = TextToDecimal
outVars.value.bLMBalanceOut.spentValueAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.spentValueNEWAttr);
// BLMBalance.TotalValue = TextToDecimal
outVars.value.bLMBalanceOut.totalValueAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.totalValueNEWAttr);
// BLMBalance.MSISDN = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ServiceId
outVars.value.bLMBalanceOut.mSISDNAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.serviceIdAttr;
// BLMBalance.UERoamingExpireDate = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.UERoamingExpireDate
outVars.value.bLMBalanceOut.uERoamingExpireDateAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uERoamingExpireDateAttr;
// BLMBalance.MaxValueToRestablish = TextToDecimal
outVars.value.bLMBalanceOut.maxValueToRestablishAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.maxValueToRestablishNEWAttr);
// BLMBalance.PlafondExtra = TextToDecimal
outVars.value.bLMBalanceOut.plafondExtraAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.plafondExtraNEWAttr);
// BLMBalance.UETrafficAmount = TextToDecimal
outVars.value.bLMBalanceOut.uETrafficAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uETrafficAmountNEWAttr);
// BLMBalance.IsUnlimited = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.IsUnlimited
outVars.value.bLMBalanceOut.isUnlimitedAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.isUnlimitedAttr;
// BLMBalance.PlafondExtraUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.PlafondExtraUnit
outVars.value.bLMBalanceOut.plafondExtraUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.plafondExtraUnitAttr;
// BLMBalance.AvailableValueUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.AvailableValueUnit
outVars.value.bLMBalanceOut.availableValueUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.availableValueUnitAttr;
// BLMBalance.SpentValueUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.SpentValueUnit
outVars.value.bLMBalanceOut.spentValueUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.spentValueUnitAttr;
// BLMBalance.TotalValueUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.TotalValueUnit
outVars.value.bLMBalanceOut.totalValueUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.totalValueUnitAttr;
// BLMBalance.UETrafficAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.UETrafficAmountUnit
outVars.value.bLMBalanceOut.uETrafficAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uETrafficAmountUnitAttr;
// BLMBalance.MaxValueToRestablishUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.MaxValueToRestablishUnit
outVars.value.bLMBalanceOut.maxValueToRestablishUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.maxValueToRestablishUnitAttr;
// BLMBalance.RMTrafficAmount = TextToDecimal
outVars.value.bLMBalanceOut.rMTrafficAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMTrafficAmountNEWAttr);
// BLMBalance.RMTrafficAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RMTrafficAmountUnit
outVars.value.bLMBalanceOut.rMTrafficAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMTrafficAmountUnitAttr;
// BLMBalance.RMRoamingExpireDate = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RMRoamingExpireDate
outVars.value.bLMBalanceOut.rMRoamingExpireDateAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMRoamingExpireDateAttr;
// BLMBalance.HappyHourValueUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.HappyHourValueUnit
outVars.value.bLMBalanceOut.happyHourValueUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.happyHourValueUnitAttr;
// BLMBalance.ShowMaxValueToRestablish = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowMaxValueToRestablish
outVars.value.bLMBalanceOut.showMaxValueToRestablishAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showMaxValueToRestablishAttr;
// BLMBalance.ShowPlafondExtra = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowPlafondExtra
outVars.value.bLMBalanceOut.showPlafondExtraAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showPlafondExtraAttr;
// BLMBalance.ShowUETraffic = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowUETraffic
outVars.value.bLMBalanceOut.showUETrafficAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showUETrafficAttr;
// BLMBalance.ShowRMTraffic = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowRMTraffic
outVars.value.bLMBalanceOut.showRMTrafficAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showRMTrafficAttr;
// BLMBalance.ShowHappyHour = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowHappyHour
outVars.value.bLMBalanceOut.showHappyHourAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showHappyHourAttr;
// BLMBalance.HappyHourValue = TextToDecimal
outVars.value.bLMBalanceOut.happyHourValueAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.happyHourValueNEWAttr);
// BLMBalance.MaxValueToRestablishFmt = TextToDecimal
outVars.value.bLMBalanceOut.maxValueToRestablishFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.maxValueToRestablishFmtNEWAttr);
// BLMBalance.MaxValueToRestablishUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.MaxValueToRestablishUnitFmt
outVars.value.bLMBalanceOut.maxValueToRestablishUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.maxValueToRestablishUnitFmtAttr;
// BLMBalance.PlafondExtraFmt = TextToDecimal
outVars.value.bLMBalanceOut.plafondExtraFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.plafondExtraFmtNEWAttr);
// BLMBalance.PlafondExtraUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.PlafondExtraUnitFmt
outVars.value.bLMBalanceOut.plafondExtraUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.plafondExtraUnitFmtAttr;
// BLMBalance.AvailableValueFmt = TextToDecimal
outVars.value.bLMBalanceOut.availableValueFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.availableValueFmtNEWAttr);
// BLMBalance.AvailableValueUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.AvailableValueUnitFmt
outVars.value.bLMBalanceOut.availableValueUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.availableValueUnitFmtAttr;
// BLMBalance.SpentValueFmt = TextToDecimal
outVars.value.bLMBalanceOut.spentValueFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.spentValueFmtNEWAttr);
// BLMBalance.SpentValueUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.SpentValueUnitFmt
outVars.value.bLMBalanceOut.spentValueUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.spentValueUnitFmtAttr;
// BLMBalance.TotalValueFmt = TextToDecimal
outVars.value.bLMBalanceOut.totalValueFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.totalValueFmtNEWAttr);
// BLMBalance.TotalValueUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.TotalValueUnitFmt
outVars.value.bLMBalanceOut.totalValueUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.totalValueUnitFmtAttr;
// BLMBalance.UETrafficAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.uETrafficAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uETrafficAmountFmtNEWAttr);
// BLMBalance.UETrafficAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.UETrafficAmountUnitFmt
outVars.value.bLMBalanceOut.uETrafficAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.uETrafficAmountUnitFmtAttr;
// BLMBalance.RMTrafficAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.rMTrafficAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMTrafficAmountFmtNEWAttr);
// BLMBalance.RMTrafficAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RMTrafficAmountUnitFmt
outVars.value.bLMBalanceOut.rMTrafficAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.rMTrafficAmountUnitFmtAttr;
// BLMBalance.HappyHourValueFmt = TextToDecimal
outVars.value.bLMBalanceOut.happyHourValueFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.happyHourValueFmtNEWAttr);
// BLMBalance.HappyHourValueUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.HappyHourValueUnitFmt
outVars.value.bLMBalanceOut.happyHourValueUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.happyHourValueUnitFmtAttr;
// BLMBalance.ShowRecurrentPackage = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.ShowRecurrPack
outVars.value.bLMBalanceOut.showRecurrentPackageAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.showRecurrPackAttr;
// BLMBalance.RecurrentPackageAmount = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAmtAttr);
// BLMBalance.RecurrentPackageAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackAmtUnit
outVars.value.bLMBalanceOut.recurrentPackageAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAmtUnitAttr;
// BLMBalance.RecurrentPackageInitialAmount = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageInitialAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackInitialAmtAttr);
// BLMBalance.RecurrentPackageInitialAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackInitialAmtUnit
outVars.value.bLMBalanceOut.recurrentPackageInitialAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackInitialAmtUnitAttr;
// BLMBalance.RecurrentPackageAvailableAmount = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageAvailableAmountAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAvailableAmtAttr);
// BLMBalance.RecurrentPackageAvailableAmountUnit = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackAvailableAmtUnit
outVars.value.bLMBalanceOut.recurrentPackageAvailableAmountUnitAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAvailableAmtUnitAttr;
// BLMBalance.RecurrentPackageAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAmountFmtAttr);
// BLMBalance.RecurrentPackageAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackAmountUnitFmt
outVars.value.bLMBalanceOut.recurrentPackageAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAmountUnitFmtAttr;
// BLMBalance.RecurrentPackageInitialAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageInitialAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackInitialAmtFmtAttr);
// BLMBalance.RecurrentPackageInitialAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackInitialAmtUnitFmt
outVars.value.bLMBalanceOut.recurrentPackageInitialAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackInitialAmtUnitFmtAttr;
// BLMBalance.RecurrentPackageAvailableAmountFmt = TextToDecimal
outVars.value.bLMBalanceOut.recurrentPackageAvailableAmountFmtAttr = OS.BuiltinFunctions.textToDecimal(getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAvailableAmtFmtAttr);
// BLMBalance.RecurrentPackageAvailableAmountUnitFmt = GetLocalBLMBALANCESByServiceId.List.Current.Local_BLM_BALANCE.RecurrPackAvailableAmtUnitFm
outVars.value.bLMBalanceOut.recurrentPackageAvailableAmountUnitFmtAttr = getLocalBLMBALANCESByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.recurrPackAvailableAmtUnitFmAttr;
// Success = True
outVars.value.successOut = true;
return OS.Flow.returnAsync(outVars.value);

}

});
}

});
}).then(function () {
return OS.Flow.executeSequence(function () {
if((vars.value.isSecondTryInLocal)) {
// Success = False
outVars.value.successOut = false;
// IsEmpty = True
outVars.value.isEmptyOut = true;
} else {
// Execute Action: GetBLMBalanceList_v2
return BALANCE_MBPController.default.getBLMBalanceList_v2$Action(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.serviceIdInLocal, vars.value.associationIdInLocal, true, callContext).then(function (value) {
getBLMBalanceList_v2Var.value = value;
}).then(function () {
// Success = GetBLMBalanceList_v2.Success
outVars.value.successOut = getBLMBalanceList_v2Var.value.successOut;
// IsEmpty = GetBLMBalanceList_v2.IsEmpty
outVars.value.isEmptyOut = getBLMBalanceList_v2Var.value.isEmptyOut;
// BLMBalance = GetBLMBalanceList_v2.BLMBalance
outVars.value.bLMBalanceOut = getBLMBalanceList_v2Var.value.bLMBalanceOut;
});
}

});
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBLMBalanceList_v2$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "ServiceId",
attrName: "serviceIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsSecondTry",
attrName: "isSecondTryInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.GetBLMBalanceList_v2$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "IsEmpty",
attrName: "isEmptyOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "BLMBalance",
attrName: "bLMBalanceOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_KANGURU_CONSUMPTIONSRec();
},
complexType: BALANCE_BPModel.STR_KANGURU_CONSUMPTIONSRec
}]);
BALANCE_MBPController.default.clientActionProxies.getBLMBalanceList_v2$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, serviceIdIn, associationIdIn, isSecondTryIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
serviceIdIn = (serviceIdIn === undefined) ? "" : serviceIdIn;
associationIdIn = (associationIdIn === undefined) ? "" : associationIdIn;
isSecondTryIn = (isSecondTryIn === undefined) ? false : isSecondTryIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getBLMBalanceList_v2$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(serviceIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isSecondTryIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
IsEmpty: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isEmptyOut, OS.Types.Boolean, true),
BLMBalance: actionResults.bLMBalanceOut
};
});
};
});

define("BALANCE_MBP.controller$GetCacheServiceID", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_CACHE_SERVICERec"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getCacheServiceID$Action = function (callContext) {
callContext = controller.callContext(callContext);
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Cache.GetCacheServiceID$outVars"))());
// SetOutput
// CacheServices.BalanceConfig = "getBalanceConfig"
outVars.value.cacheServicesOut.balanceConfigAttr = "getBalanceConfig";
// CacheServices.BalanceInfo = "getBalanceInfo"
outVars.value.cacheServicesOut.balanceInfoAttr = "getBalanceInfo";
// CacheServices.HomepageBalanceInfo = "getHomepageBalanceInfo"
outVars.value.cacheServicesOut.homepageBalanceInfoAttr = "getHomepageBalanceInfo";
// CacheServices.NetDistribution = "NetDistribution"
outVars.value.cacheServicesOut.netDistributionAttr = "NetDistribution";
// CacheServices.VoDUsage = "VoDUsage"
outVars.value.cacheServicesOut.voDUsageAttr = "VoDUsage";
return outVars.value;
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Cache.GetCacheServiceID$outVars", [{
name: "CacheServices",
attrName: "cacheServicesOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.STR_CACHE_SERVICERec();
},
complexType: BALANCE_MBPModel.STR_CACHE_SERVICERec
}]);
BALANCE_MBPController.default.clientActionProxies.getCacheServiceID$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getCacheServiceID$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
CacheServices: actionResults.cacheServicesOut
};
});
};
});

define("BALANCE_MBP.controller$GetCommunicationDetails_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "CON_BSCS.model", "BALANCE_BP.model", "CON_BSCS.model$DataOutput3Rec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$CON_BSCS", "BALANCE_MBP.controller$ServerAction.GetCommunicationDetails_BP", "BALANCE_MBP.controller$ServerAction.GetDefaultValuesGetUsageParameters_BP", "BALANCE_MBP.model$Usage_outRecordList", "BALANCE_MBP.model$STR_COMMUNICATIONList", "BALANCE_BP.model$STR_COMMUNICATIONRec", "BALANCE_MBP.referencesHealth$BALANCE_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, CON_BSCSModel, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getCommunicationDetails_MBP$Action = function (productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, domainIn, communicationTypeIn, startTimeIn, endTimeIn, minCommunicationCostIn, maxCommunicationCostIn, minCallDurationIn, maxCallDurationIn, operation2In, startPositionIn, totalCountIn, orderFieldIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP$vars"))());
vars.value.productIdInLocal = productIdIn;
vars.value.masterSystemInLocal = masterSystemIn;
vars.value.startDateInLocal = startDateIn;
vars.value.endDateInLocal = endDateIn;
vars.value.applicationInLocal = applicationIn;
vars.value.domainInLocal = domainIn;
vars.value.communicationTypeInLocal = communicationTypeIn.clone();
vars.value.startTimeInLocal = startTimeIn;
vars.value.endTimeInLocal = endTimeIn;
vars.value.minCommunicationCostInLocal = minCommunicationCostIn;
vars.value.maxCommunicationCostInLocal = maxCommunicationCostIn;
vars.value.minCallDurationInLocal = minCallDurationIn;
vars.value.maxCallDurationInLocal = maxCallDurationIn;
vars.value.operation2InLocal = operation2In;
vars.value.startPositionInLocal = startPositionIn;
vars.value.totalCountInLocal = totalCountIn;
vars.value.orderFieldInLocal = orderFieldIn;
var getCommunicationDetails_BPVar = new OS.DataTypes.VariableHolder();
var getDefaultValuesGetUsageParameters_BPVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetDefaultValuesGetUsageParameters_BP
return controller.getDefaultValuesGetUsageParameters_BP$ServerAction(vars.value.applicationInLocal, callContext).then(function (value) {
getDefaultValuesGetUsageParameters_BPVar.value = value;
}).then(function () {
// Execute Action: GetCommunicationDetails_BP
return controller.getCommunicationDetails_BP$ServerAction(vars.value.masterSystemInLocal, vars.value.startDateInLocal, vars.value.endDateInLocal, vars.value.applicationInLocal, "", "", vars.value.productIdInLocal, getDefaultValuesGetUsageParameters_BPVar.value.startPositionOut, getDefaultValuesGetUsageParameters_BPVar.value.totalCountOut, getDefaultValuesGetUsageParameters_BPVar.value.orderFieldOut, getDefaultValuesGetUsageParameters_BPVar.value.orderByOut, callContext).then(function (value) {
getCommunicationDetails_BPVar.value = value;
});
}).then(function () {
// GetUsage
// Foreach GetCommunicationDetails_BP.CommunicationDetails.Usages.Usages_out.Usage
callContext.iterationContext.registerIterationStart(getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr);
}).then(function () {
try {var usageIterator = callContext.iterationContext.getIterator(getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr);
var usageIndex = 0;
while (((usageIndex < getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.length))) {
usageIterator.currentRowNumber = usageIndex;
// SetCommunication
// CommunicationDetails.StartDate = TextToDateTime
vars.value.communicationDetailsVar.startDateAttr = OS.BuiltinFunctions.textToDateTime(getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.getItem(usageIndex.valueOf()).usage_outAttr.startDateAttr);
// CommunicationDetails.EndDate = TextToDateTime
vars.value.communicationDetailsVar.endDateAttr = OS.BuiltinFunctions.textToDateTime(getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.getItem(usageIndex.valueOf()).usage_outAttr.endDateAttr);
// CommunicationDetails.Cost = "€" + GetCommunicationDetails_BP.CommunicationDetails.Usages.Usages_out.Usage.Current.Usage_out.CostWithVAT
vars.value.communicationDetailsVar.costAttr = ("€" + getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.getItem(usageIndex.valueOf()).usage_outAttr.costWithVATAttr);
// CommunicationDetails.Domain = GetCommunicationDetails_BP.CommunicationDetails.Usages.Usages_out.Usage.Current.Usage_out.Communication.Communication_out.Domain
vars.value.communicationDetailsVar.domainAttr = getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.getItem(usageIndex.valueOf()).usage_outAttr.communicationAttr.communication_outAttr.domainAttr;
// CommunicationDetails.Type = GetCommunicationDetails_BP.CommunicationDetails.Usages.Usages_out.Usage.Current.Usage_out.ServiceClass
vars.value.communicationDetailsVar.typeAttr = getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.getItem(usageIndex.valueOf()).usage_outAttr.serviceClassAttr;
// CommunicationDetails.Duration = GetCommunicationDetails_BP.CommunicationDetails.Usages.Usages_out.Usage.Current.Usage_out.Duration
vars.value.communicationDetailsVar.durationAttr = getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.getItem(usageIndex.valueOf()).usage_outAttr.durationAttr;
// CommunicationDetails.DurationUnits = GetCommunicationDetails_BP.CommunicationDetails.Usages.Usages_out.Usage.Current.Usage_out.DurationUnit
vars.value.communicationDetailsVar.durationUnitsAttr = getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.getItem(usageIndex.valueOf()).usage_outAttr.durationUnitAttr;
// CommunicationDetails.DestinationNumber = GetCommunicationDetails_BP.CommunicationDetails.Usages.Usages_out.Usage.Current.Usage_out.Communication.Communication_out.DestinationNumber
vars.value.communicationDetailsVar.destinationNumberAttr = getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.getItem(usageIndex.valueOf()).usage_outAttr.communicationAttr.communication_outAttr.destinationNumberAttr;
// CommunicationDetails.StartTime = DateTimeToTime
vars.value.communicationDetailsVar.startTimeAttr = OS.BuiltinFunctions.dateTimeToTime(OS.BuiltinFunctions.textToDateTime(getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr.getItem(usageIndex.valueOf()).usage_outAttr.startDateAttr));
// Execute Action: ListAppend
OS.SystemActions.listAppend(outVars.value.comunicationsOut, vars.value.communicationDetailsVar, callContext);
usageIndex++;
}

} finally {
callContext.iterationContext.registerIterationEnd(getCommunicationDetails_BPVar.value.communicationDetailsOut.usagesAttr.usages_outAttr.usageAttr);
}

});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP$vars", [{
name: "ProductId",
attrName: "productIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MasterSystem",
attrName: "masterSystemInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "StartDate",
attrName: "startDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "EndDate",
attrName: "endDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Domain",
attrName: "domainInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CommunicationType",
attrName: "communicationTypeInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new OS.DataTypes.TextList();
},
complexType: OS.DataTypes.TextList
}, {
name: "StartTime",
attrName: "startTimeInLocal",
mandatory: true,
dataType: OS.Types.Time,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "EndTime",
attrName: "endTimeInLocal",
mandatory: true,
dataType: OS.Types.Time,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "MinCommunicationCost",
attrName: "minCommunicationCostInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MaxCommunicationCost",
attrName: "maxCommunicationCostInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MinCallDuration",
attrName: "minCallDurationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MaxCallDuration",
attrName: "maxCallDurationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Operation2",
attrName: "operation2InLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "StartPosition",
attrName: "startPositionInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TotalCount",
attrName: "totalCountInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OrderField",
attrName: "orderFieldInLocal",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CommunicationDetails",
attrName: "communicationDetailsVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_COMMUNICATIONRec();
},
complexType: BALANCE_BPModel.STR_COMMUNICATIONRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP$outVars", [{
name: "Comunications",
attrName: "comunicationsOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_COMMUNICATIONList();
},
complexType: BALANCE_MBPModel.STR_COMMUNICATIONList
}]);
BALANCE_MBPController.default.clientActionProxies.getCommunicationDetails_MBP$Action = function (productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, domainIn, communicationTypeIn, startTimeIn, endTimeIn, minCommunicationCostIn, maxCommunicationCostIn, minCallDurationIn, maxCallDurationIn, operation2In, startPositionIn, totalCountIn, orderFieldIn) {
productIdIn = (productIdIn === undefined) ? "" : productIdIn;
masterSystemIn = (masterSystemIn === undefined) ? "" : masterSystemIn;
startDateIn = (startDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : startDateIn;
endDateIn = (endDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : endDateIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
domainIn = (domainIn === undefined) ? "" : domainIn;
communicationTypeIn = (communicationTypeIn === undefined) ? new OS.DataTypes.TextList() : communicationTypeIn;
startTimeIn = (startTimeIn === undefined) ? OS.DataTypes.DateTime.defaultValue : startTimeIn;
endTimeIn = (endTimeIn === undefined) ? OS.DataTypes.DateTime.defaultValue : endTimeIn;
minCommunicationCostIn = (minCommunicationCostIn === undefined) ? "" : minCommunicationCostIn;
maxCommunicationCostIn = (maxCommunicationCostIn === undefined) ? "" : maxCommunicationCostIn;
minCallDurationIn = (minCallDurationIn === undefined) ? "" : minCallDurationIn;
maxCallDurationIn = (maxCallDurationIn === undefined) ? "" : maxCallDurationIn;
operation2In = (operation2In === undefined) ? "" : operation2In;
startPositionIn = (startPositionIn === undefined) ? "" : startPositionIn;
totalCountIn = (totalCountIn === undefined) ? "" : totalCountIn;
orderFieldIn = (orderFieldIn === undefined) ? "" : orderFieldIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getCommunicationDetails_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(productIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(masterSystemIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startDateIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(endDateIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(domainIn, OS.Types.Text), communicationTypeIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startTimeIn, OS.Types.Time), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(endTimeIn, OS.Types.Time), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(minCommunicationCostIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(maxCommunicationCostIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(minCallDurationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(maxCallDurationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(operation2In, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startPositionIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(totalCountIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(orderFieldIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Comunications: actionResults.comunicationsOut
};
});
};
});

define("BALANCE_MBP.controller$GetCommunicationDetails_MBP_v3", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_COMMUNICATIONList", "BALANCE_MBP.controller$ServerAction.GetCommunications_v3"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getCommunicationDetails_MBP_v3$Action = function (productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, domainIn, communicationTypeIn, startTimeIn, endTimeIn, minCommunicationCostIn, maxCommunicationCostIn, minCallDurationIn, maxCallDurationIn, hasCostIn, isPaidIn, startPositionIn, lengthIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP_v3$vars"))());
vars.value.productIdInLocal = productIdIn;
vars.value.masterSystemInLocal = masterSystemIn;
vars.value.startDateInLocal = startDateIn;
vars.value.endDateInLocal = endDateIn;
vars.value.applicationInLocal = applicationIn;
vars.value.domainInLocal = domainIn;
vars.value.communicationTypeInLocal = communicationTypeIn.clone();
vars.value.startTimeInLocal = startTimeIn;
vars.value.endTimeInLocal = endTimeIn;
vars.value.minCommunicationCostInLocal = minCommunicationCostIn;
vars.value.maxCommunicationCostInLocal = maxCommunicationCostIn;
vars.value.minCallDurationInLocal = minCallDurationIn;
vars.value.maxCallDurationInLocal = maxCallDurationIn;
vars.value.hasCostInLocal = hasCostIn;
vars.value.isPaidInLocal = isPaidIn;
vars.value.startPositionInLocal = startPositionIn;
vars.value.lengthInLocal = lengthIn;
var getCommunicationsVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP_v3$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetCommunications
return controller.getCommunications_v3$ServerAction(vars.value.isPaidInLocal, vars.value.hasCostInLocal, vars.value.productIdInLocal, vars.value.masterSystemInLocal, vars.value.startDateInLocal, vars.value.endDateInLocal, vars.value.applicationInLocal, vars.value.domainInLocal, vars.value.communicationTypeInLocal, vars.value.startTimeInLocal, vars.value.endTimeInLocal, vars.value.minCommunicationCostInLocal, vars.value.maxCommunicationCostInLocal, vars.value.minCallDurationInLocal, vars.value.maxCallDurationInLocal, vars.value.startPositionInLocal, vars.value.lengthInLocal, callContext).then(function (value) {
getCommunicationsVar.value = value;
}).then(function () {
// Comunications = GetCommunications.Comunications
outVars.value.comunicationsOut = getCommunicationsVar.value.comunicationsOut;
// Sucess = GetCommunications.Success
outVars.value.sucessOut = getCommunicationsVar.value.successOut;
// Count = GetCommunications.Count
outVars.value.countOut = getCommunicationsVar.value.countOut;
// CountSelected = GetCommunications.CountSelected
outVars.value.countSelectedOut = getCommunicationsVar.value.countSelectedOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP_v3$vars", [{
name: "ProductId",
attrName: "productIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MasterSystem",
attrName: "masterSystemInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "StartDate",
attrName: "startDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "EndDate",
attrName: "endDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Domain",
attrName: "domainInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CommunicationType",
attrName: "communicationTypeInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new OS.DataTypes.TextList();
},
complexType: OS.DataTypes.TextList
}, {
name: "StartTime",
attrName: "startTimeInLocal",
mandatory: true,
dataType: OS.Types.Time,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "EndTime",
attrName: "endTimeInLocal",
mandatory: true,
dataType: OS.Types.Time,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "MinCommunicationCost",
attrName: "minCommunicationCostInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MaxCommunicationCost",
attrName: "maxCommunicationCostInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MinCallDuration",
attrName: "minCallDurationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MaxCallDuration",
attrName: "maxCallDurationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "HasCost",
attrName: "hasCostInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "IsPaid",
attrName: "isPaidInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "StartPosition",
attrName: "startPositionInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Length",
attrName: "lengthInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP_v3$outVars", [{
name: "Comunications",
attrName: "comunicationsOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_COMMUNICATIONList();
},
complexType: BALANCE_MBPModel.STR_COMMUNICATIONList
}, {
name: "Count",
attrName: "countOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "CountSelected",
attrName: "countSelectedOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Sucess",
attrName: "sucessOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getCommunicationDetails_MBP_v3$Action = function (productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, domainIn, communicationTypeIn, startTimeIn, endTimeIn, minCommunicationCostIn, maxCommunicationCostIn, minCallDurationIn, maxCallDurationIn, hasCostIn, isPaidIn, startPositionIn, lengthIn) {
productIdIn = (productIdIn === undefined) ? "" : productIdIn;
masterSystemIn = (masterSystemIn === undefined) ? "" : masterSystemIn;
startDateIn = (startDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : startDateIn;
endDateIn = (endDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : endDateIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
domainIn = (domainIn === undefined) ? "" : domainIn;
communicationTypeIn = (communicationTypeIn === undefined) ? new OS.DataTypes.TextList() : communicationTypeIn;
startTimeIn = (startTimeIn === undefined) ? OS.DataTypes.DateTime.defaultValue : startTimeIn;
endTimeIn = (endTimeIn === undefined) ? OS.DataTypes.DateTime.defaultValue : endTimeIn;
minCommunicationCostIn = (minCommunicationCostIn === undefined) ? "" : minCommunicationCostIn;
maxCommunicationCostIn = (maxCommunicationCostIn === undefined) ? "" : maxCommunicationCostIn;
minCallDurationIn = (minCallDurationIn === undefined) ? "" : minCallDurationIn;
maxCallDurationIn = (maxCallDurationIn === undefined) ? "" : maxCallDurationIn;
hasCostIn = (hasCostIn === undefined) ? false : hasCostIn;
isPaidIn = (isPaidIn === undefined) ? false : isPaidIn;
startPositionIn = (startPositionIn === undefined) ? 0 : startPositionIn;
lengthIn = (lengthIn === undefined) ? 0 : lengthIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getCommunicationDetails_MBP_v3$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(productIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(masterSystemIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startDateIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(endDateIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(domainIn, OS.Types.Text), communicationTypeIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startTimeIn, OS.Types.Time), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(endTimeIn, OS.Types.Time), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(minCommunicationCostIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(maxCommunicationCostIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(minCallDurationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(maxCallDurationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(hasCostIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isPaidIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startPositionIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(lengthIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Comunications: actionResults.comunicationsOut,
Count: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.countOut, OS.Types.Integer, true),
CountSelected: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.countSelectedOut, OS.Types.Integer, true),
Sucess: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.sucessOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetCommunicationDetails_MBP_v4", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_COMMUNICATIONList", "BALANCE_MBP.controller$ServerAction.GetCommunications_v4"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getCommunicationDetails_MBP_v4$Action = function (productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, minCommunicationCostIn, maxCommunicationCostIn, hasCostIn, isPaidIn, startPositionIn, lengthIn, callTypeIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP_v4$vars"))());
vars.value.productIdInLocal = productIdIn;
vars.value.masterSystemInLocal = masterSystemIn;
vars.value.startDateInLocal = startDateIn;
vars.value.endDateInLocal = endDateIn;
vars.value.applicationInLocal = applicationIn;
vars.value.minCommunicationCostInLocal = minCommunicationCostIn;
vars.value.maxCommunicationCostInLocal = maxCommunicationCostIn;
vars.value.hasCostInLocal = hasCostIn;
vars.value.isPaidInLocal = isPaidIn;
vars.value.startPositionInLocal = startPositionIn;
vars.value.lengthInLocal = lengthIn;
vars.value.callTypeInLocal = callTypeIn;
var getCommunicationsVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP_v4$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetCommunications
return controller.getCommunications_v4$ServerAction(vars.value.isPaidInLocal, vars.value.hasCostInLocal, vars.value.productIdInLocal, vars.value.masterSystemInLocal, vars.value.startDateInLocal, vars.value.endDateInLocal, vars.value.applicationInLocal, vars.value.minCommunicationCostInLocal, vars.value.maxCommunicationCostInLocal, vars.value.startPositionInLocal, vars.value.lengthInLocal, vars.value.callTypeInLocal, callContext).then(function (value) {
getCommunicationsVar.value = value;
}).then(function () {
// Comunications = GetCommunications.Comunications
outVars.value.comunicationsOut = getCommunicationsVar.value.comunicationsOut;
// Sucess = GetCommunications.Success
outVars.value.sucessOut = getCommunicationsVar.value.successOut;
// Count = GetCommunications.Count
outVars.value.countOut = getCommunicationsVar.value.countOut;
// CountSelected = GetCommunications.CountSelected
outVars.value.countSelectedOut = getCommunicationsVar.value.countSelectedOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP_v4$vars", [{
name: "ProductId",
attrName: "productIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MasterSystem",
attrName: "masterSystemInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "StartDate",
attrName: "startDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "EndDate",
attrName: "endDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MinCommunicationCost",
attrName: "minCommunicationCostInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MaxCommunicationCost",
attrName: "maxCommunicationCostInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "HasCost",
attrName: "hasCostInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "IsPaid",
attrName: "isPaidInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "StartPosition",
attrName: "startPositionInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Length",
attrName: "lengthInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "CallType",
attrName: "callTypeInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP_v4$outVars", [{
name: "Comunications",
attrName: "comunicationsOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_COMMUNICATIONList();
},
complexType: BALANCE_MBPModel.STR_COMMUNICATIONList
}, {
name: "Count",
attrName: "countOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "CountSelected",
attrName: "countSelectedOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Sucess",
attrName: "sucessOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getCommunicationDetails_MBP_v4$Action = function (productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, minCommunicationCostIn, maxCommunicationCostIn, hasCostIn, isPaidIn, startPositionIn, lengthIn, callTypeIn) {
productIdIn = (productIdIn === undefined) ? "" : productIdIn;
masterSystemIn = (masterSystemIn === undefined) ? "" : masterSystemIn;
startDateIn = (startDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : startDateIn;
endDateIn = (endDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : endDateIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
minCommunicationCostIn = (minCommunicationCostIn === undefined) ? "" : minCommunicationCostIn;
maxCommunicationCostIn = (maxCommunicationCostIn === undefined) ? "" : maxCommunicationCostIn;
hasCostIn = (hasCostIn === undefined) ? false : hasCostIn;
isPaidIn = (isPaidIn === undefined) ? false : isPaidIn;
startPositionIn = (startPositionIn === undefined) ? 0 : startPositionIn;
lengthIn = (lengthIn === undefined) ? 0 : lengthIn;
callTypeIn = (callTypeIn === undefined) ? "" : callTypeIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getCommunicationDetails_MBP_v4$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(productIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(masterSystemIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startDateIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(endDateIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(minCommunicationCostIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(maxCommunicationCostIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(hasCostIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isPaidIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startPositionIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(lengthIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(callTypeIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Comunications: actionResults.comunicationsOut,
Count: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.countOut, OS.Types.Integer, true),
CountSelected: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.countSelectedOut, OS.Types.Integer, true),
Sucess: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.sucessOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetCommunicationDetails_MBP2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_COMMUNICATIONList", "BALANCE_MBP.controller$ServerAction.GetCommunications_v2"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getCommunicationDetails_MBP2$Action = function (isToApplyFiltersIn, productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, domainIn, communicationTypeIn, startTimeIn, endTimeIn, minCommunicationCostIn, maxCommunicationCostIn, minCallDurationIn, maxCallDurationIn, hasCostIn, isPaidIn, startPositionIn, lengthIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP2$vars"))());
vars.value.isToApplyFiltersInLocal = isToApplyFiltersIn;
vars.value.productIdInLocal = productIdIn;
vars.value.masterSystemInLocal = masterSystemIn;
vars.value.startDateInLocal = startDateIn;
vars.value.endDateInLocal = endDateIn;
vars.value.applicationInLocal = applicationIn;
vars.value.domainInLocal = domainIn;
vars.value.communicationTypeInLocal = communicationTypeIn.clone();
vars.value.startTimeInLocal = startTimeIn;
vars.value.endTimeInLocal = endTimeIn;
vars.value.minCommunicationCostInLocal = minCommunicationCostIn;
vars.value.maxCommunicationCostInLocal = maxCommunicationCostIn;
vars.value.minCallDurationInLocal = minCallDurationIn;
vars.value.maxCallDurationInLocal = maxCallDurationIn;
vars.value.hasCostInLocal = hasCostIn;
vars.value.isPaidInLocal = isPaidIn;
vars.value.startPositionInLocal = startPositionIn;
vars.value.lengthInLocal = lengthIn;
var getCommunicationsVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP2$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetCommunications
return controller.getCommunications_v2$ServerAction(vars.value.isToApplyFiltersInLocal, vars.value.isPaidInLocal, vars.value.hasCostInLocal, vars.value.productIdInLocal, vars.value.masterSystemInLocal, vars.value.startDateInLocal, vars.value.endDateInLocal, vars.value.applicationInLocal, vars.value.domainInLocal, vars.value.communicationTypeInLocal, vars.value.startTimeInLocal, vars.value.endTimeInLocal, vars.value.minCommunicationCostInLocal, vars.value.maxCommunicationCostInLocal, vars.value.minCallDurationInLocal, vars.value.maxCallDurationInLocal, vars.value.startPositionInLocal, vars.value.lengthInLocal, callContext).then(function (value) {
getCommunicationsVar.value = value;
}).then(function () {
// Comunications = GetCommunications.Comunications
outVars.value.comunicationsOut = getCommunicationsVar.value.comunicationsOut;
// Sucess = GetCommunications.Success
outVars.value.sucessOut = getCommunicationsVar.value.successOut;
// Count = GetCommunications.Count
outVars.value.countOut = getCommunicationsVar.value.countOut;
// CountSelected = GetCommunications.CountSelected
outVars.value.countSelectedOut = getCommunicationsVar.value.countSelectedOut;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP2$vars", [{
name: "IsToApplyFilters",
attrName: "isToApplyFiltersInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "ProductId",
attrName: "productIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MasterSystem",
attrName: "masterSystemInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "StartDate",
attrName: "startDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "EndDate",
attrName: "endDateInLocal",
mandatory: true,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Domain",
attrName: "domainInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CommunicationType",
attrName: "communicationTypeInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new OS.DataTypes.TextList();
},
complexType: OS.DataTypes.TextList
}, {
name: "StartTime",
attrName: "startTimeInLocal",
mandatory: true,
dataType: OS.Types.Time,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "EndTime",
attrName: "endTimeInLocal",
mandatory: true,
dataType: OS.Types.Time,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "MinCommunicationCost",
attrName: "minCommunicationCostInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MaxCommunicationCost",
attrName: "maxCommunicationCostInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MinCallDuration",
attrName: "minCallDurationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MaxCallDuration",
attrName: "maxCallDurationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "HasCost",
attrName: "hasCostInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "IsPaid",
attrName: "isPaidInLocal",
mandatory: true,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "StartPosition",
attrName: "startPositionInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Length",
attrName: "lengthInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Communications.GetCommunicationDetails_MBP2$outVars", [{
name: "Comunications",
attrName: "comunicationsOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_COMMUNICATIONList();
},
complexType: BALANCE_MBPModel.STR_COMMUNICATIONList
}, {
name: "Count",
attrName: "countOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "CountSelected",
attrName: "countSelectedOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Sucess",
attrName: "sucessOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getCommunicationDetails_MBP2$Action = function (isToApplyFiltersIn, productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, domainIn, communicationTypeIn, startTimeIn, endTimeIn, minCommunicationCostIn, maxCommunicationCostIn, minCallDurationIn, maxCallDurationIn, hasCostIn, isPaidIn, startPositionIn, lengthIn) {
isToApplyFiltersIn = (isToApplyFiltersIn === undefined) ? false : isToApplyFiltersIn;
productIdIn = (productIdIn === undefined) ? "" : productIdIn;
masterSystemIn = (masterSystemIn === undefined) ? "" : masterSystemIn;
startDateIn = (startDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : startDateIn;
endDateIn = (endDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : endDateIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
domainIn = (domainIn === undefined) ? "" : domainIn;
communicationTypeIn = (communicationTypeIn === undefined) ? new OS.DataTypes.TextList() : communicationTypeIn;
startTimeIn = (startTimeIn === undefined) ? OS.DataTypes.DateTime.defaultValue : startTimeIn;
endTimeIn = (endTimeIn === undefined) ? OS.DataTypes.DateTime.defaultValue : endTimeIn;
minCommunicationCostIn = (minCommunicationCostIn === undefined) ? "" : minCommunicationCostIn;
maxCommunicationCostIn = (maxCommunicationCostIn === undefined) ? "" : maxCommunicationCostIn;
minCallDurationIn = (minCallDurationIn === undefined) ? "" : minCallDurationIn;
maxCallDurationIn = (maxCallDurationIn === undefined) ? "" : maxCallDurationIn;
hasCostIn = (hasCostIn === undefined) ? false : hasCostIn;
isPaidIn = (isPaidIn === undefined) ? false : isPaidIn;
startPositionIn = (startPositionIn === undefined) ? 0 : startPositionIn;
lengthIn = (lengthIn === undefined) ? 0 : lengthIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getCommunicationDetails_MBP2$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isToApplyFiltersIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(productIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(masterSystemIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startDateIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(endDateIn, OS.Types.DateTime), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(domainIn, OS.Types.Text), communicationTypeIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startTimeIn, OS.Types.Time), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(endTimeIn, OS.Types.Time), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(minCommunicationCostIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(maxCommunicationCostIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(minCallDurationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(maxCallDurationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(hasCostIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(isPaidIn, OS.Types.Boolean), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startPositionIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(lengthIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Comunications: actionResults.comunicationsOut,
Count: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.countOut, OS.Types.Integer, true),
CountSelected: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.countSelectedOut, OS.Types.Integer, true),
Sucess: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.sucessOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetDecimalPlacesByUnit", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getDecimalPlacesByUnit$Action = function (unitIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Format.GetDecimalPlacesByUnit$vars"))());
vars.value.unitInLocal = unitIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Format.GetDecimalPlacesByUnit$outVars"))());
try {// Unit
if(((vars.value.unitInLocal === "GB"))) {
// DecimalDigits = 1
outVars.value.decimalDigitsOut = 1;
} else {
if((vars.value.unitInLocal === "MB")) {
// DecimalDigits = 0
outVars.value.decimalDigitsOut = 0;
} else {
if((((((((((vars.value.unitInLocal === "MIN") || (vars.value.unitInLocal === "VOZ")) || (vars.value.unitInLocal === "CUG")) || (vars.value.unitInLocal === "SMS")) || (vars.value.unitInLocal === "MMS")) || (vars.value.unitInLocal === "MIN/SMS")) || (vars.value.unitInLocal === "MIN/SMS/MMS")) || (vars.value.unitInLocal === "SMS/MMS")) || (vars.value.unitInLocal === "MIN/MMS"))) {
// DecimalDigits = 0
outVars.value.decimalDigitsOut = 0;
} else {
// DecimalDigits = 2
outVars.value.decimalDigitsOut = 2;
}

}

}

} catch (ex) {
(function () {
OS.Logger.trace("Format.GetDecimalPlacesByUnit", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return outVars.value;

}

throw ex;
})();
}

return outVars.value;
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Format.GetDecimalPlacesByUnit$vars", [{
name: "Unit",
attrName: "unitInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Format.GetDecimalPlacesByUnit$outVars", [{
name: "DecimalDigits",
attrName: "decimalDigitsOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getDecimalPlacesByUnit$Action = function (unitIn) {
unitIn = (unitIn === undefined) ? "" : unitIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getDecimalPlacesByUnit$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(unitIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
DecimalDigits: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.decimalDigitsOut, OS.Types.Integer, true)
};
});
};
});

define("BALANCE_MBP.controller$GetKanguruConsumptions", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "Essentials_MOB.controller", "BALANCE_MBP.controller$Cache_ValidationByService", "BALANCE_MBP.model$Local_BLM_BALANCERecord", "BALANCE_MBP.controller$CreateOrUpdateLocal_BLM_BALANCE_Logic", "BALANCE_MBP.model$STR_KANGURU_CONSUMPTIONSRecord", "BALANCE_MBP.controller$ServerAction.GetKanguruConsumptions_BP", "Essentials_MOB.controller$Time_ConvertToUTC", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$Essentials_MOB", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_BLM_BALANCERec", "BALANCE_MBP.model$Local_BLM_BALANCERecordList", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, Essentials_MOBController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getKanguruConsumptions$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, associationIdIn, serviceIdIn, processIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetKanguruConsumptions$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.serviceIdInLocal = serviceIdIn;
vars.value.processInLocal = processIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getKanguruConsumptions_BPVar = new OS.DataTypes.VariableHolder();
var cache_ValidationByServiceVar = new OS.DataTypes.VariableHolder();
var createOrUpdateLocal_BLM_BALANCE_LogicVar = new OS.DataTypes.VariableHolder();
var currDateTimeToUTCVar = new OS.DataTypes.VariableHolder();
var getLocalBLMBALANCEByServiceId2Var = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BLM_BALANCERecordList))());
var getLocalBLMBALANCEByServiceIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BLM_BALANCERecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetKanguruConsumptions$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalBLMBALANCEByServiceId
var getLocalBLMBALANCEByServiceIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BLM_BALANCERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstServiceId = vars.value.serviceIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55";
} else {
selectSql += "\"ENLocal_BLM_BALANCE\".\"Id\" o0, \"ENLocal_BLM_BALANCE\".\"ServiceId\" o1, \"ENLocal_BLM_BALANCE\".\"IsUnlimited\" o2, \"ENLocal_BLM_BALANCE\".\"AvailableValueNEW\" o3, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnit\" o4, \"ENLocal_BLM_BALANCE\".\"SpentValueNEW\" o5, \"ENLocal_BLM_BALANCE\".\"SpentValueUnit\" o6, \"ENLocal_BLM_BALANCE\".\"TotalValueNEW\" o7, \"ENLocal_BLM_BALANCE\".\"TotalValueUnit\" o8, \"ENLocal_BLM_BALANCE\".\"ShowPlafondExtra\" o9, \"ENLocal_BLM_BALANCE\".\"PlafondExtraNEW\" o10, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnit\" o11, \"ENLocal_BLM_BALANCE\".\"ShowMaxValueToRestablish\" o12, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishNEW\" o13, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnit\" o14, \"ENLocal_BLM_BALANCE\".\"ShowUETraffic\" o15, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountNEW\" o16, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnit\" o17, \"ENLocal_BLM_BALANCE\".\"UERoamingExpireDate\" o18, \"ENLocal_BLM_BALANCE\".\"ShowRMTraffic\" o19, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountNEW\" o20, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnit\" o21, \"ENLocal_BLM_BALANCE\".\"RMRoamingExpireDate\" o22, \"ENLocal_BLM_BALANCE\".\"ShowHappyHour\" o23, \"ENLocal_BLM_BALANCE\".\"HappyHourValueNEW\" o24, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnit\" o25, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishFmtNEW\" o26, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnitFmt\" o27, \"ENLocal_BLM_BALANCE\".\"PlafondExtraFmtNEW\" o28, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnitFmt\" o29, \"ENLocal_BLM_BALANCE\".\"AvailableValueFmtNEW\" o30, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnitFmt\" o31, \"ENLocal_BLM_BALANCE\".\"SpentValueFmtNEW\" o32, \"ENLocal_BLM_BALANCE\".\"SpentValueUnitFmt\" o33, \"ENLocal_BLM_BALANCE\".\"TotalValueFmtNEW\" o34, \"ENLocal_BLM_BALANCE\".\"TotalValueUnitFmt\" o35, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountFmtNEW\" o36, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnitFmt\" o37, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountFmtNEW\" o38, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnitFmt\" o39, \"ENLocal_BLM_BALANCE\".\"HappyHourValueFmtNEW\" o40, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnitFmt\" o41, \"ENLocal_BLM_BALANCE\".\"CacheExpirationDate\" o42, \"ENLocal_BLM_BALANCE\".\"ShowRecurrPack\" o43, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmt\" o44, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmtUnit\" o45, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmt\" o46, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnit\" o47, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmt\" o48, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnit\" o49, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountFmt\" o50, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountUnitFmt\" o51, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtFmt\" o52, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnitFmt\" o53, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtFmt\" o54, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnitFm\" o55";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BLM_BALANCE\" \"ENLocal_BLM_BALANCE\"";
fromAndWhereSql += " WHERE (\"ENLocal_BLM_BALANCE\".\"ServiceId\" = :qpstServiceId)";
argsList.add("qpstServiceId", /*TEXT*/ 0, qpstServiceId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BLM_BALANCERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BLM_BALANCEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalBLMBALANCEByServiceIdVar.value;
});
};
return getLocalBLMBALANCEByServiceIdAggr().then(function () {
// TempBLMBalance = GetLocalBLMBALANCEByServiceId.List.Current.Local_BLM_BALANCE
vars.value.tempBLMBalanceVar = getLocalBLMBALANCEByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr;
// Execute Action: Cache_ValidationByService
return BALANCE_MBPController.default.cache_ValidationByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr, false, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, true, getLocalBLMBALANCEByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.cacheExpirationDateAttr, callContext).then(function (value) {
cache_ValidationByServiceVar.value = value;
});
}).then(function () {
// Invalid cache or no data?
return OS.Flow.executeSequence(function () {
if(((!(cache_ValidationByServiceVar.value.useCacheOut) || getLocalBLMBALANCEByServiceIdVar.value.listOut.isEmpty))) {
// Execute Action: CurrDateTimeToUTC
currDateTimeToUTCVar.value = Essentials_MOBController.default.time_ConvertToUTC$Action(OS.BuiltinFunctions.currDateTime(), callContext);

// Execute Action: GetKanguruConsumptions_BP
return controller.getKanguruConsumptions_BP$ServerAction(vars.value.applicationInLocal, vars.value.processInLocal, currDateTimeToUTCVar.value.timestampOut, vars.value.refreshTokenInLocal, OS.BuiltinFunctions.textToLongInteger(vars.value.associationIdInLocal), vars.value.serviceIdInLocal, callContext).then(function (value) {
getKanguruConsumptions_BPVar.value = value;
}).then(function () {
// Success?
return OS.Flow.executeSequence(function () {
if((getKanguruConsumptions_BPVar.value.successOut)) {
// TempBLMBalance
// TempBLMBalance.ServiceId = ServiceId
vars.value.tempBLMBalanceVar.serviceIdAttr = vars.value.serviceIdInLocal;
// TempBLMBalance.MaxValueToRestablishNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.MaxValueToRestablish
vars.value.tempBLMBalanceVar.maxValueToRestablishNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.maxValueToRestablishAttr);
// TempBLMBalance.PlafondExtraNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.PlafondExtra
vars.value.tempBLMBalanceVar.plafondExtraNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.plafondExtraAttr);
// TempBLMBalance.AvailableValueNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.AvailableValue
vars.value.tempBLMBalanceVar.availableValueNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.availableValueAttr);
// TempBLMBalance.SpentValueNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.SpentValue
vars.value.tempBLMBalanceVar.spentValueNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.spentValueAttr);
// TempBLMBalance.TotalValueNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.TotalValue
vars.value.tempBLMBalanceVar.totalValueNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.totalValueAttr);
// TempBLMBalance.UETrafficAmountNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UETrafficAmount
vars.value.tempBLMBalanceVar.uETrafficAmountNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uETrafficAmountAttr);
// TempBLMBalance.UERoamingExpireDate = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UERoamingExpireDate
vars.value.tempBLMBalanceVar.uERoamingExpireDateAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uERoamingExpireDateAttr;
// TempBLMBalance.IsUnlimited = GetKanguruConsumptions_BP.IsUnlimited
vars.value.tempBLMBalanceVar.isUnlimitedAttr = getKanguruConsumptions_BPVar.value.isUnlimitedOut;
// TempBLMBalance.AvailableValueUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.AvailableValueUnit
vars.value.tempBLMBalanceVar.availableValueUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.availableValueUnitAttr;
// TempBLMBalance.SpentValueUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.SpentValueUnit
vars.value.tempBLMBalanceVar.spentValueUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.spentValueUnitAttr;
// TempBLMBalance.TotalValueUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.TotalValueUnit
vars.value.tempBLMBalanceVar.totalValueUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.totalValueUnitAttr;
// TempBLMBalance.PlafondExtraUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.PlafondExtraUnit
vars.value.tempBLMBalanceVar.plafondExtraUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.plafondExtraUnitAttr;
// TempBLMBalance.RMTrafficAmountNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMTrafficAmount
vars.value.tempBLMBalanceVar.rMTrafficAmountNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMTrafficAmountAttr);
// TempBLMBalance.RMTrafficAmountUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMTrafficAmountUnit
vars.value.tempBLMBalanceVar.rMTrafficAmountUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMTrafficAmountUnitAttr;
// TempBLMBalance.RMRoamingExpireDate = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMRoamingExpireDate
vars.value.tempBLMBalanceVar.rMRoamingExpireDateAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMRoamingExpireDateAttr;
// TempBLMBalance.HappyHourValueNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.HappyHourValue
vars.value.tempBLMBalanceVar.happyHourValueNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.happyHourValueAttr);
// TempBLMBalance.HappyHourValueUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.HappyHourValueUnit
vars.value.tempBLMBalanceVar.happyHourValueUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.happyHourValueUnitAttr;
// TempBLMBalance.MaxValueToRestablishUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.MaxValueToRestablishUnit
vars.value.tempBLMBalanceVar.maxValueToRestablishUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.maxValueToRestablishUnitAttr;
// TempBLMBalance.UETrafficAmountUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UETrafficAmountUnit
vars.value.tempBLMBalanceVar.uETrafficAmountUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uETrafficAmountUnitAttr;
// TempBLMBalance.ShowPlafondExtra = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowPlafondExtra
vars.value.tempBLMBalanceVar.showPlafondExtraAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showPlafondExtraAttr;
// TempBLMBalance.ShowMaxValueToRestablish = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowMaxValueToRestablish
vars.value.tempBLMBalanceVar.showMaxValueToRestablishAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showMaxValueToRestablishAttr;
// TempBLMBalance.ShowUETraffic = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowUETraffic
vars.value.tempBLMBalanceVar.showUETrafficAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showUETrafficAttr;
// TempBLMBalance.ShowRMTraffic = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowRMTraffic
vars.value.tempBLMBalanceVar.showRMTrafficAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showRMTrafficAttr;
// TempBLMBalance.ShowHappyHour = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowHappyHour
vars.value.tempBLMBalanceVar.showHappyHourAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showHappyHourAttr;
// TempBLMBalance.MaxValueToRestablishFmtNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.MaxValueToRestablishFmt
vars.value.tempBLMBalanceVar.maxValueToRestablishFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.maxValueToRestablishFmtAttr);
// TempBLMBalance.MaxValueToRestablishUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.MaxValueToRestablishUnitFmt
vars.value.tempBLMBalanceVar.maxValueToRestablishUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.maxValueToRestablishUnitFmtAttr;
// TempBLMBalance.PlafondExtraFmtNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.PlafondExtraFmt
vars.value.tempBLMBalanceVar.plafondExtraFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.plafondExtraFmtAttr);
// TempBLMBalance.PlafondExtraUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.PlafondExtraUnitFmt
vars.value.tempBLMBalanceVar.plafondExtraUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.plafondExtraUnitFmtAttr;
// TempBLMBalance.AvailableValueFmtNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.AvailableValueFmt
vars.value.tempBLMBalanceVar.availableValueFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.availableValueFmtAttr);
// TempBLMBalance.AvailableValueUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.AvailableValueUnitFmt
vars.value.tempBLMBalanceVar.availableValueUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.availableValueUnitFmtAttr;
// TempBLMBalance.SpentValueFmtNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.SpentValueFmt
vars.value.tempBLMBalanceVar.spentValueFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.spentValueFmtAttr);
// TempBLMBalance.SpentValueUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.SpentValueUnitFmt
vars.value.tempBLMBalanceVar.spentValueUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.spentValueUnitFmtAttr;
// TempBLMBalance.TotalValueFmtNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.TotalValueFmt
vars.value.tempBLMBalanceVar.totalValueFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.totalValueFmtAttr);
// TempBLMBalance.TotalValueUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.TotalValueUnitFmt
vars.value.tempBLMBalanceVar.totalValueUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.totalValueUnitFmtAttr;
// TempBLMBalance.UETrafficAmountFmtNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UETrafficAmountFmt
vars.value.tempBLMBalanceVar.uETrafficAmountFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uETrafficAmountFmtAttr);
// TempBLMBalance.UETrafficAmountUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UETrafficAmountUnitFmt
vars.value.tempBLMBalanceVar.uETrafficAmountUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uETrafficAmountUnitFmtAttr;
// TempBLMBalance.RMTrafficAmountFmtNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMTrafficAmountFmt
vars.value.tempBLMBalanceVar.rMTrafficAmountFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMTrafficAmountFmtAttr);
// TempBLMBalance.RMTrafficAmountUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMTrafficAmountUnitFmt
vars.value.tempBLMBalanceVar.rMTrafficAmountUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMTrafficAmountUnitFmtAttr;
// TempBLMBalance.HappyHourValueFmtNEW = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.HappyHourValueFmt
vars.value.tempBLMBalanceVar.happyHourValueFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.happyHourValueFmtAttr);
// TempBLMBalance.HappyHourValueUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.HappyHourValueUnitFmt
vars.value.tempBLMBalanceVar.happyHourValueUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.happyHourValueUnitFmtAttr;
// TempBLMBalance.CacheExpirationDate = Cache_ValidationByService.CacheExpirationDate
vars.value.tempBLMBalanceVar.cacheExpirationDateAttr = cache_ValidationByServiceVar.value.cacheExpirationDateOut;
// TempBLMBalance.ShowRecurrPack = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowRecurrentPackage
vars.value.tempBLMBalanceVar.showRecurrPackAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showRecurrentPackageAttr;
// TempBLMBalance.RecurrPackAmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAmount
vars.value.tempBLMBalanceVar.recurrPackAmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAmountAttr);
// TempBLMBalance.RecurrPackAmtUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAmountUnit
vars.value.tempBLMBalanceVar.recurrPackAmtUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAmountUnitAttr;
// TempBLMBalance.RecurrPackInitialAmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageInitialAmount
vars.value.tempBLMBalanceVar.recurrPackInitialAmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageInitialAmountAttr);
// TempBLMBalance.RecurrPackInitialAmtUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageInitialAmountUnit
vars.value.tempBLMBalanceVar.recurrPackInitialAmtUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageInitialAmountUnitAttr;
// TempBLMBalance.RecurrPackAvailableAmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAvailableAmount
vars.value.tempBLMBalanceVar.recurrPackAvailableAmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAvailableAmountAttr);
// TempBLMBalance.RecurrPackAvailableAmtUnit = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAvailableAmountUnit
vars.value.tempBLMBalanceVar.recurrPackAvailableAmtUnitAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAvailableAmountUnitAttr;
// TempBLMBalance.RecurrPackAmountFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAmountFmt
vars.value.tempBLMBalanceVar.recurrPackAmountFmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAmountFmtAttr);
// TempBLMBalance.RecurrPackAmountUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAmountUnitFmt
vars.value.tempBLMBalanceVar.recurrPackAmountUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAmountUnitFmtAttr;
// TempBLMBalance.RecurrPackInitialAmtFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageInitialAmountFmt
vars.value.tempBLMBalanceVar.recurrPackInitialAmtFmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageInitialAmountFmtAttr);
// TempBLMBalance.RecurrPackInitialAmtUnitFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageInitialAmountUnitFmt
vars.value.tempBLMBalanceVar.recurrPackInitialAmtUnitFmtAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageInitialAmountUnitFmtAttr;
// TempBLMBalance.RecurrPackAvailableAmtFmt = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAvailableAmountFmt
vars.value.tempBLMBalanceVar.recurrPackAvailableAmtFmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAvailableAmountFmtAttr);
// TempBLMBalance.RecurrPackAvailableAmtUnitFm = GetKanguruConsumptions_BP.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAvailableAmountUnitFmt
vars.value.tempBLMBalanceVar.recurrPackAvailableAmtUnitFmAttr = getKanguruConsumptions_BPVar.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAvailableAmountUnitFmtAttr;
// Execute Action: CreateOrUpdateLocal_BLM_BALANCE_Logic
return BALANCE_MBPController.default.createOrUpdateLocal_BLM_BALANCE_Logic$Action(BALANCE_MBPModel.Local_BLM_BALANCERecord.fromStructure(vars.value.tempBLMBalanceVar), callContext).then(function (value) {
createOrUpdateLocal_BLM_BALANCE_LogicVar.value = value;
});
} else {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

}

});
});
}

});
}).then(function () {
// Aggregate: GetLocalBLMBALANCEByServiceId2
var getLocalBLMBALANCEByServiceId2Aggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BLM_BALANCERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstServiceId = vars.value.serviceIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55";
} else {
selectSql += "\"ENLocal_BLM_BALANCE\".\"Id\" o0, \"ENLocal_BLM_BALANCE\".\"ServiceId\" o1, \"ENLocal_BLM_BALANCE\".\"IsUnlimited\" o2, \"ENLocal_BLM_BALANCE\".\"AvailableValueNEW\" o3, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnit\" o4, \"ENLocal_BLM_BALANCE\".\"SpentValueNEW\" o5, \"ENLocal_BLM_BALANCE\".\"SpentValueUnit\" o6, \"ENLocal_BLM_BALANCE\".\"TotalValueNEW\" o7, \"ENLocal_BLM_BALANCE\".\"TotalValueUnit\" o8, \"ENLocal_BLM_BALANCE\".\"ShowPlafondExtra\" o9, \"ENLocal_BLM_BALANCE\".\"PlafondExtraNEW\" o10, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnit\" o11, \"ENLocal_BLM_BALANCE\".\"ShowMaxValueToRestablish\" o12, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishNEW\" o13, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnit\" o14, \"ENLocal_BLM_BALANCE\".\"ShowUETraffic\" o15, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountNEW\" o16, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnit\" o17, \"ENLocal_BLM_BALANCE\".\"UERoamingExpireDate\" o18, \"ENLocal_BLM_BALANCE\".\"ShowRMTraffic\" o19, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountNEW\" o20, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnit\" o21, \"ENLocal_BLM_BALANCE\".\"RMRoamingExpireDate\" o22, \"ENLocal_BLM_BALANCE\".\"ShowHappyHour\" o23, \"ENLocal_BLM_BALANCE\".\"HappyHourValueNEW\" o24, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnit\" o25, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishFmtNEW\" o26, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnitFmt\" o27, \"ENLocal_BLM_BALANCE\".\"PlafondExtraFmtNEW\" o28, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnitFmt\" o29, \"ENLocal_BLM_BALANCE\".\"AvailableValueFmtNEW\" o30, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnitFmt\" o31, \"ENLocal_BLM_BALANCE\".\"SpentValueFmtNEW\" o32, \"ENLocal_BLM_BALANCE\".\"SpentValueUnitFmt\" o33, \"ENLocal_BLM_BALANCE\".\"TotalValueFmtNEW\" o34, \"ENLocal_BLM_BALANCE\".\"TotalValueUnitFmt\" o35, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountFmtNEW\" o36, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnitFmt\" o37, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountFmtNEW\" o38, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnitFmt\" o39, \"ENLocal_BLM_BALANCE\".\"HappyHourValueFmtNEW\" o40, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnitFmt\" o41, \"ENLocal_BLM_BALANCE\".\"CacheExpirationDate\" o42, \"ENLocal_BLM_BALANCE\".\"ShowRecurrPack\" o43, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmt\" o44, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmtUnit\" o45, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmt\" o46, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnit\" o47, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmt\" o48, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnit\" o49, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountFmt\" o50, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountUnitFmt\" o51, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtFmt\" o52, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnitFmt\" o53, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtFmt\" o54, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnitFm\" o55";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BLM_BALANCE\" \"ENLocal_BLM_BALANCE\"";
fromAndWhereSql += " WHERE (\"ENLocal_BLM_BALANCE\".\"ServiceId\" = :qpstServiceId)";
argsList.add("qpstServiceId", /*TEXT*/ 0, qpstServiceId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BLM_BALANCERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BLM_BALANCEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalBLMBALANCEByServiceId2Var.value;
});
};
return getLocalBLMBALANCEByServiceId2Aggr();
}).then(function () {
// IsEmpty?
if((getLocalBLMBALANCEByServiceId2Var.value.listOut.isEmpty)) {
// Success = False
outVars.value.successOut = false;
} else {
// Success = True
outVars.value.successOut = true;
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.GetKanguruConsumptions", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetKanguruConsumptions$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ServiceId",
attrName: "serviceIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TempBLMBalance",
attrName: "tempBLMBalanceVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BLM_BALANCERec();
},
complexType: BALANCE_MBPModel.Local_BLM_BALANCERec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetKanguruConsumptions$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getKanguruConsumptions$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, associationIdIn, serviceIdIn, processIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
associationIdIn = (associationIdIn === undefined) ? "" : associationIdIn;
serviceIdIn = (serviceIdIn === undefined) ? "" : serviceIdIn;
processIn = (processIn === undefined) ? "" : processIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getKanguruConsumptions$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(serviceIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetKanguruConsumptions_v2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "Essentials_MOB.controller", "BALANCE_MBP.model$Local_BLM_BALANCERecord", "BALANCE_MBP.controller$CreateOrUpdateLocal_BLM_BALANCE_Logic", "BALANCE_MBP.controller$Cache_ValidationByService", "BALANCE_MBP.model$STR_KANGURU_CONSUMPTIONSRecord", "BALANCE_MBP.controller$ServerAction.GetKanguruConsumptions_BP_v2", "Essentials_MOB.controller$Time_ConvertToUTC", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$Essentials_MOB", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_BLM_BALANCERec", "BALANCE_MBP.model$Local_BLM_BALANCERecordList", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, Essentials_MOBController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getKanguruConsumptions_v2$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, associationIdIn, serviceIdIn, processIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetKanguruConsumptions_v2$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.serviceIdInLocal = serviceIdIn;
vars.value.processInLocal = processIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getKanguruConsumptions_BP_v2Var = new OS.DataTypes.VariableHolder();
var createOrUpdateLocal_BLM_BALANCE_LogicVar = new OS.DataTypes.VariableHolder();
var cache_ValidationByServiceVar = new OS.DataTypes.VariableHolder();
var currDateTimeToUTCVar = new OS.DataTypes.VariableHolder();
var getLocalBLMBALANCEByServiceIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BLM_BALANCERecordList))());
var getLocalBLMBALANCEByServiceId2Var = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_BLM_BALANCERecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetKanguruConsumptions_v2$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalBLMBALANCEByServiceId
var getLocalBLMBALANCEByServiceIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BLM_BALANCERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstServiceId = vars.value.serviceIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55";
} else {
selectSql += "\"ENLocal_BLM_BALANCE\".\"Id\" o0, \"ENLocal_BLM_BALANCE\".\"ServiceId\" o1, \"ENLocal_BLM_BALANCE\".\"IsUnlimited\" o2, \"ENLocal_BLM_BALANCE\".\"AvailableValueNEW\" o3, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnit\" o4, \"ENLocal_BLM_BALANCE\".\"SpentValueNEW\" o5, \"ENLocal_BLM_BALANCE\".\"SpentValueUnit\" o6, \"ENLocal_BLM_BALANCE\".\"TotalValueNEW\" o7, \"ENLocal_BLM_BALANCE\".\"TotalValueUnit\" o8, \"ENLocal_BLM_BALANCE\".\"ShowPlafondExtra\" o9, \"ENLocal_BLM_BALANCE\".\"PlafondExtraNEW\" o10, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnit\" o11, \"ENLocal_BLM_BALANCE\".\"ShowMaxValueToRestablish\" o12, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishNEW\" o13, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnit\" o14, \"ENLocal_BLM_BALANCE\".\"ShowUETraffic\" o15, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountNEW\" o16, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnit\" o17, \"ENLocal_BLM_BALANCE\".\"UERoamingExpireDate\" o18, \"ENLocal_BLM_BALANCE\".\"ShowRMTraffic\" o19, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountNEW\" o20, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnit\" o21, \"ENLocal_BLM_BALANCE\".\"RMRoamingExpireDate\" o22, \"ENLocal_BLM_BALANCE\".\"ShowHappyHour\" o23, \"ENLocal_BLM_BALANCE\".\"HappyHourValueNEW\" o24, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnit\" o25, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishFmtNEW\" o26, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnitFmt\" o27, \"ENLocal_BLM_BALANCE\".\"PlafondExtraFmtNEW\" o28, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnitFmt\" o29, \"ENLocal_BLM_BALANCE\".\"AvailableValueFmtNEW\" o30, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnitFmt\" o31, \"ENLocal_BLM_BALANCE\".\"SpentValueFmtNEW\" o32, \"ENLocal_BLM_BALANCE\".\"SpentValueUnitFmt\" o33, \"ENLocal_BLM_BALANCE\".\"TotalValueFmtNEW\" o34, \"ENLocal_BLM_BALANCE\".\"TotalValueUnitFmt\" o35, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountFmtNEW\" o36, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnitFmt\" o37, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountFmtNEW\" o38, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnitFmt\" o39, \"ENLocal_BLM_BALANCE\".\"HappyHourValueFmtNEW\" o40, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnitFmt\" o41, \"ENLocal_BLM_BALANCE\".\"CacheExpirationDate\" o42, \"ENLocal_BLM_BALANCE\".\"ShowRecurrPack\" o43, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmt\" o44, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmtUnit\" o45, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmt\" o46, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnit\" o47, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmt\" o48, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnit\" o49, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountFmt\" o50, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountUnitFmt\" o51, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtFmt\" o52, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnitFmt\" o53, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtFmt\" o54, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnitFm\" o55";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BLM_BALANCE\" \"ENLocal_BLM_BALANCE\"";
fromAndWhereSql += " WHERE (\"ENLocal_BLM_BALANCE\".\"ServiceId\" = :qpstServiceId)";
argsList.add("qpstServiceId", /*TEXT*/ 0, qpstServiceId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BLM_BALANCERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BLM_BALANCEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalBLMBALANCEByServiceIdVar.value;
});
};
return getLocalBLMBALANCEByServiceIdAggr().then(function () {
// TempBLMBalance = GetLocalBLMBALANCEByServiceId.List.Current.Local_BLM_BALANCE
vars.value.tempBLMBalanceVar = getLocalBLMBALANCEByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr;
// Execute Action: Cache_ValidationByService
return BALANCE_MBPController.default.cache_ValidationByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.balanceInfoAttr, false, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, true, getLocalBLMBALANCEByServiceIdVar.value.listOut.getCurrent(callContext.iterationContext).local_BLM_BALANCEAttr.cacheExpirationDateAttr, callContext).then(function (value) {
cache_ValidationByServiceVar.value = value;
});
}).then(function () {
// Invalid cache or no data?
return OS.Flow.executeSequence(function () {
if(((!(cache_ValidationByServiceVar.value.useCacheOut) || getLocalBLMBALANCEByServiceIdVar.value.listOut.isEmpty))) {
// Execute Action: CurrDateTimeToUTC
currDateTimeToUTCVar.value = Essentials_MOBController.default.time_ConvertToUTC$Action(OS.BuiltinFunctions.currDateTime(), callContext);

// Execute Action: GetKanguruConsumptions_BP_v2
return controller.getKanguruConsumptions_BP_v2$ServerAction(vars.value.applicationInLocal, vars.value.processInLocal, currDateTimeToUTCVar.value.timestampOut, vars.value.refreshTokenInLocal, OS.BuiltinFunctions.textToLongInteger(vars.value.associationIdInLocal), vars.value.serviceIdInLocal, callContext).then(function (value) {
getKanguruConsumptions_BP_v2Var.value = value;
}).then(function () {
// Success?
return OS.Flow.executeSequence(function () {
if((getKanguruConsumptions_BP_v2Var.value.successOut)) {
// TempBLMBalance
// TempBLMBalance.ServiceId = ServiceId
vars.value.tempBLMBalanceVar.serviceIdAttr = vars.value.serviceIdInLocal;
// TempBLMBalance.MaxValueToRestablishNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.MaxValueToRestablish
vars.value.tempBLMBalanceVar.maxValueToRestablishNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.maxValueToRestablishAttr);
// TempBLMBalance.PlafondExtraNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.PlafondExtra
vars.value.tempBLMBalanceVar.plafondExtraNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.plafondExtraAttr);
// TempBLMBalance.AvailableValueNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.AvailableValue
vars.value.tempBLMBalanceVar.availableValueNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.availableValueAttr);
// TempBLMBalance.SpentValueNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.SpentValue
vars.value.tempBLMBalanceVar.spentValueNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.spentValueAttr);
// TempBLMBalance.TotalValueNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.TotalValue
vars.value.tempBLMBalanceVar.totalValueNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.totalValueAttr);
// TempBLMBalance.UETrafficAmountNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UETrafficAmount
vars.value.tempBLMBalanceVar.uETrafficAmountNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uETrafficAmountAttr);
// TempBLMBalance.UERoamingExpireDate = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UERoamingExpireDate
vars.value.tempBLMBalanceVar.uERoamingExpireDateAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uERoamingExpireDateAttr;
// TempBLMBalance.IsUnlimited = GetKanguruConsumptions_BP_v2.IsUnlimited
vars.value.tempBLMBalanceVar.isUnlimitedAttr = getKanguruConsumptions_BP_v2Var.value.isUnlimitedOut;
// TempBLMBalance.AvailableValueUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.AvailableValueUnit
vars.value.tempBLMBalanceVar.availableValueUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.availableValueUnitAttr;
// TempBLMBalance.SpentValueUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.SpentValueUnit
vars.value.tempBLMBalanceVar.spentValueUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.spentValueUnitAttr;
// TempBLMBalance.TotalValueUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.TotalValueUnit
vars.value.tempBLMBalanceVar.totalValueUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.totalValueUnitAttr;
// TempBLMBalance.PlafondExtraUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.PlafondExtraUnit
vars.value.tempBLMBalanceVar.plafondExtraUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.plafondExtraUnitAttr;
// TempBLMBalance.RMTrafficAmountNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMTrafficAmount
vars.value.tempBLMBalanceVar.rMTrafficAmountNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMTrafficAmountAttr);
// TempBLMBalance.RMTrafficAmountUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMTrafficAmountUnit
vars.value.tempBLMBalanceVar.rMTrafficAmountUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMTrafficAmountUnitAttr;
// TempBLMBalance.RMRoamingExpireDate = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMRoamingExpireDate
vars.value.tempBLMBalanceVar.rMRoamingExpireDateAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMRoamingExpireDateAttr;
// TempBLMBalance.HappyHourValueNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.HappyHourValue
vars.value.tempBLMBalanceVar.happyHourValueNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.happyHourValueAttr);
// TempBLMBalance.HappyHourValueUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.HappyHourValueUnit
vars.value.tempBLMBalanceVar.happyHourValueUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.happyHourValueUnitAttr;
// TempBLMBalance.MaxValueToRestablishUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.MaxValueToRestablishUnit
vars.value.tempBLMBalanceVar.maxValueToRestablishUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.maxValueToRestablishUnitAttr;
// TempBLMBalance.UETrafficAmountUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UETrafficAmountUnit
vars.value.tempBLMBalanceVar.uETrafficAmountUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uETrafficAmountUnitAttr;
// TempBLMBalance.ShowPlafondExtra = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowPlafondExtra
vars.value.tempBLMBalanceVar.showPlafondExtraAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showPlafondExtraAttr;
// TempBLMBalance.ShowMaxValueToRestablish = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowMaxValueToRestablish
vars.value.tempBLMBalanceVar.showMaxValueToRestablishAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showMaxValueToRestablishAttr;
// TempBLMBalance.ShowUETraffic = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowUETraffic
vars.value.tempBLMBalanceVar.showUETrafficAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showUETrafficAttr;
// TempBLMBalance.ShowRMTraffic = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowRMTraffic
vars.value.tempBLMBalanceVar.showRMTrafficAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showRMTrafficAttr;
// TempBLMBalance.ShowHappyHour = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowHappyHour
vars.value.tempBLMBalanceVar.showHappyHourAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showHappyHourAttr;
// TempBLMBalance.MaxValueToRestablishFmtNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.MaxValueToRestablishFmt
vars.value.tempBLMBalanceVar.maxValueToRestablishFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.maxValueToRestablishFmtAttr);
// TempBLMBalance.MaxValueToRestablishUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.MaxValueToRestablishUnitFmt
vars.value.tempBLMBalanceVar.maxValueToRestablishUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.maxValueToRestablishUnitFmtAttr;
// TempBLMBalance.PlafondExtraFmtNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.PlafondExtraFmt
vars.value.tempBLMBalanceVar.plafondExtraFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.plafondExtraFmtAttr);
// TempBLMBalance.PlafondExtraUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.PlafondExtraUnitFmt
vars.value.tempBLMBalanceVar.plafondExtraUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.plafondExtraUnitFmtAttr;
// TempBLMBalance.AvailableValueFmtNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.AvailableValueFmt
vars.value.tempBLMBalanceVar.availableValueFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.availableValueFmtAttr);
// TempBLMBalance.AvailableValueUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.AvailableValueUnitFmt
vars.value.tempBLMBalanceVar.availableValueUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.availableValueUnitFmtAttr;
// TempBLMBalance.SpentValueFmtNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.SpentValueFmt
vars.value.tempBLMBalanceVar.spentValueFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.spentValueFmtAttr);
// TempBLMBalance.SpentValueUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.SpentValueUnitFmt
vars.value.tempBLMBalanceVar.spentValueUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.spentValueUnitFmtAttr;
// TempBLMBalance.TotalValueFmtNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.TotalValueFmt
vars.value.tempBLMBalanceVar.totalValueFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.totalValueFmtAttr);
// TempBLMBalance.TotalValueUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.TotalValueUnitFmt
vars.value.tempBLMBalanceVar.totalValueUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.totalValueUnitFmtAttr;
// TempBLMBalance.UETrafficAmountFmtNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UETrafficAmountFmt
vars.value.tempBLMBalanceVar.uETrafficAmountFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uETrafficAmountFmtAttr);
// TempBLMBalance.UETrafficAmountUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.UETrafficAmountUnitFmt
vars.value.tempBLMBalanceVar.uETrafficAmountUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.uETrafficAmountUnitFmtAttr;
// TempBLMBalance.RMTrafficAmountFmtNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMTrafficAmountFmt
vars.value.tempBLMBalanceVar.rMTrafficAmountFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMTrafficAmountFmtAttr);
// TempBLMBalance.RMTrafficAmountUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RMTrafficAmountUnitFmt
vars.value.tempBLMBalanceVar.rMTrafficAmountUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.rMTrafficAmountUnitFmtAttr;
// TempBLMBalance.HappyHourValueFmtNEW = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.HappyHourValueFmt
vars.value.tempBLMBalanceVar.happyHourValueFmtNEWAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.happyHourValueFmtAttr);
// TempBLMBalance.HappyHourValueUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.HappyHourValueUnitFmt
vars.value.tempBLMBalanceVar.happyHourValueUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.happyHourValueUnitFmtAttr;
// TempBLMBalance.CacheExpirationDate = Cache_ValidationByService.CacheExpirationDate
vars.value.tempBLMBalanceVar.cacheExpirationDateAttr = cache_ValidationByServiceVar.value.cacheExpirationDateOut;
// TempBLMBalance.ShowRecurrPack = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.ShowRecurrentPackage
vars.value.tempBLMBalanceVar.showRecurrPackAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.showRecurrentPackageAttr;
// TempBLMBalance.RecurrPackAmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAmount
vars.value.tempBLMBalanceVar.recurrPackAmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAmountAttr);
// TempBLMBalance.RecurrPackAmtUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAmountUnit
vars.value.tempBLMBalanceVar.recurrPackAmtUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAmountUnitAttr;
// TempBLMBalance.RecurrPackInitialAmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageInitialAmount
vars.value.tempBLMBalanceVar.recurrPackInitialAmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageInitialAmountAttr);
// TempBLMBalance.RecurrPackInitialAmtUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageInitialAmountUnit
vars.value.tempBLMBalanceVar.recurrPackInitialAmtUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageInitialAmountUnitAttr;
// TempBLMBalance.RecurrPackAvailableAmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAvailableAmount
vars.value.tempBLMBalanceVar.recurrPackAvailableAmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAvailableAmountAttr);
// TempBLMBalance.RecurrPackAvailableAmtUnit = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAvailableAmountUnit
vars.value.tempBLMBalanceVar.recurrPackAvailableAmtUnitAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAvailableAmountUnitAttr;
// TempBLMBalance.RecurrPackAmountFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAmountFmt
vars.value.tempBLMBalanceVar.recurrPackAmountFmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAmountFmtAttr);
// TempBLMBalance.RecurrPackAmountUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAmountUnitFmt
vars.value.tempBLMBalanceVar.recurrPackAmountUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAmountUnitFmtAttr;
// TempBLMBalance.RecurrPackInitialAmtFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageInitialAmountFmt
vars.value.tempBLMBalanceVar.recurrPackInitialAmtFmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageInitialAmountFmtAttr);
// TempBLMBalance.RecurrPackInitialAmtUnitFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageInitialAmountUnitFmt
vars.value.tempBLMBalanceVar.recurrPackInitialAmtUnitFmtAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageInitialAmountUnitFmtAttr;
// TempBLMBalance.RecurrPackAvailableAmtFmt = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAvailableAmountFmt
vars.value.tempBLMBalanceVar.recurrPackAvailableAmtFmtAttr = OS.BuiltinFunctions.decimalToText(getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAvailableAmountFmtAttr);
// TempBLMBalance.RecurrPackAvailableAmtUnitFm = GetKanguruConsumptions_BP_v2.KanguruConsumptions.STR_KANGURU_CONSUMPTIONS.RecurrentPackageAvailableAmountUnitFmt
vars.value.tempBLMBalanceVar.recurrPackAvailableAmtUnitFmAttr = getKanguruConsumptions_BP_v2Var.value.kanguruConsumptionsOut.sTR_KANGURU_CONSUMPTIONSAttr.recurrentPackageAvailableAmountUnitFmtAttr;
// Execute Action: CreateOrUpdateLocal_BLM_BALANCE_Logic
return BALANCE_MBPController.default.createOrUpdateLocal_BLM_BALANCE_Logic$Action(BALANCE_MBPModel.Local_BLM_BALANCERecord.fromStructure(vars.value.tempBLMBalanceVar), callContext).then(function (value) {
createOrUpdateLocal_BLM_BALANCE_LogicVar.value = value;
});
} else {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

}

});
});
}

});
}).then(function () {
// Aggregate: GetLocalBLMBALANCEByServiceId2
var getLocalBLMBALANCEByServiceId2Aggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_BLM_BALANCERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstServiceId = vars.value.serviceIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55";
} else {
selectSql += "\"ENLocal_BLM_BALANCE\".\"Id\" o0, \"ENLocal_BLM_BALANCE\".\"ServiceId\" o1, \"ENLocal_BLM_BALANCE\".\"IsUnlimited\" o2, \"ENLocal_BLM_BALANCE\".\"AvailableValueNEW\" o3, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnit\" o4, \"ENLocal_BLM_BALANCE\".\"SpentValueNEW\" o5, \"ENLocal_BLM_BALANCE\".\"SpentValueUnit\" o6, \"ENLocal_BLM_BALANCE\".\"TotalValueNEW\" o7, \"ENLocal_BLM_BALANCE\".\"TotalValueUnit\" o8, \"ENLocal_BLM_BALANCE\".\"ShowPlafondExtra\" o9, \"ENLocal_BLM_BALANCE\".\"PlafondExtraNEW\" o10, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnit\" o11, \"ENLocal_BLM_BALANCE\".\"ShowMaxValueToRestablish\" o12, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishNEW\" o13, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnit\" o14, \"ENLocal_BLM_BALANCE\".\"ShowUETraffic\" o15, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountNEW\" o16, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnit\" o17, \"ENLocal_BLM_BALANCE\".\"UERoamingExpireDate\" o18, \"ENLocal_BLM_BALANCE\".\"ShowRMTraffic\" o19, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountNEW\" o20, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnit\" o21, \"ENLocal_BLM_BALANCE\".\"RMRoamingExpireDate\" o22, \"ENLocal_BLM_BALANCE\".\"ShowHappyHour\" o23, \"ENLocal_BLM_BALANCE\".\"HappyHourValueNEW\" o24, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnit\" o25, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishFmtNEW\" o26, \"ENLocal_BLM_BALANCE\".\"MaxValueToRestablishUnitFmt\" o27, \"ENLocal_BLM_BALANCE\".\"PlafondExtraFmtNEW\" o28, \"ENLocal_BLM_BALANCE\".\"PlafondExtraUnitFmt\" o29, \"ENLocal_BLM_BALANCE\".\"AvailableValueFmtNEW\" o30, \"ENLocal_BLM_BALANCE\".\"AvailableValueUnitFmt\" o31, \"ENLocal_BLM_BALANCE\".\"SpentValueFmtNEW\" o32, \"ENLocal_BLM_BALANCE\".\"SpentValueUnitFmt\" o33, \"ENLocal_BLM_BALANCE\".\"TotalValueFmtNEW\" o34, \"ENLocal_BLM_BALANCE\".\"TotalValueUnitFmt\" o35, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountFmtNEW\" o36, \"ENLocal_BLM_BALANCE\".\"UETrafficAmountUnitFmt\" o37, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountFmtNEW\" o38, \"ENLocal_BLM_BALANCE\".\"RMTrafficAmountUnitFmt\" o39, \"ENLocal_BLM_BALANCE\".\"HappyHourValueFmtNEW\" o40, \"ENLocal_BLM_BALANCE\".\"HappyHourValueUnitFmt\" o41, \"ENLocal_BLM_BALANCE\".\"CacheExpirationDate\" o42, \"ENLocal_BLM_BALANCE\".\"ShowRecurrPack\" o43, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmt\" o44, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmtUnit\" o45, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmt\" o46, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnit\" o47, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmt\" o48, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnit\" o49, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountFmt\" o50, \"ENLocal_BLM_BALANCE\".\"RecurrPackAmountUnitFmt\" o51, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtFmt\" o52, \"ENLocal_BLM_BALANCE\".\"RecurrPackInitialAmtUnitFmt\" o53, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtFmt\" o54, \"ENLocal_BLM_BALANCE\".\"RecurrPackAvailableAmtUnitFm\" o55";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_BLM_BALANCE\" \"ENLocal_BLM_BALANCE\"";
fromAndWhereSql += " WHERE (\"ENLocal_BLM_BALANCE\".\"ServiceId\" = :qpstServiceId)";
argsList.add("qpstServiceId", /*TEXT*/ 0, qpstServiceId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_BLM_BALANCERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_BLM_BALANCEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalBLMBALANCEByServiceId2Var.value;
});
};
return getLocalBLMBALANCEByServiceId2Aggr();
}).then(function () {
// IsEmpty?
if((getLocalBLMBALANCEByServiceId2Var.value.listOut.isEmpty)) {
// Success = False
outVars.value.successOut = false;
} else {
// Success = True
outVars.value.successOut = true;
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.GetKanguruConsumptions_v2", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetKanguruConsumptions_v2$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ServiceId",
attrName: "serviceIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TempBLMBalance",
attrName: "tempBLMBalanceVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.Local_BLM_BALANCERec();
},
complexType: BALANCE_MBPModel.Local_BLM_BALANCERec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetKanguruConsumptions_v2$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getKanguruConsumptions_v2$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, associationIdIn, serviceIdIn, processIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
associationIdIn = (associationIdIn === undefined) ? "" : associationIdIn;
serviceIdIn = (serviceIdIn === undefined) ? "" : serviceIdIn;
processIn = (processIn === undefined) ? "" : processIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getKanguruConsumptions_v2$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(serviceIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$GetLastPaymentProcess", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_LAST_PAYMENT_PROCESSRecordList", "BALANCE_MBP.model$Local_LAST_PAYMENT_PROCESSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getLastPaymentProcess$Action = function (callContext) {
callContext = controller.callContext(callContext);
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getLocalLASTPAYMENTPROCESSESVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_LAST_PAYMENT_PROCESSRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.PaymentProcessHistory.GetLastPaymentProcess$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalLASTPAYMENTPROCESSES
var getLocalLASTPAYMENTPROCESSESAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_LAST_PAYMENT_PROCESSRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 1;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3";
} else {
selectSql += "\"ENLocal_LAST_PAYMENT_PROCES\".\"Id\" o0, \"ENLocal_LAST_PAYMENT_PROCES\".\"PaymentProcess\" o1, \"ENLocal_LAST_PAYMENT_PROCES\".\"IsPartial\" o2, \"ENLocal_LAST_PAYMENT_PROCES\".\"PaymentRef\" o3";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_LAST_PAYMENT_PROCESS\" \"ENLocal_LAST_PAYMENT_PROCES\"";
orderBySql += " ORDER BY \"ENLocal_LAST_PAYMENT_PROCES\".\"PaymentProcess\" ASC ";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_LAST_PAYMENT_PROCESSRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_LAST_PAYMENT_PROCESSAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalLASTPAYMENTPROCESSESVar.value;
});
};
return getLocalLASTPAYMENTPROCESSESAggr().then(function () {
// PaymentProcess
// PaymentProcess = GetLocalLASTPAYMENTPROCESSES.List.Current.Local_LAST_PAYMENT_PROCESS.PaymentProcess
outVars.value.paymentProcessOut = getLocalLASTPAYMENTPROCESSESVar.value.listOut.getCurrent(callContext.iterationContext).local_LAST_PAYMENT_PROCESSAttr.paymentProcessAttr;
// IsPartial = GetLocalLASTPAYMENTPROCESSES.List.Current.Local_LAST_PAYMENT_PROCESS.IsPartial
outVars.value.isPartialOut = getLocalLASTPAYMENTPROCESSESVar.value.listOut.getCurrent(callContext.iterationContext).local_LAST_PAYMENT_PROCESSAttr.isPartialAttr;
// PaymentRef = GetLocalLASTPAYMENTPROCESSES.List.Current.Local_LAST_PAYMENT_PROCESS.PaymentRef
outVars.value.paymentRefOut = getLocalLASTPAYMENTPROCESSESVar.value.listOut.getCurrent(callContext.iterationContext).local_LAST_PAYMENT_PROCESSAttr.paymentRefAttr;
});
}).catch(function (ex) {
OS.Logger.trace("PaymentProcessHistory.GetLastPaymentProcess", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.PaymentProcessHistory.GetLastPaymentProcess$outVars", [{
name: "PaymentProcess",
attrName: "paymentProcessOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "IsPartial",
attrName: "isPartialOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PaymentRef",
attrName: "paymentRefOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.getLastPaymentProcess$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getLastPaymentProcess$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
PaymentProcess: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.paymentProcessOut, OS.Types.Text, true),
IsPartial: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isPartialOut, OS.Types.Boolean, true),
PaymentRef: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.paymentRefOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$GetLocal_COMMDETAILS_FILTERS_Logic", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRecord", "BALANCE_MBP.model$STR_Local_COMMDETAILS_FILTERSRec", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRecordList", "BALANCE_MBP.model$Local_COMMDETAILS_FILTERSRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getLocal_COMMDETAILS_FILTERS_Logic$Action = function (callContext) {
callContext = controller.callContext(callContext);
var getLocalCOMMDETAILSFILTERSVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.CRUD.GetLocal_COMMDETAILS_FILTERS_Logic$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalCOMMDETAILSFILTERS
var getLocalCOMMDETAILSFILTERSAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}


var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18";
} else {
selectSql += "\"ENLocal_COMMDETAILS_FILTERS\".\"Id\" o0, \"ENLocal_COMMDETAILS_FILTERS\".\"IntervalDaysMin\" o1, \"ENLocal_COMMDETAILS_FILTERS\".\"IntervalDaysMax\" o2, \"ENLocal_COMMDETAILS_FILTERS\".\"IntervalHoursMin\" o3, \"ENLocal_COMMDETAILS_FILTERS\".\"IntervalHoursMax\" o4, \"ENLocal_COMMDETAILS_FILTERS\".\"CommunicationCostMin\" o5, \"ENLocal_COMMDETAILS_FILTERS\".\"CommunicationCostMax\" o6, \"ENLocal_COMMDETAILS_FILTERS\".\"CallDurationMin\" o7, \"ENLocal_COMMDETAILS_FILTERS\".\"CallDurationMax\" o8, \"ENLocal_COMMDETAILS_FILTERS\".\"Checked_SMS\" o9, \"ENLocal_COMMDETAILS_FILTERS\".\"Checked_MMS\" o10, \"ENLocal_COMMDETAILS_FILTERS\".\"Checked_VozMovel\" o11, \"ENLocal_COMMDETAILS_FILTERS\".\"Checked_MovelNacional\" o12, \"ENLocal_COMMDETAILS_FILTERS\".\"Checked_FixaNacional\" o13, \"ENLocal_COMMDETAILS_FILTERS\".\"Checked_RoamingEuropa\" o14, \"ENLocal_COMMDETAILS_FILTERS\".\"Checked_RoamingInternational\" o15, \"ENLocal_COMMDETAILS_FILTERS\".\"Checked_ValorAcrescentado\" o16, \"ENLocal_COMMDETAILS_FILTERS\".\"QuickFilter_Checked_Pago\" o17, \"ENLocal_COMMDETAILS_FILTERS\".\"QuickFilter_Checked_SemCusto\" o18";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_COMMDETAILS_FILTERS\" \"ENLocal_COMMDETAILS_FILTERS\"";
orderBySql += " ORDER BY \"ENLocal_COMMDETAILS_FILTERS\".\"CallDurationMin\" ASC ";
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_COMMDETAILS_FILTERSRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_COMMDETAILS_FILTERSAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalCOMMDETAILSFILTERSVar.value;
});
};
return getLocalCOMMDETAILSFILTERSAggr().then(function () {
// CommunicationDetailsFilters = GetLocalCOMMDETAILSFILTERS.List.Current
outVars.value.communicationDetailsFiltersOut = OS.DataTypes.JSConversions.typeConvertRecord(getLocalCOMMDETAILSFILTERSVar.value.listOut.getCurrent(callContext.iterationContext), new BALANCE_MBPModel.STR_Local_COMMDETAILS_FILTERSRec(), function (source, target) {
target.intervalDaysMinAttr = source.local_COMMDETAILS_FILTERSAttr.intervalDaysMinAttr;
target.intervalDaysMaxAttr = source.local_COMMDETAILS_FILTERSAttr.intervalDaysMaxAttr;
target.intervalHoursMinAttr = source.local_COMMDETAILS_FILTERSAttr.intervalHoursMinAttr;
target.intervalHoursMaxAttr = source.local_COMMDETAILS_FILTERSAttr.intervalHoursMaxAttr;
target.communicationCostMinAttr = source.local_COMMDETAILS_FILTERSAttr.communicationCostMinAttr;
target.communicationCostMaxAttr = source.local_COMMDETAILS_FILTERSAttr.communicationCostMaxAttr;
target.callDurationMinAttr = source.local_COMMDETAILS_FILTERSAttr.callDurationMinAttr;
target.callDurationMaxAttr = source.local_COMMDETAILS_FILTERSAttr.callDurationMaxAttr;
target.checked_SMSAttr = source.local_COMMDETAILS_FILTERSAttr.checked_SMSAttr;
target.checked_MMSAttr = source.local_COMMDETAILS_FILTERSAttr.checked_MMSAttr;
target.checked_VozMovelAttr = source.local_COMMDETAILS_FILTERSAttr.checked_VozMovelAttr;
target.checked_MovelNacionalAttr = source.local_COMMDETAILS_FILTERSAttr.checked_MovelNacionalAttr;
target.checked_FixaNacionalAttr = source.local_COMMDETAILS_FILTERSAttr.checked_FixaNacionalAttr;
target.checked_RoamingEuropaAttr = source.local_COMMDETAILS_FILTERSAttr.checked_RoamingEuropaAttr;
target.checked_RoamingInternationalAttr = source.local_COMMDETAILS_FILTERSAttr.checked_RoamingInternationalAttr;
target.checked_ValorAcrescentadoAttr = source.local_COMMDETAILS_FILTERSAttr.checked_ValorAcrescentadoAttr;
target.quickFilter_Checked_PagoAttr = source.local_COMMDETAILS_FILTERSAttr.quickFilter_Checked_PagoAttr;
target.quickFilter_Checked_SemCustoAttr = source.local_COMMDETAILS_FILTERSAttr.quickFilter_Checked_SemCustoAttr;
return target;
});
// Id = GetLocalCOMMDETAILSFILTERS.List.Current.Local_COMMDETAILS_FILTERS.Id
outVars.value.idOut = getLocalCOMMDETAILSFILTERSVar.value.listOut.getCurrent(callContext.iterationContext).local_COMMDETAILS_FILTERSAttr.idAttr;
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.CRUD.GetLocal_COMMDETAILS_FILTERS_Logic$outVars", [{
name: "Id",
attrName: "idOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "CommunicationDetailsFilters",
attrName: "communicationDetailsFiltersOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.STR_Local_COMMDETAILS_FILTERSRec();
},
complexType: BALANCE_MBPModel.STR_Local_COMMDETAILS_FILTERSRec
}]);
BALANCE_MBPController.default.clientActionProxies.getLocal_COMMDETAILS_FILTERS_Logic$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getLocal_COMMDETAILS_FILTERS_Logic$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Id: actionResults.idOut,
CommunicationDetailsFilters: actionResults.communicationDetailsFiltersOut
};
});
};
});

define("BALANCE_MBP.controller$GetNetDistribution", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "Essentials_MOB.controller", "App_Config_MBP.controller", "BALANCE_BP.model", "Essentials_MOB.controller$Time_ConvertToUTC", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$Essentials_MOB", "BALANCE_MBP.controller$Cache_ValidationByService", "App_Config_MBP.controller$GetConfigValueAsText_MBP", "BALANCE_MBP.referencesHealth$App_Config_MBP", "BALANCE_MBP.controller$CreateOrUpdateLocal_NET_DISTRIBUTION_Logic", "BALANCE_MBP.model$STR_OfferDataRecordList", "BALANCE_MBP.controller$ServerAction.GetNetDistribution_BP", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_NET_DISTRIBUTIONRec", "BALANCE_BP.model$STR_OfferDataRec", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.model$Local_NET_DISTRIBUTIONRecordList", "BALANCE_MBP.model$STR_MSISDNList", "BALANCE_MBP.model$TextSTR_OfferDataRecordList", "BALANCE_MBP.model$TextSTR_OfferDataRecord", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, Essentials_MOBController, App_Config_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getNetDistribution$Action = function (applicationIn, associationIdIn, refreshTokenIn, cacheValidationIntervalIn, mSISDNsListIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetNetDistribution$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.mSISDNsListInLocal = mSISDNsListIn.clone();
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getNetDistribution_BPVar = new OS.DataTypes.VariableHolder();
var currDateTimeToUTCVar = new OS.DataTypes.VariableHolder();
var cache_ValidationByServiceVar = new OS.DataTypes.VariableHolder();
var getNetDistributionIDVar = new OS.DataTypes.VariableHolder();
var getNetDistributionStatusVar = new OS.DataTypes.VariableHolder();
var createOrUpdateLocal_NET_DISTRIBUTION_LogicVar = new OS.DataTypes.VariableHolder();
var getLocalNETDISTRIBUTIONSByAssociationIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecordList))());
var getLocalNETDISTRIBUTIONSByAssociationId2Var = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetNetDistribution$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// TotalPreviousAmountToDistribute = 0
outVars.value.totalPreviousAmountToDistributeOut = 0;
// TotalNextAmountToDistribute = 0
outVars.value.totalNextAmountToDistributeOut = 0;
// MSISDNsList <= 1
return OS.Flow.executeSequence(function () {
if(((vars.value.mSISDNsListInLocal.length <= 1))) {
// Success = False
outVars.value.successOut = false;
} else {
// Aggregate: GetLocalNETDISTRIBUTIONSByAssociationId
var getLocalNETDISTRIBUTIONSByAssociationIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstAssociationId = vars.value.associationIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11";
} else {
selectSql += "\"ENLocal_NET_DISTRIBUTION\".\"Id\" o0, \"ENLocal_NET_DISTRIBUTION\".\"AssociationId\" o1, \"ENLocal_NET_DISTRIBUTION\".\"MSISDN\" o2, \"ENLocal_NET_DISTRIBUTION\".\"Previous_Base\" o3, \"ENLocal_NET_DISTRIBUTION\".\"Previous_Extra\" o4, \"ENLocal_NET_DISTRIBUTION\".\"Previous_Complement\" o5, \"ENLocal_NET_DISTRIBUTION\".\"Next_Base\" o6, \"ENLocal_NET_DISTRIBUTION\".\"Next_Extra\" o7, \"ENLocal_NET_DISTRIBUTION\".\"Next_Complement\" o8, \"ENLocal_NET_DISTRIBUTION\".\"Min_Extra\" o9, \"ENLocal_NET_DISTRIBUTION\".\"Renew_Date\" o10, \"ENLocal_NET_DISTRIBUTION\".\"CacheExpirationDate\" o11";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_NET_DISTRIBUTION\" \"ENLocal_NET_DISTRIBUTION\"";
fromAndWhereSql += " WHERE (\"ENLocal_NET_DISTRIBUTION\".\"AssociationId\" = ((CAST(:qpstAssociationId AS INTEGER))))";
orderBySql += " ORDER BY \"ENLocal_NET_DISTRIBUTION\".\"MSISDN\" ASC ";
argsList.add("qpstAssociationId", /*TEXT*/ 0, qpstAssociationId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_NET_DISTRIBUTIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalNETDISTRIBUTIONSByAssociationIdVar.value;
});
};
return getLocalNETDISTRIBUTIONSByAssociationIdAggr().then(function () {
// Execute Action: Cache_ValidationByService
return BALANCE_MBPController.default.cache_ValidationByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.netDistributionAttr, false, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, true, getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_NET_DISTRIBUTIONAttr.cacheExpirationDateAttr, callContext).then(function (value) {
cache_ValidationByServiceVar.value = value;
});
}).then(function () {
return OS.Flow.executeSequence(function () {
if(((!(cache_ValidationByServiceVar.value.useCacheOut) || getLocalNETDISTRIBUTIONSByAssociationIdVar.value.listOut.isEmpty))) {
// Execute Action: CurrDateTimeToUTC
currDateTimeToUTCVar.value = Essentials_MOBController.default.time_ConvertToUTC$Action(OS.BuiltinFunctions.currDateTime(), callContext);

// Execute Action: GetNetDistributionID
return App_Config_MBPController.default.getConfigValueAsText_MBP$Action(vars.value.applicationInLocal, "OFFER_NETDISTRIBUTION_ID", callContext).then(function (value) {
getNetDistributionIDVar.value = value;
}).then(function () {
// Execute Action: GetNetDistributionStatus
return App_Config_MBPController.default.getConfigValueAsText_MBP$Action(vars.value.applicationInLocal, "OFFER_NETDISTRIBUTION_STATUS", callContext).then(function (value) {
getNetDistributionStatusVar.value = value;
});
}).then(function () {
// Execute Action: GetNetDistribution_BP
return controller.getNetDistribution_BP$ServerAction("Net Distribution", getNetDistributionIDVar.value.valueOut, getNetDistributionStatusVar.value.valueOut, OS.DataTypes.JSConversions.typeConvertRecordList(vars.value.mSISDNsListInLocal, new OS.DataTypes.TextList(), function (source, target) {
target = source.serviceIdAttr;
return target;
}), currDateTimeToUTCVar.value.timestampOut, vars.value.refreshTokenInLocal, OS.BuiltinFunctions.textToLongInteger(vars.value.associationIdInLocal), vars.value.applicationInLocal, callContext).then(function (value) {
getNetDistribution_BPVar.value = value;
});
}).then(function () {
return OS.Flow.executeSequence(function () {
if((getNetDistribution_BPVar.value.successOut)) {
// Foreach GetNetDistribution_BP.GetOfferDataOutput
callContext.iterationContext.registerIterationStart(getNetDistribution_BPVar.value.getOfferDataOutputOut);
return OS.Flow.tryFinally(function () {
var getOfferDataOutputIterator = callContext.iterationContext.getIterator(getNetDistribution_BPVar.value.getOfferDataOutputOut);
var getOfferDataOutputIndex = 0;
return OS.Flow.whileAsync(function () {
return ((getOfferDataOutputIndex < getNetDistribution_BPVar.value.getOfferDataOutputOut.length));
}, function () {
getOfferDataOutputIterator.currentRowNumber = getOfferDataOutputIndex;
// Execute Action: CreateOrUpdateLocal_NET_DISTRIBUTION_Logic
return BALANCE_MBPController.default.createOrUpdateLocal_NET_DISTRIBUTION_Logic$Action(OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.integerToIdentifier(OS.BuiltinFunctions.textToInteger(vars.value.associationIdInLocal))), getNetDistribution_BPVar.value.getOfferDataOutputOut.getItem(getOfferDataOutputIndex.valueOf()).sTR_OfferDataAttr.mSISDNAttr, getNetDistribution_BPVar.value.getOfferDataOutputOut.getItem(getOfferDataOutputIndex.valueOf()).sTR_OfferDataAttr.previous_BaseAttr, getNetDistribution_BPVar.value.getOfferDataOutputOut.getItem(getOfferDataOutputIndex.valueOf()).sTR_OfferDataAttr.previous_ExtraAttr, getNetDistribution_BPVar.value.getOfferDataOutputOut.getItem(getOfferDataOutputIndex.valueOf()).sTR_OfferDataAttr.previous_ComplementAttr, getNetDistribution_BPVar.value.getOfferDataOutputOut.getItem(getOfferDataOutputIndex.valueOf()).sTR_OfferDataAttr.next_BaseAttr, getNetDistribution_BPVar.value.getOfferDataOutputOut.getItem(getOfferDataOutputIndex.valueOf()).sTR_OfferDataAttr.next_ExtraAttr, getNetDistribution_BPVar.value.getOfferDataOutputOut.getItem(getOfferDataOutputIndex.valueOf()).sTR_OfferDataAttr.next_ComplementAttr, getNetDistribution_BPVar.value.getOfferDataOutputOut.getItem(getOfferDataOutputIndex.valueOf()).sTR_OfferDataAttr.renew_DateAttr, cache_ValidationByServiceVar.value.cacheExpirationDateOut, getNetDistribution_BPVar.value.getOfferDataOutputOut.getItem(getOfferDataOutputIndex.valueOf()).sTR_OfferDataAttr.min_ExtraAttr, callContext).then(function (value) {
createOrUpdateLocal_NET_DISTRIBUTION_LogicVar.value = value;
}).then(function () {
getOfferDataOutputIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getNetDistribution_BPVar.value.getOfferDataOutputOut);
});
} else {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

}

});
});
}

});
}).then(function () {
// Aggregate: GetLocalNETDISTRIBUTIONSByAssociationId2
var getLocalNETDISTRIBUTIONSByAssociationId2Aggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstAssociationId = vars.value.associationIdInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11";
} else {
selectSql += "\"ENLocal_NET_DISTRIBUTION\".\"Id\" o0, \"ENLocal_NET_DISTRIBUTION\".\"AssociationId\" o1, \"ENLocal_NET_DISTRIBUTION\".\"MSISDN\" o2, \"ENLocal_NET_DISTRIBUTION\".\"Previous_Base\" o3, \"ENLocal_NET_DISTRIBUTION\".\"Previous_Extra\" o4, \"ENLocal_NET_DISTRIBUTION\".\"Previous_Complement\" o5, \"ENLocal_NET_DISTRIBUTION\".\"Next_Base\" o6, \"ENLocal_NET_DISTRIBUTION\".\"Next_Extra\" o7, \"ENLocal_NET_DISTRIBUTION\".\"Next_Complement\" o8, \"ENLocal_NET_DISTRIBUTION\".\"Min_Extra\" o9, \"ENLocal_NET_DISTRIBUTION\".\"Renew_Date\" o10, \"ENLocal_NET_DISTRIBUTION\".\"CacheExpirationDate\" o11";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_NET_DISTRIBUTION\" \"ENLocal_NET_DISTRIBUTION\"";
fromAndWhereSql += " WHERE (\"ENLocal_NET_DISTRIBUTION\".\"AssociationId\" = ((CAST(:qpstAssociationId AS INTEGER))))";
orderBySql += " ORDER BY \"ENLocal_NET_DISTRIBUTION\".\"MSISDN\" ASC ";
argsList.add("qpstAssociationId", /*TEXT*/ 0, qpstAssociationId);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_NET_DISTRIBUTIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_NET_DISTRIBUTIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalNETDISTRIBUTIONSByAssociationId2Var.value;
});
};
return getLocalNETDISTRIBUTIONSByAssociationId2Aggr().then(function () {
// Foreach GetLocalNETDISTRIBUTIONSByAssociationId2.List
callContext.iterationContext.registerIterationStart(getLocalNETDISTRIBUTIONSByAssociationId2Var.value.listOut);
});
}).then(function () {
try {var getLocalNETDISTRIBUTIONSByAssociationId2Iterator = callContext.iterationContext.getIterator(getLocalNETDISTRIBUTIONSByAssociationId2Var.value.listOut);
var getLocalNETDISTRIBUTIONSByAssociationId2Index = 0;
while (((getLocalNETDISTRIBUTIONSByAssociationId2Index < getLocalNETDISTRIBUTIONSByAssociationId2Var.value.listOut.length))) {
getLocalNETDISTRIBUTIONSByAssociationId2Iterator.currentRowNumber = getLocalNETDISTRIBUTIONSByAssociationId2Index;
// Foreach MSISDNsList
callContext.iterationContext.registerIterationStart(vars.value.mSISDNsListInLocal);
try {var mSISDNsListIterator = callContext.iterationContext.getIterator(vars.value.mSISDNsListInLocal);
var mSISDNsListIndex = 0;
while (((mSISDNsListIndex < vars.value.mSISDNsListInLocal.length))) {
mSISDNsListIterator.currentRowNumber = mSISDNsListIndex;
// Same MSISDN?
if(((vars.value.mSISDNsListInLocal.getItem(mSISDNsListIndex.valueOf()).serviceIdAttr === getLocalNETDISTRIBUTIONSByAssociationId2Var.value.listOut.getItem(getLocalNETDISTRIBUTIONSByAssociationId2Index.valueOf()).local_NET_DISTRIBUTIONAttr.mSISDNAttr))) {
// TempNetDistribution.STR_OfferData = GetLocalNETDISTRIBUTIONSByAssociationId2.List.Current.Local_NET_DISTRIBUTION
vars.value.tempNetDistributionVar.sTR_OfferDataAttr = OS.DataTypes.JSConversions.typeConvertRecord(getLocalNETDISTRIBUTIONSByAssociationId2Var.value.listOut.getItem(getLocalNETDISTRIBUTIONSByAssociationId2Index.valueOf()).local_NET_DISTRIBUTIONAttr, new BALANCE_BPModel.STR_OfferDataRec(), function (source, target) {
target.mSISDNAttr = source.mSISDNAttr;
target.previous_BaseAttr = source.previous_BaseAttr;
target.previous_ExtraAttr = source.previous_ExtraAttr;
target.previous_ComplementAttr = source.previous_ComplementAttr;
target.next_BaseAttr = source.next_BaseAttr;
target.next_ExtraAttr = source.next_ExtraAttr;
target.next_ComplementAttr = source.next_ComplementAttr;
target.renew_DateAttr = source.renew_DateAttr;
target.min_ExtraAttr = source.min_ExtraAttr;
return target;
});
// TempNetDistribution.UILabel = MSISDNsList.Current.UiLabel
vars.value.tempNetDistributionVar.uILabelAttr = vars.value.mSISDNsListInLocal.getItem(mSISDNsListIndex.valueOf()).uiLabelAttr;
// TotalPreviousAmountToDistribute = TotalPreviousAmountToDistribute + TextToDecimal
outVars.value.totalPreviousAmountToDistributeOut = OS.BuiltinFunctions.decimalToInteger(OS.BuiltinFunctions.trunc(OS.BuiltinFunctions.integerToDecimal(outVars.value.totalPreviousAmountToDistributeOut).plus(OS.BuiltinFunctions.textToDecimal((getLocalNETDISTRIBUTIONSByAssociationId2Var.value.listOut.getItem(getLocalNETDISTRIBUTIONSByAssociationId2Index.valueOf()).local_NET_DISTRIBUTIONAttr.previous_ExtraAttr).toString()))));
// TotalNextAmountToDistribute = TotalNextAmountToDistribute + TextToDecimal
outVars.value.totalNextAmountToDistributeOut = OS.BuiltinFunctions.decimalToInteger(OS.BuiltinFunctions.trunc(OS.BuiltinFunctions.integerToDecimal(outVars.value.totalNextAmountToDistributeOut).plus(OS.BuiltinFunctions.textToDecimal((getLocalNETDISTRIBUTIONSByAssociationId2Var.value.listOut.getItem(getLocalNETDISTRIBUTIONSByAssociationId2Index.valueOf()).local_NET_DISTRIBUTIONAttr.next_ExtraAttr).toString()))));
// Execute Action: ListAppend2
OS.SystemActions.listAppend(outVars.value.netDistributionOut, vars.value.tempNetDistributionVar, callContext);
}

mSISDNsListIndex++;
}

} finally {
callContext.iterationContext.registerIterationEnd(vars.value.mSISDNsListInLocal);
}

getLocalNETDISTRIBUTIONSByAssociationId2Index++;
}

} finally {
callContext.iterationContext.registerIterationEnd(getLocalNETDISTRIBUTIONSByAssociationId2Var.value.listOut);
}

// Success = True
outVars.value.successOut = true;
});
}

});
}).catch(function (ex) {
OS.Logger.trace("API_Billing.GetNetDistribution", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// SetOutput
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetNetDistribution$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "MSISDNsList",
attrName: "mSISDNsListInLocal",
mandatory: true,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_MSISDNList();
},
complexType: BALANCE_MBPModel.STR_MSISDNList
}, {
name: "TempNetDistribution",
attrName: "tempNetDistributionVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.TextSTR_OfferDataRecord();
},
complexType: BALANCE_MBPModel.TextSTR_OfferDataRecord
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetNetDistribution$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "NetDistribution",
attrName: "netDistributionOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.TextSTR_OfferDataRecordList();
},
complexType: BALANCE_MBPModel.TextSTR_OfferDataRecordList
}, {
name: "TotalPreviousAmountToDistribute",
attrName: "totalPreviousAmountToDistributeOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "TotalNextAmountToDistribute",
attrName: "totalNextAmountToDistributeOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
BALANCE_MBPController.default.clientActionProxies.getNetDistribution$Action = function (applicationIn, associationIdIn, refreshTokenIn, cacheValidationIntervalIn, mSISDNsListIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
associationIdIn = (associationIdIn === undefined) ? "" : associationIdIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
mSISDNsListIn = (mSISDNsListIn === undefined) ? new BALANCE_MBPModel.STR_MSISDNList() : mSISDNsListIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getNetDistribution$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), mSISDNsListIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
NetDistribution: actionResults.netDistributionOut,
TotalPreviousAmountToDistribute: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.totalPreviousAmountToDistributeOut, OS.Types.Integer, true),
TotalNextAmountToDistribute: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.totalNextAmountToDistributeOut, OS.Types.Integer, true)
};
});
};
});

define("BALANCE_MBP.controller$GetPaygateTopUpInfo", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_TOP_UP_SELECTIONRecordList", "BALANCE_MBP.model$Local_TOP_UP_SELECTIONRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getPaygateTopUpInfo$Action = function (msisdnIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.GetPaygateTopUpInfo$vars"))());
vars.value.msisdnInLocal = msisdnIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getLocalTOPUPSELECTIONSByMSISDNVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_TOP_UP_SELECTIONRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.GetPaygateTopUpInfo$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalTOPUPSELECTIONSByMSISDN
var getLocalTOPUPSELECTIONSByMSISDNAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_TOP_UP_SELECTIONRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qpstMSISDN = vars.value.msisdnInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4";
} else {
selectSql += "\"ENLocal_TOP_UP_SELECTION\".\"Id\" o0, \"ENLocal_TOP_UP_SELECTION\".\"MSISDN\" o1, \"ENLocal_TOP_UP_SELECTION\".\"Instant\" o2, \"ENLocal_TOP_UP_SELECTION\".\"Amount\" o3, \"ENLocal_TOP_UP_SELECTION\".\"Message\" o4";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_TOP_UP_SELECTION\" \"ENLocal_TOP_UP_SELECTION\"";
fromAndWhereSql += " WHERE (\"ENLocal_TOP_UP_SELECTION\".\"MSISDN\" = :qpstMSISDN)";
orderBySql += " ORDER BY \"ENLocal_TOP_UP_SELECTION\".\"MSISDN\" ASC ";
argsList.add("qpstMSISDN", /*TEXT*/ 0, qpstMSISDN);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_TOP_UP_SELECTIONRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_TOP_UP_SELECTIONAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalTOPUPSELECTIONSByMSISDNVar.value;
});
};
return getLocalTOPUPSELECTIONSByMSISDNAggr().then(function () {
// BalanceMsg = GetLocalTOPUPSELECTIONSByMSISDN.List.Current.Local_TOP_UP_SELECTION.Message
outVars.value.balanceMsgOut = getLocalTOPUPSELECTIONSByMSISDNVar.value.listOut.getCurrent(callContext.iterationContext).local_TOP_UP_SELECTIONAttr.messageAttr;
});
}).catch(function (ex) {
OS.Logger.trace("Paygate.GetPaygateTopUpInfo", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.GetPaygateTopUpInfo$vars", [{
name: "Msisdn",
attrName: "msisdnInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.GetPaygateTopUpInfo$outVars", [{
name: "BalanceMsg",
attrName: "balanceMsgOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.getPaygateTopUpInfo$Action = function (msisdnIn) {
msisdnIn = (msisdnIn === undefined) ? "" : msisdnIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getPaygateTopUpInfo$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(msisdnIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
BalanceMsg: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.balanceMsgOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$GetProductMaximumAutoRefill", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$ManageRefills", "BALANCE_MBP.controller$ServerAction.GetProductMaximumAutoRefill_BP", "BALANCE_MBP.model$STR_EXTRA_INTERNETRec", "BALANCE_MBP.model$STR_REFILLSList", "BALANCE_MBP.model$STR_REFILLSRec"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getProductMaximumAutoRefill$Action = function (applicationIn, associationIdIn, mSISDNIn, refreshTokenIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetProductMaximumAutoRefill$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.mSISDNInLocal = mSISDNIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
var getProductMaximumAutoRefill_BPVar = new OS.DataTypes.VariableHolder();
var manageRefillsVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.GetProductMaximumAutoRefill$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetProductMaximumAutoRefill_BP
return controller.getProductMaximumAutoRefill_BP$ServerAction("", "", "", vars.value.refreshTokenInLocal, vars.value.associationIdInLocal, vars.value.mSISDNInLocal, "ProductMaximumAutoRefill", vars.value.applicationInLocal, callContext).then(function (value) {
getProductMaximumAutoRefill_BPVar.value = value;
}).then(function () {
return OS.Flow.executeSequence(function () {
if((getProductMaximumAutoRefill_BPVar.value.successOut)) {
// Execute Action: ManageRefills
return BALANCE_MBPController.default.manageRefills$Action(vars.value.applicationInLocal, vars.value.refreshTokenInLocal, vars.value.associationIdInLocal, vars.value.mSISDNInLocal, "ManageRefills", callContext).then(function (value) {
manageRefillsVar.value = value;
}).then(function () {
if((manageRefillsVar.value.successOut)) {
// OutputData
// RefillVariables.RefillCost = ManageRefills.RefillCost
vars.value.refillVariablesVar.refillCostAttr = manageRefillsVar.value.refillCostOut;
// RefillVariables.RefillVolume = ManageRefills.RefillVolume
vars.value.refillVariablesVar.refillVolumeAttr = manageRefillsVar.value.refillVolumeOut;
// RefillVariables.MaxRefill = ManageRefills.RefillMax
vars.value.refillVariablesVar.maxRefillAttr = manageRefillsVar.value.refillMaxOut;
// RefillVariables.CurrentValueRefill = GetProductMaximumAutoRefill_BP.CurrentValue
vars.value.refillVariablesVar.currentValueRefillAttr = getProductMaximumAutoRefill_BPVar.value.currentValueOut;
// RefillVariables.MaximumAllowed = GetProductMaximumAutoRefill_BP.MaximumAllowed
vars.value.refillVariablesVar.maximumAllowedAttr = getProductMaximumAutoRefill_BPVar.value.maximumAllowedOut;
// RefillVariables.CurrRefill = ManageRefills.CurrRefill
vars.value.refillVariablesVar.currRefillAttr = manageRefillsVar.value.currRefillOut;
// CurrentValue
// CurrentValue = 0
vars.value.currentValueVar = 0;
while (((OS.BuiltinFunctions.textToInteger(vars.value.refillVariablesVar.maximumAllowedAttr) >= vars.value.currentValueVar))) {
if(((vars.value.currentValueVar === 0))) {
// RefillPackage.Value = CurrentValue
vars.value.refillPackageVar.valueAttr = (vars.value.currentValueVar).toString();
// RefillPackage.Volume = 0
vars.value.refillPackageVar.volumeAttr = 0;
} else {
// RefillPackage.Value = CurrentValue
vars.value.refillPackageVar.valueAttr = (vars.value.currentValueVar).toString();
// RefillPackage.Volume = RefillPackage.Volume + TextToInteger
vars.value.refillPackageVar.volumeAttr = (vars.value.refillPackageVar.volumeAttr + OS.BuiltinFunctions.textToInteger(vars.value.refillVariablesVar.refillVolumeAttr));
}

// Execute Action: ListAppend
OS.SystemActions.listAppend(outVars.value.refillPackageListOut, vars.value.refillPackageVar, callContext);
// CurrentValue = CurrentValue + 1
vars.value.currentValueVar = (vars.value.currentValueVar + 1);
}

// Success = True
outVars.value.successOut = true;
// OutputRefill = RefillVariables
outVars.value.outputRefillOut = vars.value.refillVariablesVar;
} else {
// Success = False
outVars.value.successOut = false;
}

});
} else {
// Success = False
outVars.value.successOut = false;
}

});
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetProductMaximumAutoRefill$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "MSISDN",
attrName: "mSISDNInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefillPackage",
attrName: "refillPackageVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.STR_REFILLSRec();
},
complexType: BALANCE_MBPModel.STR_REFILLSRec
}, {
name: "CurrentValue",
attrName: "currentValueVar",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "RefillVariables",
attrName: "refillVariablesVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.STR_EXTRA_INTERNETRec();
},
complexType: BALANCE_MBPModel.STR_EXTRA_INTERNETRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.GetProductMaximumAutoRefill$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "RefillPackageList",
attrName: "refillPackageListOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_REFILLSList();
},
complexType: BALANCE_MBPModel.STR_REFILLSList
}, {
name: "OutputRefill",
attrName: "outputRefillOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.STR_EXTRA_INTERNETRec();
},
complexType: BALANCE_MBPModel.STR_EXTRA_INTERNETRec
}]);
BALANCE_MBPController.default.clientActionProxies.getProductMaximumAutoRefill$Action = function (applicationIn, associationIdIn, mSISDNIn, refreshTokenIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
mSISDNIn = (mSISDNIn === undefined) ? "" : mSISDNIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getProductMaximumAutoRefill$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(mSISDNIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
RefillPackageList: actionResults.refillPackageListOut,
OutputRefill: actionResults.outputRefillOut
};
});
};
});

define("BALANCE_MBP.controller$GetSelfcareConfigValueAsText_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "App_Config_MBP.controller", "App_Config_MBP.controller$GetConfigValueAsText_MBP", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$App_Config_MBP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, App_Config_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getSelfcareConfigValueAsText_MBP$Action = function (keyIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.APP_Config.GetSelfcareConfigValueAsText_MBP$vars"))());
vars.value.keyInLocal = keyIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var getConfigValueAsText_MBPVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.APP_Config.GetSelfcareConfigValueAsText_MBP$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetConfigValueAsText_MBP
return App_Config_MBPController.default.getConfigValueAsText_MBP$Action("SELFCARE", vars.value.keyInLocal, callContext).then(function (value) {
getConfigValueAsText_MBPVar.value = value;
}).then(function () {
// Value = GetConfigValueAsText_MBP.Value
outVars.value.valueOut = getConfigValueAsText_MBPVar.value.valueOut;
});
}).catch(function (ex) {
OS.Logger.trace("APP_Config.GetSelfcareConfigValueAsText_MBP", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: LogMessage
OS.SystemActions.logMessage((((("Key: " + vars.value.keyInLocal) + "\r\n") + " Message: ") + outVars.value.valueOut), "APP_CONFIG", callContext);
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.APP_Config.GetSelfcareConfigValueAsText_MBP$vars", [{
name: "Key",
attrName: "keyInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.APP_Config.GetSelfcareConfigValueAsText_MBP$outVars", [{
name: "Value",
attrName: "valueOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.getSelfcareConfigValueAsText_MBP$Action = function (keyIn) {
keyIn = (keyIn === undefined) ? "" : keyIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getSelfcareConfigValueAsText_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(keyIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Value: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.valueOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$GetVoDUsage_MBP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_MBP.model$Local_VOD_USAGE_DATESRecordList", "BALANCE_MBP.controller$Cache_ValidationByService", "BALANCE_MBP.model$Local_VOD_USAGERecordList", "BALANCE_MBP.model$STR_VoDLINEList", "BALANCE_MBP.model$STR_VoDDateList", "BALANCE_MBP.controller$ServerAction.GetVoDUsage_BP", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_BP.model$STR_VoDDateRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP", "BALANCE_MBP.model$Local_VOD_USAGE_DATESRec", "BALANCE_MBP.model$Local_VOD_USAGERec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getVoDUsage_MBP$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, billingAccountNumberIn, startDate_InputIn, endDate_InputIn, associationIdIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.VoD.GetVoDUsage_MBP$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.cacheValidationIntervalInLocal = cacheValidationIntervalIn;
vars.value.billingAccountNumberInLocal = billingAccountNumberIn;
vars.value.startDate_InputInLocal = startDate_InputIn;
vars.value.endDate_InputInLocal = endDate_InputIn;
vars.value.associationIdInLocal = associationIdIn;
var getVoDUsage_BPVar = new OS.DataTypes.VariableHolder();
var listIndexOfDateVar = new OS.DataTypes.VariableHolder();
var cache_ValidationByServiceVar = new OS.DataTypes.VariableHolder();
var getLocalVODUSAGESByAssociationIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_VOD_USAGERecordList))());
var getVODUsageDatesVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_VOD_USAGE_DATESRecordList))());
var getVODUsagesVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_VOD_USAGERecordList))());
var getLocalVODUSAGEDATESByAssociationIdVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getAggregateOutputType(BALANCE_MBPModel.Local_VOD_USAGE_DATESRecordList))());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.VoD.GetVoDUsage_MBP$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Aggregate: GetLocalVODUSAGESByAssociationId
var getLocalVODUSAGESByAssociationIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_VOD_USAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploAssociationId = vars.value.associationIdInLocal;
var qpstBillingAccountNumber = vars.value.billingAccountNumberInLocal;
var qpdaEndDate_Input = vars.value.endDate_InputInLocal;
var qpdaStartDate_Input = vars.value.startDate_InputInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9";
} else {
selectSql += "\"ENLocal_VOD_USAGE\".\"Id\" o0, \"ENLocal_VOD_USAGE\".\"AssociationId\" o1, \"ENLocal_VOD_USAGE\".\"BillingAccountNumber\" o2, \"ENLocal_VOD_USAGE\".\"Datetime\" o3, \"ENLocal_VOD_USAGE\".\"Title\" o4, \"ENLocal_VOD_USAGE\".\"Price\" o5, \"ENLocal_VOD_USAGE\".\"EventType\" o6, \"ENLocal_VOD_USAGE\".\"ClassColor\" o7, \"ENLocal_VOD_USAGE\".\"Category\" o8, \"ENLocal_VOD_USAGE\".\"CacheExpirationDate\" o9";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_VOD_USAGE\" \"ENLocal_VOD_USAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_VOD_USAGE\".\"AssociationId\" = CAST(:qploAssociationId AS INTEGER)) AND (\"ENLocal_VOD_USAGE\".\"BillingAccountNumber\" = :qpstBillingAccountNumber) AND ((Date(\"ENLocal_VOD_USAGE\".\"Datetime\")) >= :qpdaStartDate_Input) AND ((Date(\"ENLocal_VOD_USAGE\".\"Datetime\")) <= :qpdaEndDate_Input)";
argsList.add("qploAssociationId", /*LONGINTEGER*/ 4, qploAssociationId);
argsList.add("qpstBillingAccountNumber", /*TEXT*/ 0, qpstBillingAccountNumber);
argsList.add("qpdaStartDate_Input", /*DATE*/ 7, qpdaStartDate_Input);
argsList.add("qpdaEndDate_Input", /*DATE*/ 7, qpdaEndDate_Input);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_VOD_USAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_VOD_USAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalVODUSAGESByAssociationIdVar.value;
});
};
return getLocalVODUSAGESByAssociationIdAggr().then(function () {
// Aggregate: GetLocalVODUSAGEDATESByAssociationId
var getLocalVODUSAGEDATESByAssociationIdAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_VOD_USAGE_DATESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploAssociationId = vars.value.associationIdInLocal;
var qpstBillingAccountNumber = vars.value.billingAccountNumberInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4";
} else {
selectSql += "\"ENLocal_VOD_USAGE_DATES\".\"Id\" o0, \"ENLocal_VOD_USAGE_DATES\".\"AssociationId\" o1, \"ENLocal_VOD_USAGE_DATES\".\"BillingAccountNumber\" o2, \"ENLocal_VOD_USAGE_DATES\".\"Month\" o3, \"ENLocal_VOD_USAGE_DATES\".\"Year\" o4";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_VOD_USAGE_DATES\" \"ENLocal_VOD_USAGE_DATES\"";
fromAndWhereSql += " WHERE (\"ENLocal_VOD_USAGE_DATES\".\"AssociationId\" = CAST(:qploAssociationId AS INTEGER)) AND (\"ENLocal_VOD_USAGE_DATES\".\"BillingAccountNumber\" = :qpstBillingAccountNumber)";
argsList.add("qploAssociationId", /*LONGINTEGER*/ 4, qploAssociationId);
argsList.add("qpstBillingAccountNumber", /*TEXT*/ 0, qpstBillingAccountNumber);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_VOD_USAGE_DATESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_VOD_USAGE_DATESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getLocalVODUSAGEDATESByAssociationIdVar.value;
});
};
return getLocalVODUSAGEDATESByAssociationIdAggr();
}).then(function () {
// Execute Action: Cache_ValidationByService
return BALANCE_MBPController.default.cache_ValidationByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.voDUsageAttr, false, vars.value.applicationInLocal, vars.value.cacheValidationIntervalInLocal, vars.value.refreshTokenInLocal, true, getLocalVODUSAGESByAssociationIdVar.value.listOut.getCurrent(callContext.iterationContext).local_VOD_USAGEAttr.cacheExpirationDateAttr, callContext).then(function (value) {
cache_ValidationByServiceVar.value = value;
});
}).then(function () {
if((cache_ValidationByServiceVar.value.useCacheOut)) {
// No Records
if((!((getLocalVODUSAGESByAssociationIdVar.value.listOut.isEmpty || getLocalVODUSAGEDATESByAssociationIdVar.value.listOut.isEmpty)))) {
// Execute Action: ListAppendAll
OS.SystemActions.listAppendAll(outVars.value.voDLineListOut, OS.DataTypes.JSConversions.typeConvertRecordList(getLocalVODUSAGESByAssociationIdVar.value.listOut, new BALANCE_MBPModel.STR_VoDLINEList(), function (source, target) {
target.datetimeAttr = source.local_VOD_USAGEAttr.datetimeAttr;
target.titleAttr = source.local_VOD_USAGEAttr.titleAttr;
target.priceAttr = source.local_VOD_USAGEAttr.priceAttr;
target.eventTypeAttr = source.local_VOD_USAGEAttr.eventTypeAttr;
target.classColorAttr = source.local_VOD_USAGEAttr.classColorAttr;
target.categoryAttr = source.local_VOD_USAGEAttr.categoryAttr;
return target;
}), callContext);
// Execute Action: ListAppendAll2
OS.SystemActions.listAppendAll(outVars.value.voDDateListOut, OS.DataTypes.JSConversions.typeConvertRecordList(getLocalVODUSAGEDATESByAssociationIdVar.value.listOut, new BALANCE_MBPModel.STR_VoDDateList(), function (source, target) {
target.monthAttr = source.local_VOD_USAGE_DATESAttr.monthAttr;
target.yearAttr = source.local_VOD_USAGE_DATESAttr.yearAttr;
return target;
}), callContext);
// Success = True
outVars.value.successOut = true;
return OS.Flow.returnAsync(outVars.value);

}

}

// Execute Action: GetVoDUsage_BP
return controller.getVoDUsage_BP$ServerAction(vars.value.refreshTokenInLocal, vars.value.associationIdInLocal, vars.value.billingAccountNumberInLocal, vars.value.startDate_InputInLocal, vars.value.endDate_InputInLocal, vars.value.applicationInLocal, callContext).then(function (value) {
getVoDUsage_BPVar.value = value;
}).then(function () {
// Message = GetVoDUsage_BP.Message
outVars.value.messageOut = getVoDUsage_BPVar.value.messageOut;
// Success = GetVoDUsage_BP.Success
outVars.value.successOut = getVoDUsage_BPVar.value.successOut;
});
}).then(function () {
return OS.Flow.executeSequence(function () {
if((outVars.value.successOut)) {
return OS.Flow.executeSequence(function () {
if((cache_ValidationByServiceVar.value.useCacheOut)) {
// Foreach GetLocalVODUSAGESByAssociationId.List
callContext.iterationContext.registerIterationStart(getLocalVODUSAGESByAssociationIdVar.value.listOut);
return OS.Flow.tryFinally(function () {
var getLocalVODUSAGESByAssociationIdIterator = callContext.iterationContext.getIterator(getLocalVODUSAGESByAssociationIdVar.value.listOut);
var getLocalVODUSAGESByAssociationIdIndexMax = getLocalVODUSAGESByAssociationIdVar.value.listOut.length;
var getLocalVODUSAGESByAssociationIdIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getLocalVODUSAGESByAssociationIdIndex < getLocalVODUSAGESByAssociationIdVar.value.listOut.length)) && (getLocalVODUSAGESByAssociationIdIndexMax > 0));
}, function () {
getLocalVODUSAGESByAssociationIdIterator.currentRowNumber = getLocalVODUSAGESByAssociationIdIndex;
// Execute Action: DeleteLocal_VOD_USAGE
return BALANCE_MBPModel.entities.Local_VOD_USAGE.delete(getLocalVODUSAGESByAssociationIdVar.value.listOut.getItem(getLocalVODUSAGESByAssociationIdIndex.valueOf()).local_VOD_USAGEAttr.idAttr, callContext).then(function () {
getLocalVODUSAGESByAssociationIdIndexMax--;
getLocalVODUSAGESByAssociationIdIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getLocalVODUSAGESByAssociationIdVar.value.listOut);
}).then(function () {
// Foreach GetLocalVODUSAGEDATESByAssociationId.List
callContext.iterationContext.registerIterationStart(getLocalVODUSAGEDATESByAssociationIdVar.value.listOut);
return OS.Flow.tryFinally(function () {
var getLocalVODUSAGEDATESByAssociationIdIterator = callContext.iterationContext.getIterator(getLocalVODUSAGEDATESByAssociationIdVar.value.listOut);
var getLocalVODUSAGEDATESByAssociationIdIndexMax = getLocalVODUSAGEDATESByAssociationIdVar.value.listOut.length;
var getLocalVODUSAGEDATESByAssociationIdIndex = 0;
return OS.Flow.whileAsync(function () {
return (((getLocalVODUSAGEDATESByAssociationIdIndex < getLocalVODUSAGEDATESByAssociationIdVar.value.listOut.length)) && (getLocalVODUSAGEDATESByAssociationIdIndexMax > 0));
}, function () {
getLocalVODUSAGEDATESByAssociationIdIterator.currentRowNumber = getLocalVODUSAGEDATESByAssociationIdIndex;
// Execute Action: DeleteLocal_VOD_USAGE_DATES
return BALANCE_MBPModel.entities.Local_VOD_USAGE_DATES.delete(getLocalVODUSAGEDATESByAssociationIdVar.value.listOut.getItem(getLocalVODUSAGEDATESByAssociationIdIndex.valueOf()).local_VOD_USAGE_DATESAttr.idAttr, callContext).then(function () {
getLocalVODUSAGEDATESByAssociationIdIndexMax--;
getLocalVODUSAGEDATESByAssociationIdIndex++;
});
});
}, function () {
callContext.iterationContext.registerIterationEnd(getLocalVODUSAGEDATESByAssociationIdVar.value.listOut);
});
});
} else {
// Execute Action: DeleteAllLocal_VOD_USAGE
return BALANCE_MBPModel.entities.Local_VOD_USAGE.deleteAll(callContext).then(function () {
// Execute Action: DeleteAllLocal_VOD_USAGE_DATES
return BALANCE_MBPModel.entities.Local_VOD_USAGE_DATES.deleteAll(callContext);
});
}

}).then(function () {
// Execute Action: CreateOrUpdateAllLocal_VOD_USAGE
return BALANCE_MBPModel.entities.Local_VOD_USAGE.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getVoDUsage_BPVar.value.voDLineListOut, new BALANCE_MBPModel.Local_VOD_USAGERecordList(), function (source, target) {
target.local_VOD_USAGEAttr.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.local_VOD_USAGEAttr.associationIdAttr = vars.value.associationIdInLocal;
target.local_VOD_USAGEAttr.billingAccountNumberAttr = vars.value.billingAccountNumberInLocal;
target.local_VOD_USAGEAttr.datetimeAttr = source.datetimeAttr;
target.local_VOD_USAGEAttr.titleAttr = source.titleAttr;
target.local_VOD_USAGEAttr.priceAttr = source.priceAttr;
target.local_VOD_USAGEAttr.eventTypeAttr = source.eventTypeAttr;
target.local_VOD_USAGEAttr.classColorAttr = source.classColorAttr;
target.local_VOD_USAGEAttr.categoryAttr = source.categoryAttr;
target.local_VOD_USAGEAttr.cacheExpirationDateAttr = cache_ValidationByServiceVar.value.cacheExpirationDateOut;
return target;
}), callContext).then(function () {
// Execute Action: CreateOrUpdateAllLocal_VOD_USAGE_DATES
return BALANCE_MBPModel.entities.Local_VOD_USAGE_DATES.createOrUpdateAll(OS.DataTypes.JSConversions.typeConvertRecordList(getVoDUsage_BPVar.value.voDDateListOut, new BALANCE_MBPModel.Local_VOD_USAGE_DATESRecordList(), function (source, target) {
target.local_VOD_USAGE_DATESAttr.idAttr = OS.BuiltinFunctions.integerToLongInteger(OS.BuiltinFunctions.nullIdentifier());
target.local_VOD_USAGE_DATESAttr.associationIdAttr = vars.value.associationIdInLocal;
target.local_VOD_USAGE_DATESAttr.billingAccountNumberAttr = vars.value.billingAccountNumberInLocal;
target.local_VOD_USAGE_DATESAttr.monthAttr = source.monthAttr;
target.local_VOD_USAGE_DATESAttr.yearAttr = source.yearAttr;
return target;
}), callContext);
}).then(function () {
// Aggregate: GetVODUsages
var getVODUsagesAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_VOD_USAGERecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploAssociationId = vars.value.associationIdInLocal;
var qpstBillingAccountNumber = vars.value.billingAccountNumberInLocal;
var qpdaEndDate_Input = vars.value.endDate_InputInLocal;
var qpdaStartDate_Input = vars.value.startDate_InputInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9";
} else {
selectSql += "\"ENLocal_VOD_USAGE\".\"Id\" o0, \"ENLocal_VOD_USAGE\".\"AssociationId\" o1, \"ENLocal_VOD_USAGE\".\"BillingAccountNumber\" o2, \"ENLocal_VOD_USAGE\".\"Datetime\" o3, \"ENLocal_VOD_USAGE\".\"Title\" o4, \"ENLocal_VOD_USAGE\".\"Price\" o5, \"ENLocal_VOD_USAGE\".\"EventType\" o6, \"ENLocal_VOD_USAGE\".\"ClassColor\" o7, \"ENLocal_VOD_USAGE\".\"Category\" o8, \"ENLocal_VOD_USAGE\".\"CacheExpirationDate\" o9";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_VOD_USAGE\" \"ENLocal_VOD_USAGE\"";
fromAndWhereSql += " WHERE (\"ENLocal_VOD_USAGE\".\"AssociationId\" = CAST(:qploAssociationId AS INTEGER)) AND (\"ENLocal_VOD_USAGE\".\"BillingAccountNumber\" = :qpstBillingAccountNumber) AND ((Date(\"ENLocal_VOD_USAGE\".\"Datetime\")) >= :qpdaStartDate_Input) AND ((Date(\"ENLocal_VOD_USAGE\".\"Datetime\")) <= :qpdaEndDate_Input)";
argsList.add("qploAssociationId", /*LONGINTEGER*/ 4, qploAssociationId);
argsList.add("qpstBillingAccountNumber", /*TEXT*/ 0, qpstBillingAccountNumber);
argsList.add("qpdaStartDate_Input", /*DATE*/ 7, qpdaStartDate_Input);
argsList.add("qpdaEndDate_Input", /*DATE*/ 7, qpdaEndDate_Input);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_VOD_USAGERecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_VOD_USAGEAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getVODUsagesVar.value;
});
};
return getVODUsagesAggr();
}).then(function () {
// VoDLineList = GetVODUsages.List
outVars.value.voDLineListOut = OS.DataTypes.JSConversions.typeConvertRecordList(getVODUsagesVar.value.listOut, new BALANCE_MBPModel.STR_VoDLINEList(), function (source, target) {
target.datetimeAttr = source.local_VOD_USAGEAttr.datetimeAttr;
target.titleAttr = source.local_VOD_USAGEAttr.titleAttr;
target.priceAttr = source.local_VOD_USAGEAttr.priceAttr;
target.eventTypeAttr = source.local_VOD_USAGEAttr.eventTypeAttr;
target.classColorAttr = source.local_VOD_USAGEAttr.classColorAttr;
target.categoryAttr = source.local_VOD_USAGEAttr.categoryAttr;
return target;
});
// Aggregate: GetVODUsageDates
var getVODUsageDatesAggr = function (maxRecords) {
var executeQuery = function () {
var targetListType = BALANCE_MBPModel.Local_VOD_USAGE_DATESRecordList;
var result = {
list: null,
count: OS.DataTypes.LongInteger.defaultValue
};
var countArgsList = new OS.Entities.QueryArgumentsList();
if(!(maxRecords)) {
maxRecords = 0;
}

var qploAssociationId = vars.value.associationIdInLocal;
var qpstBillingAccountNumber = vars.value.billingAccountNumberInLocal;

var optimizeSelect = false;
var selectSql = "";
var fromAndWhereSql = "";
var groupByAndHavingSql = "";
var orderBySql = "";
var argsList = new OS.Entities.QueryArgumentsList();

selectSql += "SELECT ";
if (optimizeSelect) {
selectSql += "NULL o0, NULL o1, NULL o2, NULL o3, NULL o4";
} else {
selectSql += "\"ENLocal_VOD_USAGE_DATES\".\"Id\" o0, \"ENLocal_VOD_USAGE_DATES\".\"AssociationId\" o1, \"ENLocal_VOD_USAGE_DATES\".\"BillingAccountNumber\" o2, \"ENLocal_VOD_USAGE_DATES\".\"Month\" o3, \"ENLocal_VOD_USAGE_DATES\".\"Year\" o4";
}
fromAndWhereSql += " FROM \"MAIN\".\"OSUSR_qsx_Local_VOD_USAGE_DATES\" \"ENLocal_VOD_USAGE_DATES\"";
fromAndWhereSql += " WHERE (\"ENLocal_VOD_USAGE_DATES\".\"AssociationId\" = CAST(:qploAssociationId AS INTEGER)) AND (\"ENLocal_VOD_USAGE_DATES\".\"BillingAccountNumber\" = :qpstBillingAccountNumber)";
argsList.add("qploAssociationId", /*LONGINTEGER*/ 4, qploAssociationId);
argsList.add("qpstBillingAccountNumber", /*TEXT*/ 0, qpstBillingAccountNumber);
if (maxRecords > 0) {
orderBySql += " LIMIT ";
orderBySql += maxRecords;
}
var sql = selectSql + fromAndWhereSql + groupByAndHavingSql + orderBySql;

return OS.Entities.webSQLStorageInstance.executeQuery(sql, BALANCE_MBPModel.Local_VOD_USAGE_DATESRecordList, function (rec, r) {
var indexRef = {
value: 0
};
var attrOrder = [
"local_VOD_USAGE_DATESAttr",
];
return targetListType.RecordType.fromLocalStorage(r, indexRef, attrOrder);

}, argsList).then(function (resultList) {
result.list = resultList;
}).then(function () {
}).then(function () {
return result;
});
};
return controller.executeClientAggregate(executeQuery, function () {
return getVODUsageDatesVar.value;
});
};
return getVODUsageDatesAggr();
}).then(function () {
// GetVODUsageDates
// Foreach GetVODUsageDates.List
callContext.iterationContext.registerIterationStart(getVODUsageDatesVar.value.listOut);
});
}).then(function () {
try {var getVODUsageDatesIterator = callContext.iterationContext.getIterator(getVODUsageDatesVar.value.listOut);
var getVODUsageDatesIndexMax = getVODUsageDatesVar.value.listOut.length;
var getVODUsageDatesIndex = 0;
while ((((getVODUsageDatesIndex < getVODUsageDatesVar.value.listOut.length)) && (getVODUsageDatesIndexMax > 0))) {
getVODUsageDatesIterator.currentRowNumber = getVODUsageDatesIndex;
// Execute Action: ListIndexOfDate
listIndexOfDateVar.value = OS.SystemActions.listIndexOf(getVODUsagesVar.value.listOut, function (p) {
return ((OS.BuiltinFunctions.year(p.local_VOD_USAGEAttr.datetimeAttr) === getVODUsageDatesVar.value.listOut.getItem(getVODUsageDatesIndex.valueOf()).local_VOD_USAGE_DATESAttr.yearAttr) && (OS.BuiltinFunctions.month(p.local_VOD_USAGEAttr.datetimeAttr) === getVODUsageDatesVar.value.listOut.getItem(getVODUsageDatesIndex.valueOf()).local_VOD_USAGE_DATESAttr.monthAttr));
}, callContext);

if((!((listIndexOfDateVar.value.positionOut === -1)))) {
// VoDDateRec.Month = GetVODUsageDates.List.Current.Local_VOD_USAGE_DATES.Month
vars.value.voDDateRecVar.monthAttr = getVODUsageDatesVar.value.listOut.getItem(getVODUsageDatesIndex.valueOf()).local_VOD_USAGE_DATESAttr.monthAttr;
// VoDDateRec.Year = GetVODUsageDates.List.Current.Local_VOD_USAGE_DATES.Year
vars.value.voDDateRecVar.yearAttr = getVODUsageDatesVar.value.listOut.getItem(getVODUsageDatesIndex.valueOf()).local_VOD_USAGE_DATESAttr.yearAttr;
// Execute Action: ListAppend2
OS.SystemActions.listAppend(outVars.value.voDDateListOut, vars.value.voDDateRecVar, callContext);
}

getVODUsageDatesIndexMax--;
getVODUsageDatesIndex++;
}

} finally {
callContext.iterationContext.registerIterationEnd(getVODUsageDatesVar.value.listOut);
}

});
}

});
});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.VoD.GetVoDUsage_MBP$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CacheValidationInterval",
attrName: "cacheValidationIntervalInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "BillingAccountNumber",
attrName: "billingAccountNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "StartDate_Input",
attrName: "startDate_InputInLocal",
mandatory: true,
dataType: OS.Types.Date,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "EndDate_Input",
attrName: "endDate_InputInLocal",
mandatory: true,
dataType: OS.Types.Date,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "VoDDateRec",
attrName: "voDDateRecVar",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_VoDDateRec();
},
complexType: BALANCE_BPModel.STR_VoDDateRec
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.VoD.GetVoDUsage_MBP$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "VoDLineList",
attrName: "voDLineListOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_VoDLINEList();
},
complexType: BALANCE_MBPModel.STR_VoDLINEList
}, {
name: "VoDDateList",
attrName: "voDDateListOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_VoDDateList();
},
complexType: BALANCE_MBPModel.STR_VoDDateList
}]);
BALANCE_MBPController.default.clientActionProxies.getVoDUsage_MBP$Action = function (applicationIn, refreshTokenIn, cacheValidationIntervalIn, billingAccountNumberIn, startDate_InputIn, endDate_InputIn, associationIdIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
cacheValidationIntervalIn = (cacheValidationIntervalIn === undefined) ? 0 : cacheValidationIntervalIn;
billingAccountNumberIn = (billingAccountNumberIn === undefined) ? "" : billingAccountNumberIn;
startDate_InputIn = (startDate_InputIn === undefined) ? OS.DataTypes.DateTime.defaultValue : startDate_InputIn;
endDate_InputIn = (endDate_InputIn === undefined) ? OS.DataTypes.DateTime.defaultValue : endDate_InputIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.getVoDUsage_MBP$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(cacheValidationIntervalIn, OS.Types.Integer), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(billingAccountNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(startDate_InputIn, OS.Types.Date), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(endDate_InputIn, OS.Types.Date), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
Message: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.messageOut, OS.Types.Text, true),
VoDLineList: actionResults.voDLineListOut,
VoDDateList: actionResults.voDDateListOut
};
});
};
});

define("BALANCE_MBP.controller$ManageRefills", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "App_Config_MBP.controller", "App_Config_MBP.controller$GetConfigValueAsText_MBP", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$App_Config_MBP", "BALANCE_MBP.controller$ServerAction.ManageRefills_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, App_Config_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.manageRefills$Action = function (applicationIn, refreshTokenIn, associationIdIn, mSISDNIn, processIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.ManageRefills$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.mSISDNInLocal = mSISDNIn;
vars.value.processInLocal = processIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var manageRefills_BPVar = new OS.DataTypes.VariableHolder();
var getCustomerRestrictedStatusVar = new OS.DataTypes.VariableHolder();
var getCustomerRestrictedIDVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.ManageRefills$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetCustomerRestrictedID
return App_Config_MBPController.default.getConfigValueAsText_MBP$Action(vars.value.applicationInLocal, "CUSTOMER_RESTRICTED_ID", callContext).then(function (value) {
getCustomerRestrictedIDVar.value = value;
}).then(function () {
// SetID
// ID = GetCustomerRestrictedID.Value
vars.value.iDVar = getCustomerRestrictedIDVar.value.valueOut;
// Execute Action: GetCustomerRestrictedStatus
return App_Config_MBPController.default.getConfigValueAsText_MBP$Action(vars.value.applicationInLocal, "CUSTOMER_RESTRICTED_STATUS", callContext).then(function (value) {
getCustomerRestrictedStatusVar.value = value;
});
}).then(function () {
// SetStatus
// Status = GetCustomerRestrictedStatus.Value
vars.value.statusVar = getCustomerRestrictedStatusVar.value.valueOut;
// Execute Action: ManageRefills_BP
return controller.manageRefills_BP$ServerAction(vars.value.refreshTokenInLocal, vars.value.associationIdInLocal, vars.value.mSISDNInLocal, vars.value.processInLocal, vars.value.iDVar, vars.value.statusVar, vars.value.applicationInLocal, callContext).then(function (value) {
manageRefills_BPVar.value = value;
});
}).then(function () {
// CheckBalanceCustomerRestriced.Success?
if((manageRefills_BPVar.value.successOut)) {
// IsEligibleCustomer = ManageRefills_BP.IsEligibleCustomer
outVars.value.isEligibleCustomerOut = manageRefills_BPVar.value.isEligibleCustomerOut;
// ErrorMessage = ManageRefills_BP.ErrorMessage
outVars.value.errorMessageOut = manageRefills_BPVar.value.errorMessageOut;
// RefillMax = ManageRefills_BP.RefillMax
outVars.value.refillMaxOut = manageRefills_BPVar.value.refillMaxOut;
// RefillCost = ManageRefills_BP.RefillCost
outVars.value.refillCostOut = manageRefills_BPVar.value.refillCostOut;
// RefillVolume = ManageRefills_BP.RefillVolume
outVars.value.refillVolumeOut = manageRefills_BPVar.value.refillVolumeOut;
// CurrRefill = ManageRefills_BP.CurrRefill
outVars.value.currRefillOut = manageRefills_BPVar.value.currRefillOut;
} else {
// Success = False
outVars.value.successOut = false;
}

});
}).catch(function (ex) {
OS.Logger.trace("BalanceCards.ManageRefills", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// Success = False
outVars.value.successOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.ManageRefills$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "MSISDN",
attrName: "mSISDNInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Process",
attrName: "processInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ID",
attrName: "iDVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Status",
attrName: "statusVar",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.ManageRefills$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "IsEligibleCustomer",
attrName: "isEligibleCustomerOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "ErrorMessage",
attrName: "errorMessageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefillMax",
attrName: "refillMaxOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefillCost",
attrName: "refillCostOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefillVolume",
attrName: "refillVolumeOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CurrRefill",
attrName: "currRefillOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.manageRefills$Action = function (applicationIn, refreshTokenIn, associationIdIn, mSISDNIn, processIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
mSISDNIn = (mSISDNIn === undefined) ? "" : mSISDNIn;
processIn = (processIn === undefined) ? "" : processIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.manageRefills$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(mSISDNIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(processIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true),
IsEligibleCustomer: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.isEligibleCustomerOut, OS.Types.Boolean, true),
ErrorMessage: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.errorMessageOut, OS.Types.Text, true),
RefillMax: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.refillMaxOut, OS.Types.Text, true),
RefillCost: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.refillCostOut, OS.Types.Text, true),
RefillVolume: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.refillVolumeOut, OS.Types.Text, true),
CurrRefill: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.currRefillOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$NearestMultiple", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.nearestMultiple$Action = function (inputValueIn, stepValueIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Math.NearestMultiple$vars"))());
vars.value.inputValueInLocal = inputValueIn;
vars.value.stepValueInLocal = stepValueIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Math.NearestMultiple$outVars"))());
try {// OutputValue = If
outVars.value.outputValueOut = ((OS.BuiltinFunctions.mod(OS.BuiltinFunctions.round(vars.value.inputValueInLocal.plus(vars.value.stepValueInLocal), 0), vars.value.stepValueInLocal).equals(OS.BuiltinFunctions.integerToDecimal(0))) ? (OS.BuiltinFunctions.round(vars.value.inputValueInLocal, 0).plus(vars.value.stepValueInLocal)) : (OS.BuiltinFunctions.trunc(OS.BuiltinFunctions.round(vars.value.inputValueInLocal.plus(vars.value.stepValueInLocal), 0).div(vars.value.stepValueInLocal)).times(vars.value.stepValueInLocal)));
} catch (ex) {
(function () {
OS.Logger.trace("Math.NearestMultiple", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return outVars.value;

}

throw ex;
})();
}

return outVars.value;
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Math.NearestMultiple$vars", [{
name: "InputValue",
attrName: "inputValueInLocal",
mandatory: true,
dataType: OS.Types.Decimal,
defaultValue: function () {
return OS.DataTypes.Decimal.defaultValue;
}
}, {
name: "StepValue",
attrName: "stepValueInLocal",
mandatory: true,
dataType: OS.Types.Decimal,
defaultValue: function () {
return OS.DataTypes.Decimal.defaultValue;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Math.NearestMultiple$outVars", [{
name: "OutputValue",
attrName: "outputValueOut",
mandatory: false,
dataType: OS.Types.Decimal,
defaultValue: function () {
return OS.DataTypes.Decimal.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.nearestMultiple$Action = function (inputValueIn, stepValueIn) {
inputValueIn = (inputValueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : inputValueIn;
stepValueIn = (stepValueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : stepValueIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.nearestMultiple$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(inputValueIn, OS.Types.Decimal), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(stepValueIn, OS.Types.Decimal)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
OutputValue: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.outputValueOut, OS.Types.Decimal, true)
};
});
};
});

define("BALANCE_MBP.controller$NetDistribution_ClearCache", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$Cache_DisableByService", "BALANCE_MBP.model$STR_CACHE_SERVICERec", "BALANCE_MBP.controller$GetCacheServiceID", "BALANCE_MBP.model$Local_NET_DISTRIBUTIONRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.netDistribution_ClearCache$Action = function (callContext) {
callContext = controller.callContext(callContext);
var cache_DisableByServiceVar = new OS.DataTypes.VariableHolder();
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: Cache_DisableByService
return BALANCE_MBPController.default.cache_DisableByService$Action(BALANCE_MBPController.default.getCacheServiceID$Action(callContext.withoutIterationContext()).cacheServicesOut.netDistributionAttr, callContext).then(function (value) {
cache_DisableByServiceVar.value = value;
}).then(function () {
// Execute Action: DeleteAllLocal_NET_DISTRIBUTION
return BALANCE_MBPModel.entities.Local_NET_DISTRIBUTION.deleteAll(callContext);
});
}).then(function () {
return ;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.clientActionProxies.netDistribution_ClearCache$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.netDistribution_ClearCache$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("BALANCE_MBP.controller$ParseBalanceDate", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$ServerAction.ParseDate"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.parseBalanceDate$Action = function (textInputIn, formatReceivedIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.ParseBalanceDate$vars"))());
vars.value.textInputInLocal = textInputIn;
vars.value.formatReceivedInLocal = formatReceivedIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var parseDateVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.ParseBalanceDate$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: ParseDate
return controller.parseDate$ServerAction(vars.value.textInputInLocal, vars.value.formatReceivedInLocal, callContext).then(function (value) {
parseDateVar.value = value;
}).then(function () {
// Output Variables
// DateTimeOutput = ParseDate.ParsedDate
outVars.value.dateTimeOutputOut = parseDateVar.value.parsedDateOut;
});
}).catch(function (ex) {
OS.Logger.trace("BalanceCards.ParseBalanceDate", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.ParseBalanceDate$vars", [{
name: "TextInput",
attrName: "textInputInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "FormatReceived",
attrName: "formatReceivedInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.ParseBalanceDate$outVars", [{
name: "DateTimeOutput",
attrName: "dateTimeOutputOut",
mandatory: false,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}]);
BALANCE_MBPController.default.clientActionProxies.parseBalanceDate$Action = function (textInputIn, formatReceivedIn) {
textInputIn = (textInputIn === undefined) ? "" : textInputIn;
formatReceivedIn = (formatReceivedIn === undefined) ? "" : formatReceivedIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.parseBalanceDate$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(textInputIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(formatReceivedIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
DateTimeOutput: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.dateTimeOutputOut, OS.Types.DateTime, true)
};
});
};
});

define("BALANCE_MBP.controller$SetPaygateTopUp", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$ServerAction.CreateWalletProcess_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.setPaygateTopUp$Action = function (refreshTokenIn, associationIdIn, rechargeValueIn, paymentProcessIdIn, msisdnIn, nIFIn, balanceValueIn, personNameIn, contactPhoneNumberIn, applicationIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUp$vars"))());
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.rechargeValueInLocal = rechargeValueIn;
vars.value.paymentProcessIdInLocal = paymentProcessIdIn;
vars.value.msisdnInLocal = msisdnIn;
vars.value.nIFInLocal = nIFIn;
vars.value.balanceValueInLocal = balanceValueIn;
vars.value.personNameInLocal = personNameIn;
vars.value.contactPhoneNumberInLocal = contactPhoneNumberIn;
vars.value.applicationInLocal = applicationIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var createWalletProcess_BPVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUp$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CreateWalletProcess_BP
return controller.createWalletProcess_BP$ServerAction(vars.value.refreshTokenInLocal, vars.value.associationIdInLocal, vars.value.msisdnInLocal, vars.value.paymentProcessIdInLocal, vars.value.msisdnInLocal, vars.value.nIFInLocal, vars.value.rechargeValueInLocal, vars.value.personNameInLocal, "", vars.value.contactPhoneNumberInLocal, "", "", "", false, false, vars.value.balanceValueInLocal, vars.value.applicationInLocal, callContext).then(function (value) {
createWalletProcess_BPVar.value = value;
}).then(function () {
// OperationSucess
// OperationSucess = CreateWalletProcess_BP.Success
outVars.value.operationSucessOut = createWalletProcess_BPVar.value.successOut;
// PaymentUrl = CreateWalletProcess_BP.PaymentUrl
outVars.value.paymentUrlOut = createWalletProcess_BPVar.value.paymentUrlOut;
});
}).catch(function (ex) {
OS.Logger.trace("Paygate.SetPaygateTopUp", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// OperationSucess = False
outVars.value.operationSucessOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUp$vars", [{
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "RechargeValue",
attrName: "rechargeValueInLocal",
mandatory: true,
dataType: OS.Types.Decimal,
defaultValue: function () {
return OS.DataTypes.Decimal.defaultValue;
}
}, {
name: "PaymentProcessId",
attrName: "paymentProcessIdInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Msisdn",
attrName: "msisdnInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "NIF",
attrName: "nIFInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BalanceValue",
attrName: "balanceValueInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PersonName",
attrName: "personNameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ContactPhoneNumber",
attrName: "contactPhoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUp$outVars", [{
name: "OperationSucess",
attrName: "operationSucessOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.setPaygateTopUp$Action = function (refreshTokenIn, associationIdIn, rechargeValueIn, paymentProcessIdIn, msisdnIn, nIFIn, balanceValueIn, personNameIn, contactPhoneNumberIn, applicationIn) {
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
rechargeValueIn = (rechargeValueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : rechargeValueIn;
paymentProcessIdIn = (paymentProcessIdIn === undefined) ? 0 : paymentProcessIdIn;
msisdnIn = (msisdnIn === undefined) ? "" : msisdnIn;
nIFIn = (nIFIn === undefined) ? "" : nIFIn;
balanceValueIn = (balanceValueIn === undefined) ? "" : balanceValueIn;
personNameIn = (personNameIn === undefined) ? "" : personNameIn;
contactPhoneNumberIn = (contactPhoneNumberIn === undefined) ? "" : contactPhoneNumberIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.setPaygateTopUp$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(rechargeValueIn, OS.Types.Decimal), paymentProcessIdIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(msisdnIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(nIFIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(balanceValueIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(personNameIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(contactPhoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
OperationSucess: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.operationSucessOut, OS.Types.Boolean, true),
PaymentUrl: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.paymentUrlOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$SetPaygateTopUpWithWalletCards", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.controller$ServerAction.CreateWalletProcessWithWalletCards_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.setPaygateTopUpWithWalletCards$Action = function (refreshTokenIn, associationIdIn, rechargeValueIn, paymentProcessIdIn, msisdnIn, nIFIn, balanceValueIn, personNameIn, contactPhoneNumberIn, applicationIn, paymentTypeIdIn, identifierIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUpWithWalletCards$vars"))());
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.rechargeValueInLocal = rechargeValueIn;
vars.value.paymentProcessIdInLocal = paymentProcessIdIn;
vars.value.msisdnInLocal = msisdnIn;
vars.value.nIFInLocal = nIFIn;
vars.value.balanceValueInLocal = balanceValueIn;
vars.value.personNameInLocal = personNameIn;
vars.value.contactPhoneNumberInLocal = contactPhoneNumberIn;
vars.value.applicationInLocal = applicationIn;
vars.value.paymentTypeIdInLocal = paymentTypeIdIn;
vars.value.identifierInLocal = identifierIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var createWalletProcessWithWalletCards_BPVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUpWithWalletCards$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: CreateWalletProcessWithWalletCards_BP
return controller.createWalletProcessWithWalletCards_BP$ServerAction(vars.value.refreshTokenInLocal, vars.value.associationIdInLocal, vars.value.msisdnInLocal, vars.value.paymentProcessIdInLocal, vars.value.msisdnInLocal, vars.value.nIFInLocal, vars.value.rechargeValueInLocal, vars.value.personNameInLocal, "", vars.value.contactPhoneNumberInLocal, "", "", "", false, false, vars.value.balanceValueInLocal, vars.value.applicationInLocal, vars.value.paymentTypeIdInLocal, vars.value.identifierInLocal, callContext).then(function (value) {
createWalletProcessWithWalletCards_BPVar.value = value;
}).then(function () {
// OperationSucess
// OperationSucess = CreateWalletProcessWithWalletCards_BP.Success
outVars.value.operationSucessOut = createWalletProcessWithWalletCards_BPVar.value.successOut;
// PaymentUrl = CreateWalletProcessWithWalletCards_BP.PaymentUrl
outVars.value.paymentUrlOut = createWalletProcessWithWalletCards_BPVar.value.paymentUrlOut;
});
}).catch(function (ex) {
OS.Logger.trace("Paygate.SetPaygateTopUpWithWalletCards", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// OperationSucess = False
outVars.value.operationSucessOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUpWithWalletCards$vars", [{
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "RechargeValue",
attrName: "rechargeValueInLocal",
mandatory: true,
dataType: OS.Types.Decimal,
defaultValue: function () {
return OS.DataTypes.Decimal.defaultValue;
}
}, {
name: "PaymentProcessId",
attrName: "paymentProcessIdInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Msisdn",
attrName: "msisdnInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "NIF",
attrName: "nIFInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BalanceValue",
attrName: "balanceValueInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PersonName",
attrName: "personNameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ContactPhoneNumber",
attrName: "contactPhoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PaymentTypeId",
attrName: "paymentTypeIdInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Identifier",
attrName: "identifierInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUpWithWalletCards$outVars", [{
name: "OperationSucess",
attrName: "operationSucessOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.setPaygateTopUpWithWalletCards$Action = function (refreshTokenIn, associationIdIn, rechargeValueIn, paymentProcessIdIn, msisdnIn, nIFIn, balanceValueIn, personNameIn, contactPhoneNumberIn, applicationIn, paymentTypeIdIn, identifierIn) {
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
rechargeValueIn = (rechargeValueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : rechargeValueIn;
paymentProcessIdIn = (paymentProcessIdIn === undefined) ? 0 : paymentProcessIdIn;
msisdnIn = (msisdnIn === undefined) ? "" : msisdnIn;
nIFIn = (nIFIn === undefined) ? "" : nIFIn;
balanceValueIn = (balanceValueIn === undefined) ? "" : balanceValueIn;
personNameIn = (personNameIn === undefined) ? "" : personNameIn;
contactPhoneNumberIn = (contactPhoneNumberIn === undefined) ? "" : contactPhoneNumberIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
paymentTypeIdIn = (paymentTypeIdIn === undefined) ? 0 : paymentTypeIdIn;
identifierIn = (identifierIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : identifierIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.setPaygateTopUpWithWalletCards$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(rechargeValueIn, OS.Types.Decimal), paymentProcessIdIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(msisdnIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(nIFIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(balanceValueIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(personNameIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(contactPhoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), paymentTypeIdIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(identifierIn, OS.Types.LongInteger)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
OperationSucess: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.operationSucessOut, OS.Types.Boolean, true),
PaymentUrl: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.paymentUrlOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$SetPaygateTopUpWithWalletCardsV2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "CommonPlugin.model", "BuildInfoPlugin.controller", "BALANCE_MBP.controller$ServerAction.CreateWalletProcessWithWalletCards_BPV2", "CommonPlugin.model$ErrorRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$CommonPlugin", "BuildInfoPlugin.controller$GetBuildInfo", "BALANCE_MBP.referencesHealth$BuildInfoPlugin"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, CommonPluginModel, BuildInfoPluginController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.setPaygateTopUpWithWalletCardsV2$Action = function (refreshTokenIn, associationIdIn, rechargeValueIn, paymentProcessIdIn, msisdnIn, nIFIn, balanceValueIn, personNameIn, contactPhoneNumberIn, applicationIn, paymentTypeIdIn, identifierIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUpWithWalletCardsV2$vars"))());
vars.value.refreshTokenInLocal = refreshTokenIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.rechargeValueInLocal = rechargeValueIn;
vars.value.paymentProcessIdInLocal = paymentProcessIdIn;
vars.value.msisdnInLocal = msisdnIn;
vars.value.nIFInLocal = nIFIn;
vars.value.balanceValueInLocal = balanceValueIn;
vars.value.personNameInLocal = personNameIn;
vars.value.contactPhoneNumberInLocal = contactPhoneNumberIn;
vars.value.applicationInLocal = applicationIn;
vars.value.paymentTypeIdInLocal = paymentTypeIdIn;
vars.value.identifierInLocal = identifierIn;
var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
var createWalletProcessWithWalletCards_BPV2Var = new OS.DataTypes.VariableHolder();
var getBuildInfoVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUpWithWalletCardsV2$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetBuildInfo
getBuildInfoVar.value = BuildInfoPluginController.default.getBuildInfo$Action(callContext);

// Execute Action: CreateWalletProcessWithWalletCards_BPV2
return controller.createWalletProcessWithWalletCards_BPV2$ServerAction(vars.value.refreshTokenInLocal, vars.value.associationIdInLocal, vars.value.msisdnInLocal, vars.value.paymentProcessIdInLocal, vars.value.msisdnInLocal, vars.value.nIFInLocal, vars.value.rechargeValueInLocal, vars.value.personNameInLocal, "", vars.value.contactPhoneNumberInLocal, "", "", "", false, false, vars.value.balanceValueInLocal, vars.value.applicationInLocal, vars.value.paymentTypeIdInLocal, vars.value.identifierInLocal, getBuildInfoVar.value.buildOut, callContext).then(function (value) {
createWalletProcessWithWalletCards_BPV2Var.value = value;
}).then(function () {
// OperationSucess
// OperationSucess = CreateWalletProcessWithWalletCards_BPV2.Success
outVars.value.operationSucessOut = createWalletProcessWithWalletCards_BPV2Var.value.successOut;
// PaymentUrl = CreateWalletProcessWithWalletCards_BPV2.PaymentUrl
outVars.value.paymentUrlOut = createWalletProcessWithWalletCards_BPV2Var.value.paymentUrlOut;
});
}).catch(function (ex) {
OS.Logger.trace("Paygate.SetPaygateTopUpWithWalletCardsV2", OS.Exceptions.getMessage(ex), ex.name);
// Handle Error: AllExceptions
if(!(OS.Exceptions.isSystem(ex))) {
OS.Logger.error(null, ex);
allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
return OS.Flow.executeAsyncFlow(function () {
// OperationSucess = False
outVars.value.operationSucessOut = false;
return OS.Flow.returnAsync(outVars.value);

});
}

throw ex;
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUpWithWalletCardsV2$vars", [{
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "RechargeValue",
attrName: "rechargeValueInLocal",
mandatory: true,
dataType: OS.Types.Decimal,
defaultValue: function () {
return OS.DataTypes.Decimal.defaultValue;
}
}, {
name: "PaymentProcessId",
attrName: "paymentProcessIdInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Msisdn",
attrName: "msisdnInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "NIF",
attrName: "nIFInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "BalanceValue",
attrName: "balanceValueInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PersonName",
attrName: "personNameInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "ContactPhoneNumber",
attrName: "contactPhoneNumberInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PaymentTypeId",
attrName: "paymentTypeIdInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Identifier",
attrName: "identifierInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.Paygate.SetPaygateTopUpWithWalletCardsV2$outVars", [{
name: "OperationSucess",
attrName: "operationSucessOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.clientActionProxies.setPaygateTopUpWithWalletCardsV2$Action = function (refreshTokenIn, associationIdIn, rechargeValueIn, paymentProcessIdIn, msisdnIn, nIFIn, balanceValueIn, personNameIn, contactPhoneNumberIn, applicationIn, paymentTypeIdIn, identifierIn) {
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
rechargeValueIn = (rechargeValueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : rechargeValueIn;
paymentProcessIdIn = (paymentProcessIdIn === undefined) ? 0 : paymentProcessIdIn;
msisdnIn = (msisdnIn === undefined) ? "" : msisdnIn;
nIFIn = (nIFIn === undefined) ? "" : nIFIn;
balanceValueIn = (balanceValueIn === undefined) ? "" : balanceValueIn;
personNameIn = (personNameIn === undefined) ? "" : personNameIn;
contactPhoneNumberIn = (contactPhoneNumberIn === undefined) ? "" : contactPhoneNumberIn;
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
paymentTypeIdIn = (paymentTypeIdIn === undefined) ? 0 : paymentTypeIdIn;
identifierIn = (identifierIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : identifierIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.setPaygateTopUpWithWalletCardsV2$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(rechargeValueIn, OS.Types.Decimal), paymentProcessIdIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(msisdnIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(nIFIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(balanceValueIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(personNameIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(contactPhoneNumberIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), paymentTypeIdIn, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(identifierIn, OS.Types.LongInteger)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
OperationSucess: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.operationSucessOut, OS.Types.Boolean, true),
PaymentUrl: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.paymentUrlOut, OS.Types.Text, true)
};
});
};
});

define("BALANCE_MBP.controller$ShowExpiryDate", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.showExpiryDate$Action = function (expiryDateIn, diffDaysIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.ShowExpiryDate$vars"))());
vars.value.expiryDateInLocal = expiryDateIn;
vars.value.diffDaysInLocal = diffDaysIn;
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.BalanceCards.ShowExpiryDate$outVars"))());
// Show = ExpiryDate <> NullDate and Abs <= DiffDays
outVars.value.showOut = (!(vars.value.expiryDateInLocal.equals(OS.BuiltinFunctions.nullDate())) && OS.BuiltinFunctions.abs(OS.BuiltinFunctions.integerToDecimal(OS.BuiltinFunctions.diffDays(OS.BuiltinFunctions.currDate(), vars.value.expiryDateInLocal))).lte(OS.BuiltinFunctions.integerToDecimal(vars.value.diffDaysInLocal)));
return outVars.value;
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.ShowExpiryDate$vars", [{
name: "ExpiryDate",
attrName: "expiryDateInLocal",
mandatory: true,
dataType: OS.Types.Date,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}, {
name: "DiffDays",
attrName: "diffDaysInLocal",
mandatory: true,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.BalanceCards.ShowExpiryDate$outVars", [{
name: "Show",
attrName: "showOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
BALANCE_MBPController.default.clientActionProxies.showExpiryDate$Action = function (expiryDateIn, diffDaysIn) {
expiryDateIn = (expiryDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : expiryDateIn;
diffDaysIn = (diffDaysIn === undefined) ? 0 : diffDaysIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.showExpiryDate$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(expiryDateIn, OS.Types.Date), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(diffDaysIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Show: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.showOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$UpdateProductMaximumAutoRefill", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "App_Config_MBP.controller", "App_Config_MBP.controller$GetConfigValueAsText_MBP", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$App_Config_MBP", "BALANCE_MBP.controller$ServerAction.UpdateProductMaximumAutoRefill_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, App_Config_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.updateProductMaximumAutoRefill$Action = function (applicationIn, associationIdIn, mSISDNIn, refillIn, refreshTokenIn, callContext) {
callContext = controller.callContext(callContext);
var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.UpdateProductMaximumAutoRefill$vars"))());
vars.value.applicationInLocal = applicationIn;
vars.value.associationIdInLocal = associationIdIn;
vars.value.mSISDNInLocal = mSISDNIn;
vars.value.refillInLocal = refillIn;
vars.value.refreshTokenInLocal = refreshTokenIn;
var updateProductMaximumAutoRefill_BP2Var = new OS.DataTypes.VariableHolder();
var getConfigValueAsText_MBPVar = new OS.DataTypes.VariableHolder();
var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("BALANCE_MBP.API_Billing.UpdateProductMaximumAutoRefill$outVars"))());
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: GetConfigValueAsText_MBP
return App_Config_MBPController.default.getConfigValueAsText_MBP$Action(vars.value.applicationInLocal, "Selfcare_ApplicationName", callContext).then(function (value) {
getConfigValueAsText_MBPVar.value = value;
}).then(function () {
// Execute Action: UpdateProductMaximumAutoRefill_BP2
return controller.updateProductMaximumAutoRefill_BP$ServerAction("", "", "", vars.value.refreshTokenInLocal, vars.value.associationIdInLocal, vars.value.mSISDNInLocal, "UpdateProductMaximumAutoRefill", vars.value.refillInLocal, getConfigValueAsText_MBPVar.value.valueOut, vars.value.applicationInLocal, callContext).then(function (value) {
updateProductMaximumAutoRefill_BP2Var.value = value;
});
}).then(function () {
if((updateProductMaximumAutoRefill_BP2Var.value.successOut)) {
// Success = True
outVars.value.successOut = true;
} else {
// Success = False
outVars.value.successOut = false;
}

});
}).then(function () {
return outVars.value;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.UpdateProductMaximumAutoRefill$vars", [{
name: "Application",
attrName: "applicationInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "AssociationId",
attrName: "associationIdInLocal",
mandatory: true,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "MSISDN",
attrName: "mSISDNInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Refill",
attrName: "refillInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefreshToken",
attrName: "refreshTokenInLocal",
mandatory: true,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP.API_Billing.UpdateProductMaximumAutoRefill$outVars", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
BALANCE_MBPController.default.clientActionProxies.updateProductMaximumAutoRefill$Action = function (applicationIn, associationIdIn, mSISDNIn, refillIn, refreshTokenIn) {
applicationIn = (applicationIn === undefined) ? "" : applicationIn;
associationIdIn = (associationIdIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : associationIdIn;
mSISDNIn = (mSISDNIn === undefined) ? "" : mSISDNIn;
refillIn = (refillIn === undefined) ? "" : refillIn;
refreshTokenIn = (refreshTokenIn === undefined) ? "" : refreshTokenIn;
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.updateProductMaximumAutoRefill$Action.bind(controller, OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(applicationIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(associationIdIn, OS.Types.LongInteger), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(mSISDNIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refillIn, OS.Types.Text), OS.DataTypes.JSNodeConversions.jsNodeOutputToBasicType(refreshTokenIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {
Success: OS.DataTypes.JSConversions.basicTypeToJS(actionResults.successOut, OS.Types.Boolean, true)
};
});
};
});

define("BALANCE_MBP.controller$VodConsumptions_ClearCache", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$Local_VOD_USAGERec", "BALANCE_MBP.model$Local_VOD_USAGE_DATESRec", "BALANCE_MBP.entities"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.vodConsumptions_ClearCache$Action = function (callContext) {
callContext = controller.callContext(callContext);
return OS.Flow.executeAsyncFlow(function () {
// Execute Action: DeleteAllLocal_VOD_USAGE_DATES
return BALANCE_MBPModel.entities.Local_VOD_USAGE_DATES.deleteAll(callContext).then(function () {
// Execute Action: DeleteAllLocal_VOD_USAGE
return BALANCE_MBPModel.entities.Local_VOD_USAGE.deleteAll(callContext);
});
}).then(function () {
return ;
});
};
var controller = BALANCE_MBPController.default;
BALANCE_MBPController.default.clientActionProxies.vodConsumptions_ClearCache$Action = function () {
return controller.executeActionInsideJSNode(BALANCE_MBPController.default.vodConsumptions_ClearCache$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
return {};
});
};
});

define("BALANCE_MBP.controller$ServerAction.Cache_GetCacheControlId", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.cache_GetCacheControlId$ServerAction = function (refreshTokenIn, cacheServiceIdIn, toRefreshIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
CacheServiceId: OS.DataTypes.JSConversions.basicTypeToJS(cacheServiceIdIn, OS.Types.Text),
ToRefresh: OS.DataTypes.JSConversions.basicTypeToJS(toRefreshIn, OS.Types.Boolean),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("Cache_GetCacheControlId", "screenservices/BALANCE_MBP/ActionCache_GetCacheControlId", "pJPjLgBl3UiqBlCr6RHP3Q", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCache_GetCacheControlId"))();
executeServerActionResult.cacheControlIdOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.CacheControlId, OS.Types.LongInteger);
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.minutesToInvalidateCacheOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.MinutesToInvalidateCache, OS.Types.Integer);
executeServerActionResult.isAtiveOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.isAtive, OS.Types.Boolean);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCache_GetCacheControlId", [{
name: "CacheControlId",
attrName: "cacheControlIdOut",
mandatory: false,
dataType: OS.Types.LongInteger,
defaultValue: function () {
return OS.DataTypes.LongInteger.defaultValue;
}
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "MinutesToInvalidateCache",
attrName: "minutesToInvalidateCacheOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "isAtive",
attrName: "isAtiveOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.CheckBalanceCustomerRestricted_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.checkBalanceCustomerRestricted_BP$ServerAction = function (refreshTokenIn, associationIdIn, mSISDNIn, processIn, iDIn, statusIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
MSISDN: OS.DataTypes.JSConversions.basicTypeToJS(mSISDNIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
ID: OS.DataTypes.JSConversions.basicTypeToJS(iDIn, OS.Types.Text),
Status: OS.DataTypes.JSConversions.basicTypeToJS(statusIn, OS.Types.Text),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("CheckBalanceCustomerRestricted_BP", "screenservices/BALANCE_MBP/ActionCheckBalanceCustomerRestricted_BP", "uK63JosIjKxXwDyZZhTVcA", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCheckBalanceCustomerRestricted_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.balanceRestrictedOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.BalanceRestricted, OS.Types.Boolean);
executeServerActionResult.refillRestrictedOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.RefillRestricted, OS.Types.Boolean);
executeServerActionResult.errorMessageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.ErrorMessage, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCheckBalanceCustomerRestricted_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "BalanceRestricted",
attrName: "balanceRestrictedOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "RefillRestricted",
attrName: "refillRestrictedOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "ErrorMessage",
attrName: "errorMessageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.CreateCard", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createCard$ServerAction = function (applicationIn, refreshTokenIn, payment_refIn, contract_DNIn, associationIdIn, bin_codeIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
Payment_ref: OS.DataTypes.JSConversions.basicTypeToJS(payment_refIn, OS.Types.Text),
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
Bin_code: OS.DataTypes.JSConversions.basicTypeToJS(bin_codeIn, OS.Types.Text)
};
return controller.callServerAction("CreateCard", "screenservices/BALANCE_MBP/ActionCreateCard", "G3Yf3qO1CjFDPZ6vynicFw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateCard"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateCard", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.CreateCardV2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createCardV2$ServerAction = function (applicationIn, refreshTokenIn, payment_refIn, contract_DNIn, associationIdIn, bin_codeIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
Payment_ref: OS.DataTypes.JSConversions.basicTypeToJS(payment_refIn, OS.Types.Text),
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
Bin_code: OS.DataTypes.JSConversions.basicTypeToJS(bin_codeIn, OS.Types.Text)
};
return controller.callServerAction("CreateCardV2", "screenservices/BALANCE_MBP/ActionCreateCardV2", "CM2rpeDFbOi9Nh+o+Qkjyg", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateCardV2"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.lastFourDigitsCardNumberOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.LastFourDigitsCardNumber, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateCardV2", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "LastFourDigitsCardNumber",
attrName: "lastFourDigitsCardNumberOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.CreateWalletCardsProcess_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createWalletCardsProcess_BP$ServerAction = function (applicationIn, refreshTokenIn, contract_DNIn, associationIdIn, personNameIn, contactEmailIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
PersonName: OS.DataTypes.JSConversions.basicTypeToJS(personNameIn, OS.Types.Text),
ContactEmail: OS.DataTypes.JSConversions.basicTypeToJS(contactEmailIn, OS.Types.Email)
};
return controller.callServerAction("CreateWalletCardsProcess_BP", "screenservices/BALANCE_MBP/ActionCreateWalletCardsProcess_BP", "_xt2dwXUhuRvyabJmne9MA", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletCardsProcess_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.paymentUrlOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.PaymentUrl, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletCardsProcess_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.CreateWalletCardsProcess_BPV2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createWalletCardsProcess_BPV2$ServerAction = function (applicationIn, refreshTokenIn, contract_DNIn, associationIdIn, personNameIn, contactEmailIn, appVersionCodeIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
PersonName: OS.DataTypes.JSConversions.basicTypeToJS(personNameIn, OS.Types.Text),
ContactEmail: OS.DataTypes.JSConversions.basicTypeToJS(contactEmailIn, OS.Types.Email),
AppVersionCode: OS.DataTypes.JSConversions.basicTypeToJS(appVersionCodeIn, OS.Types.Text)
};
return controller.callServerAction("CreateWalletCardsProcess_BPV2", "screenservices/BALANCE_MBP/ActionCreateWalletCardsProcess_BPV2", "c6xRzA+EYvX_E+U8odGStQ", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletCardsProcess_BPV2"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.paymentUrlOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.PaymentUrl, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletCardsProcess_BPV2", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.CreateWalletProcess_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createWalletProcess_BP$ServerAction = function (refreshTokenIn, associationIdIn, tokenValueIn, paymentProcessIdIn, operationIdIn, payment_NIFIn, orderAmountIn, personNameIn, contactEmailIn, contactPhoneNumberIn, adressStreetIn, adressCityIn, adressZipCodeIn, isSiebelIn, isBSCSIn, balanceValueIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
TokenValue: OS.DataTypes.JSConversions.basicTypeToJS(tokenValueIn, OS.Types.Text),
PaymentProcessId: OS.DataTypes.JSConversions.basicTypeToJS(paymentProcessIdIn, OS.Types.Integer),
OperationId: OS.DataTypes.JSConversions.basicTypeToJS(operationIdIn, OS.Types.Text),
Payment_NIF: OS.DataTypes.JSConversions.basicTypeToJS(payment_NIFIn, OS.Types.Text),
OrderAmount: OS.DataTypes.JSConversions.basicTypeToJS(orderAmountIn, OS.Types.Decimal),
PersonName: OS.DataTypes.JSConversions.basicTypeToJS(personNameIn, OS.Types.Text),
ContactEmail: OS.DataTypes.JSConversions.basicTypeToJS(contactEmailIn, OS.Types.Email),
ContactPhoneNumber: OS.DataTypes.JSConversions.basicTypeToJS(contactPhoneNumberIn, OS.Types.Text),
AdressStreet: OS.DataTypes.JSConversions.basicTypeToJS(adressStreetIn, OS.Types.Text),
AdressCity: OS.DataTypes.JSConversions.basicTypeToJS(adressCityIn, OS.Types.Text),
AdressZipCode: OS.DataTypes.JSConversions.basicTypeToJS(adressZipCodeIn, OS.Types.Text),
IsSiebel: OS.DataTypes.JSConversions.basicTypeToJS(isSiebelIn, OS.Types.Boolean),
IsBSCS: OS.DataTypes.JSConversions.basicTypeToJS(isBSCSIn, OS.Types.Boolean),
BalanceValue: OS.DataTypes.JSConversions.basicTypeToJS(balanceValueIn, OS.Types.Text),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("CreateWalletProcess_BP", "screenservices/BALANCE_MBP/ActionCreateWalletProcess_BP", "qPTgjqxYnyWbYGAUclJK7A", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletProcess_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.paymentUrlOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.PaymentUrl, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletProcess_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.CreateWalletProcessWithWalletCards_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createWalletProcessWithWalletCards_BP$ServerAction = function (refreshTokenIn, associationIdIn, tokenValueIn, paymentProcessIdIn, operationIdIn, payment_NIFIn, orderAmountIn, personNameIn, contactEmailIn, contactPhoneNumberIn, adressStreetIn, adressCityIn, adressZipCodeIn, isSiebelIn, isBSCSIn, balanceValueIn, applicationIn, paymentTypeIdIn, walletCardIdentifierIn, callContext) {
var controller = this.controller;
var inputs = {
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
TokenValue: OS.DataTypes.JSConversions.basicTypeToJS(tokenValueIn, OS.Types.Text),
PaymentProcessId: OS.DataTypes.JSConversions.basicTypeToJS(paymentProcessIdIn, OS.Types.Integer),
OperationId: OS.DataTypes.JSConversions.basicTypeToJS(operationIdIn, OS.Types.Text),
Payment_NIF: OS.DataTypes.JSConversions.basicTypeToJS(payment_NIFIn, OS.Types.Text),
OrderAmount: OS.DataTypes.JSConversions.basicTypeToJS(orderAmountIn, OS.Types.Decimal),
PersonName: OS.DataTypes.JSConversions.basicTypeToJS(personNameIn, OS.Types.Text),
ContactEmail: OS.DataTypes.JSConversions.basicTypeToJS(contactEmailIn, OS.Types.Email),
ContactPhoneNumber: OS.DataTypes.JSConversions.basicTypeToJS(contactPhoneNumberIn, OS.Types.Text),
AdressStreet: OS.DataTypes.JSConversions.basicTypeToJS(adressStreetIn, OS.Types.Text),
AdressCity: OS.DataTypes.JSConversions.basicTypeToJS(adressCityIn, OS.Types.Text),
AdressZipCode: OS.DataTypes.JSConversions.basicTypeToJS(adressZipCodeIn, OS.Types.Text),
IsSiebel: OS.DataTypes.JSConversions.basicTypeToJS(isSiebelIn, OS.Types.Boolean),
IsBSCS: OS.DataTypes.JSConversions.basicTypeToJS(isBSCSIn, OS.Types.Boolean),
BalanceValue: OS.DataTypes.JSConversions.basicTypeToJS(balanceValueIn, OS.Types.Text),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
PaymentTypeId: OS.DataTypes.JSConversions.basicTypeToJS(paymentTypeIdIn, OS.Types.Integer),
WalletCardIdentifier: OS.DataTypes.JSConversions.basicTypeToJS(walletCardIdentifierIn, OS.Types.LongInteger)
};
return controller.callServerAction("CreateWalletProcessWithWalletCards_BP", "screenservices/BALANCE_MBP/ActionCreateWalletProcessWithWalletCards_BP", "rsD2RHAPGspRSI9lpDHjxw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletProcessWithWalletCards_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.paymentUrlOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.PaymentUrl, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletProcessWithWalletCards_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.CreateWalletProcessWithWalletCards_BPV2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.createWalletProcessWithWalletCards_BPV2$ServerAction = function (refreshTokenIn, associationIdIn, tokenValueIn, paymentProcessIdIn, operationIdIn, payment_NIFIn, orderAmountIn, personNameIn, contactEmailIn, contactPhoneNumberIn, adressStreetIn, adressCityIn, adressZipCodeIn, isSiebelIn, isBSCSIn, balanceValueIn, applicationIn, paymentTypeIdIn, walletCardIdentifierIn, appVersionCodeIn, callContext) {
var controller = this.controller;
var inputs = {
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
TokenValue: OS.DataTypes.JSConversions.basicTypeToJS(tokenValueIn, OS.Types.Text),
PaymentProcessId: OS.DataTypes.JSConversions.basicTypeToJS(paymentProcessIdIn, OS.Types.Integer),
OperationId: OS.DataTypes.JSConversions.basicTypeToJS(operationIdIn, OS.Types.Text),
Payment_NIF: OS.DataTypes.JSConversions.basicTypeToJS(payment_NIFIn, OS.Types.Text),
OrderAmount: OS.DataTypes.JSConversions.basicTypeToJS(orderAmountIn, OS.Types.Decimal),
PersonName: OS.DataTypes.JSConversions.basicTypeToJS(personNameIn, OS.Types.Text),
ContactEmail: OS.DataTypes.JSConversions.basicTypeToJS(contactEmailIn, OS.Types.Email),
ContactPhoneNumber: OS.DataTypes.JSConversions.basicTypeToJS(contactPhoneNumberIn, OS.Types.Text),
AdressStreet: OS.DataTypes.JSConversions.basicTypeToJS(adressStreetIn, OS.Types.Text),
AdressCity: OS.DataTypes.JSConversions.basicTypeToJS(adressCityIn, OS.Types.Text),
AdressZipCode: OS.DataTypes.JSConversions.basicTypeToJS(adressZipCodeIn, OS.Types.Text),
IsSiebel: OS.DataTypes.JSConversions.basicTypeToJS(isSiebelIn, OS.Types.Boolean),
IsBSCS: OS.DataTypes.JSConversions.basicTypeToJS(isBSCSIn, OS.Types.Boolean),
BalanceValue: OS.DataTypes.JSConversions.basicTypeToJS(balanceValueIn, OS.Types.Text),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
PaymentTypeId: OS.DataTypes.JSConversions.basicTypeToJS(paymentTypeIdIn, OS.Types.Integer),
WalletCardIdentifier: OS.DataTypes.JSConversions.basicTypeToJS(walletCardIdentifierIn, OS.Types.LongInteger),
AppVersionCode: OS.DataTypes.JSConversions.basicTypeToJS(appVersionCodeIn, OS.Types.Text)
};
return controller.callServerAction("CreateWalletProcessWithWalletCards_BPV2", "screenservices/BALANCE_MBP/ActionCreateWalletProcessWithWalletCards_BPV2", "98Xx7STFZgmVCEPd+IwN3g", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletProcessWithWalletCards_BPV2"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.paymentUrlOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.PaymentUrl, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionCreateWalletProcessWithWalletCards_BPV2", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "PaymentUrl",
attrName: "paymentUrlOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.DeleteCard", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.deleteCard$ServerAction = function (applicationIn, refreshTokenIn, identifierIn, contract_DNIn, associationIdIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
Identifier: OS.DataTypes.JSConversions.basicTypeToJS(identifierIn, OS.Types.LongInteger),
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger)
};
return controller.callServerAction("DeleteCard", "screenservices/BALANCE_MBP/ActionDeleteCard", "0NSoG1wwSYWDQrp57OqCTw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionDeleteCard"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionDeleteCard", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetAllCards", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_WalletCardsList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getAllCards$ServerAction = function (applicationIn, refreshTokenIn, contract_DNIn, associationIdIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger)
};
return controller.callServerAction("GetAllCards", "screenservices/BALANCE_MBP/ActionGetAllCards", "waAHiyVyX8AQ3d1uLJJonQ", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetAllCards"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.walletCardsOut = BALANCE_MBPModel.STR_WalletCardsList.fromJS(outputs.WalletCards);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetAllCards", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "WalletCards",
attrName: "walletCardsOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_WalletCardsList();
},
complexType: BALANCE_MBPModel.STR_WalletCardsList
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetBalanceConfigs_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_BP.model$STR_BALANCE_CONFIGSRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceConfigs_BP$ServerAction = function (applicationIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetBalanceConfigs_BP", "screenservices/BALANCE_MBP/ActionGetBalanceConfigs_BP", "PDevCMxu2hrjlCyrP7ORCw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetBalanceConfigs_BP"))();
executeServerActionResult.balanceConfigsOut = BALANCE_BPModel.STR_BALANCE_CONFIGSRec.fromJS(outputs.BalanceConfigs);
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetBalanceConfigs_BP", [{
name: "BalanceConfigs",
attrName: "balanceConfigsOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_BALANCE_CONFIGSRec();
},
complexType: BALANCE_BPModel.STR_BALANCE_CONFIGSRec
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetBalanceConfigs_BP_BO", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_BP.model$STR_BALANCE_CONFIGSRec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceConfigs_BP_BO$ServerAction = function (applicationIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetBalanceConfigs_BP_BO", "screenservices/BALANCE_MBP/ActionGetBalanceConfigs_BP_BO", "Qom2_Ri9pOReUwKixi6cuA", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetBalanceConfigs_BP_BO"))();
executeServerActionResult.balanceConfigsOut = BALANCE_BPModel.STR_BALANCE_CONFIGSRec.fromJS(outputs.BalanceConfigs);
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetBalanceConfigs_BP_BO", [{
name: "BalanceConfigs",
attrName: "balanceConfigsOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_BALANCE_CONFIGSRec();
},
complexType: BALANCE_BPModel.STR_BALANCE_CONFIGSRec
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetBalanceConfigs_BP_v2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_BP.model", "BALANCE_BP.model$STR_BALANCE_CONFIGS_v2Rec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$BALANCE_BP"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, BALANCE_BPModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getBalanceConfigs_BP_v2$ServerAction = function (applicationIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetBalanceConfigs_BP_v2", "screenservices/BALANCE_MBP/ActionGetBalanceConfigs_BP_v2", "ckxKzoae+3nRZR389fziiA", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetBalanceConfigs_BP_v2"))();
executeServerActionResult.balanceConfigsOut = BALANCE_BPModel.STR_BALANCE_CONFIGS_v2Rec.fromJS(outputs.BalanceConfigs);
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetBalanceConfigs_BP_v2", [{
name: "BalanceConfigs",
attrName: "balanceConfigsOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_BPModel.STR_BALANCE_CONFIGS_v2Rec();
},
complexType: BALANCE_BPModel.STR_BALANCE_CONFIGS_v2Rec
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetCommunicationDetails_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "CON_BSCS.model", "CON_BSCS.model$DataOutput3Rec", "BALANCE_MBP.referencesHealth", "BALANCE_MBP.referencesHealth$CON_BSCS"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController, CON_BSCSModel) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getCommunicationDetails_BP$ServerAction = function (masterSytemIn, startDateIn, endDateIn, applicationIn, minCommunicationCostIn, maxCommunicationCostIn, productIdIn, startPositionIn, totalCountIn, orderFieldIn, orderByIn, callContext) {
var controller = this.controller;
var inputs = {
MasterSytem: OS.DataTypes.JSConversions.basicTypeToJS(masterSytemIn, OS.Types.Text),
StartDate: OS.DataTypes.JSConversions.basicTypeToJS(startDateIn, OS.Types.DateTime),
EndDate: OS.DataTypes.JSConversions.basicTypeToJS(endDateIn, OS.Types.DateTime),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
MinCommunicationCost: OS.DataTypes.JSConversions.basicTypeToJS(minCommunicationCostIn, OS.Types.Text),
MaxCommunicationCost: OS.DataTypes.JSConversions.basicTypeToJS(maxCommunicationCostIn, OS.Types.Text),
ProductId: OS.DataTypes.JSConversions.basicTypeToJS(productIdIn, OS.Types.Text),
StartPosition: OS.DataTypes.JSConversions.basicTypeToJS(startPositionIn, OS.Types.Text),
TotalCount: OS.DataTypes.JSConversions.basicTypeToJS(totalCountIn, OS.Types.Text),
OrderField: OS.DataTypes.JSConversions.basicTypeToJS(orderFieldIn, OS.Types.Text),
OrderBy: OS.DataTypes.JSConversions.basicTypeToJS(orderByIn, OS.Types.Text)
};
return controller.callServerAction("GetCommunicationDetails_BP", "screenservices/BALANCE_MBP/ActionGetCommunicationDetails_BP", "Ys_yfKGHappI10Zw5FjQIw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetCommunicationDetails_BP"))();
executeServerActionResult.communicationDetailsOut = CON_BSCSModel.DataOutput3Rec.fromJS(outputs.CommunicationDetails);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetCommunicationDetails_BP", [{
name: "CommunicationDetails",
attrName: "communicationDetailsOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new CON_BSCSModel.DataOutput3Rec();
},
complexType: CON_BSCSModel.DataOutput3Rec
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetCommunications_v2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_COMMUNICATIONList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getCommunications_v2$ServerAction = function (isToApplyFiltersIn, isPaidIn, hasCostsIn, productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, domainIn, communicationTypeIn, startTimeIn, endTimeIn, minCommunicationCostIn, maxCommunicationCostIn, minCallDurationIn, maxCallDurationIn, startPositionIn, lengthIn, callContext) {
var controller = this.controller;
var inputs = {
IsToApplyFilters: OS.DataTypes.JSConversions.basicTypeToJS(isToApplyFiltersIn, OS.Types.Boolean),
IsPaid: OS.DataTypes.JSConversions.basicTypeToJS(isPaidIn, OS.Types.Boolean),
HasCosts: OS.DataTypes.JSConversions.basicTypeToJS(hasCostsIn, OS.Types.Boolean),
ProductId: OS.DataTypes.JSConversions.basicTypeToJS(productIdIn, OS.Types.Text),
MasterSystem: OS.DataTypes.JSConversions.basicTypeToJS(masterSystemIn, OS.Types.Text),
StartDate: OS.DataTypes.JSConversions.basicTypeToJS(startDateIn, OS.Types.DateTime),
EndDate: OS.DataTypes.JSConversions.basicTypeToJS(endDateIn, OS.Types.DateTime),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
Domain: OS.DataTypes.JSConversions.basicTypeToJS(domainIn, OS.Types.Text),
CommunicationType: communicationTypeIn.toJS(OS.Types.Text),
StartTime: OS.DataTypes.JSConversions.basicTypeToJS(startTimeIn, OS.Types.Time),
EndTime: OS.DataTypes.JSConversions.basicTypeToJS(endTimeIn, OS.Types.Time),
MinCommunicationCost: OS.DataTypes.JSConversions.basicTypeToJS(minCommunicationCostIn, OS.Types.Text),
MaxCommunicationCost: OS.DataTypes.JSConversions.basicTypeToJS(maxCommunicationCostIn, OS.Types.Text),
MinCallDuration: OS.DataTypes.JSConversions.basicTypeToJS(minCallDurationIn, OS.Types.Text),
MaxCallDuration: OS.DataTypes.JSConversions.basicTypeToJS(maxCallDurationIn, OS.Types.Text),
StartPosition: OS.DataTypes.JSConversions.basicTypeToJS(startPositionIn, OS.Types.Integer),
Length: OS.DataTypes.JSConversions.basicTypeToJS(lengthIn, OS.Types.Integer)
};
return controller.callServerAction("GetCommunications_v2", "screenservices/BALANCE_MBP/ActionGetCommunications_v2", "YypxQqqt7lto92BQ_RT8PQ", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetCommunications_v2"))();
executeServerActionResult.comunicationsOut = BALANCE_MBPModel.STR_COMMUNICATIONList.fromJS(outputs.Comunications);
executeServerActionResult.countOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Count, OS.Types.Integer);
executeServerActionResult.countSelectedOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.CountSelected, OS.Types.Integer);
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetCommunications_v2", [{
name: "Comunications",
attrName: "comunicationsOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_COMMUNICATIONList();
},
complexType: BALANCE_MBPModel.STR_COMMUNICATIONList
}, {
name: "Count",
attrName: "countOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "CountSelected",
attrName: "countSelectedOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetCommunications_v3", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_COMMUNICATIONList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getCommunications_v3$ServerAction = function (isPaidIn, hasCostsIn, productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, domainIn, communicationTypeIn, startTimeIn, endTimeIn, minCommunicationCostIn, maxCommunicationCostIn, minCallDurationIn, maxCallDurationIn, startPositionIn, lengthIn, callContext) {
var controller = this.controller;
var inputs = {
IsPaid: OS.DataTypes.JSConversions.basicTypeToJS(isPaidIn, OS.Types.Boolean),
HasCosts: OS.DataTypes.JSConversions.basicTypeToJS(hasCostsIn, OS.Types.Boolean),
ProductId: OS.DataTypes.JSConversions.basicTypeToJS(productIdIn, OS.Types.Text),
MasterSystem: OS.DataTypes.JSConversions.basicTypeToJS(masterSystemIn, OS.Types.Text),
StartDate: OS.DataTypes.JSConversions.basicTypeToJS(startDateIn, OS.Types.DateTime),
EndDate: OS.DataTypes.JSConversions.basicTypeToJS(endDateIn, OS.Types.DateTime),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
Domain: OS.DataTypes.JSConversions.basicTypeToJS(domainIn, OS.Types.Text),
CommunicationType: communicationTypeIn.toJS(OS.Types.Text),
StartTime: OS.DataTypes.JSConversions.basicTypeToJS(startTimeIn, OS.Types.Time),
EndTime: OS.DataTypes.JSConversions.basicTypeToJS(endTimeIn, OS.Types.Time),
MinCommunicationCost: OS.DataTypes.JSConversions.basicTypeToJS(minCommunicationCostIn, OS.Types.Text),
MaxCommunicationCost: OS.DataTypes.JSConversions.basicTypeToJS(maxCommunicationCostIn, OS.Types.Text),
MinCallDuration: OS.DataTypes.JSConversions.basicTypeToJS(minCallDurationIn, OS.Types.Text),
MaxCallDuration: OS.DataTypes.JSConversions.basicTypeToJS(maxCallDurationIn, OS.Types.Text),
StartPosition: OS.DataTypes.JSConversions.basicTypeToJS(startPositionIn, OS.Types.Integer),
Length: OS.DataTypes.JSConversions.basicTypeToJS(lengthIn, OS.Types.Integer)
};
return controller.callServerAction("GetCommunications_v3", "screenservices/BALANCE_MBP/ActionGetCommunications_v3", "zb5wPCQXskLP9E_2DJARCw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetCommunications_v3"))();
executeServerActionResult.comunicationsOut = BALANCE_MBPModel.STR_COMMUNICATIONList.fromJS(outputs.Comunications);
executeServerActionResult.countOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Count, OS.Types.Integer);
executeServerActionResult.countSelectedOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.CountSelected, OS.Types.Integer);
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetCommunications_v3", [{
name: "Comunications",
attrName: "comunicationsOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_COMMUNICATIONList();
},
complexType: BALANCE_MBPModel.STR_COMMUNICATIONList
}, {
name: "Count",
attrName: "countOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "CountSelected",
attrName: "countSelectedOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetCommunications_v4", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_COMMUNICATIONList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getCommunications_v4$ServerAction = function (isPaidIn, hasNoCostsIn, productIdIn, masterSystemIn, startDateIn, endDateIn, applicationIn, minCommunicationCostIn, maxCommunicationCostIn, startPositionIn, lengthIn, callTypeIn, callContext) {
var controller = this.controller;
var inputs = {
IsPaid: OS.DataTypes.JSConversions.basicTypeToJS(isPaidIn, OS.Types.Boolean),
HasNoCosts: OS.DataTypes.JSConversions.basicTypeToJS(hasNoCostsIn, OS.Types.Boolean),
ProductId: OS.DataTypes.JSConversions.basicTypeToJS(productIdIn, OS.Types.Text),
MasterSystem: OS.DataTypes.JSConversions.basicTypeToJS(masterSystemIn, OS.Types.Text),
StartDate: OS.DataTypes.JSConversions.basicTypeToJS(startDateIn, OS.Types.DateTime),
EndDate: OS.DataTypes.JSConversions.basicTypeToJS(endDateIn, OS.Types.DateTime),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
MinCommunicationCost: OS.DataTypes.JSConversions.basicTypeToJS(minCommunicationCostIn, OS.Types.Text),
MaxCommunicationCost: OS.DataTypes.JSConversions.basicTypeToJS(maxCommunicationCostIn, OS.Types.Text),
StartPosition: OS.DataTypes.JSConversions.basicTypeToJS(startPositionIn, OS.Types.Integer),
Length: OS.DataTypes.JSConversions.basicTypeToJS(lengthIn, OS.Types.Integer),
CallType: OS.DataTypes.JSConversions.basicTypeToJS(callTypeIn, OS.Types.Text)
};
return controller.callServerAction("GetCommunications_v4", "screenservices/BALANCE_MBP/ActionGetCommunications_v4", "7uZwwaMkZ7v5avvcYjnIvw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetCommunications_v4"))();
executeServerActionResult.comunicationsOut = BALANCE_MBPModel.STR_COMMUNICATIONList.fromJS(outputs.Comunications);
executeServerActionResult.countOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Count, OS.Types.Integer);
executeServerActionResult.countSelectedOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.CountSelected, OS.Types.Integer);
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetCommunications_v4", [{
name: "Comunications",
attrName: "comunicationsOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_COMMUNICATIONList();
},
complexType: BALANCE_MBPModel.STR_COMMUNICATIONList
}, {
name: "Count",
attrName: "countOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "CountSelected",
attrName: "countSelectedOut",
mandatory: false,
dataType: OS.Types.Integer,
defaultValue: function () {
return 0;
}
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetDefaultValuesGetUsageParameters_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getDefaultValuesGetUsageParameters_BP$ServerAction = function (applicationIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetDefaultValuesGetUsageParameters_BP", "screenservices/BALANCE_MBP/ActionGetDefaultValuesGetUsageParameters_BP", "UoSvqMiofhpNyRVJfzPUQg", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetDefaultValuesGetUsageParameters_BP"))();
executeServerActionResult.operation2Out = OS.DataTypes.JSConversions.jsToBasicType(outputs.Operation2, OS.Types.Text);
executeServerActionResult.startPositionOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.StartPosition, OS.Types.Text);
executeServerActionResult.totalCountOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.TotalCount, OS.Types.Text);
executeServerActionResult.orderFieldOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.OrderField, OS.Types.Text);
executeServerActionResult.orderByOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.OrderBy, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetDefaultValuesGetUsageParameters_BP", [{
name: "Operation2",
attrName: "operation2Out",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "StartPosition",
attrName: "startPositionOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "TotalCount",
attrName: "totalCountOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OrderField",
attrName: "orderFieldOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "OrderBy",
attrName: "orderByOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetKanguruConsumptions_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_KANGURU_CONSUMPTIONSRecord"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getKanguruConsumptions_BP$ServerAction = function (applicationIn, processIn, timestampIn, refreshTokenIn, associationIdIn, contract_DNIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
Timestamp: OS.DataTypes.JSConversions.basicTypeToJS(timestampIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text)
};
return controller.callServerAction("GetKanguruConsumptions_BP", "screenservices/BALANCE_MBP/ActionGetKanguruConsumptions_BP", "7AJ1HRo1_4aVhzQ2s35JEg", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetKanguruConsumptions_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.isUnlimitedOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.IsUnlimited, OS.Types.Boolean);
executeServerActionResult.kanguruConsumptionsOut = BALANCE_MBPModel.STR_KANGURU_CONSUMPTIONSRecord.fromJS(outputs.KanguruConsumptions);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetKanguruConsumptions_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "IsUnlimited",
attrName: "isUnlimitedOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "KanguruConsumptions",
attrName: "kanguruConsumptionsOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.STR_KANGURU_CONSUMPTIONSRecord();
},
complexType: BALANCE_MBPModel.STR_KANGURU_CONSUMPTIONSRecord
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetKanguruConsumptions_BP_v2", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_KANGURU_CONSUMPTIONSRecord"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getKanguruConsumptions_BP_v2$ServerAction = function (applicationIn, processIn, timestampIn, refreshTokenIn, associationIdIn, contract_DNIn, callContext) {
var controller = this.controller;
var inputs = {
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
Timestamp: OS.DataTypes.JSConversions.basicTypeToJS(timestampIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text)
};
return controller.callServerAction("GetKanguruConsumptions_BP_v2", "screenservices/BALANCE_MBP/ActionGetKanguruConsumptions_BP_v2", "biNU8ESqok26h9DAwc8Vsw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetKanguruConsumptions_BP_v2"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.isUnlimitedOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.IsUnlimited, OS.Types.Boolean);
executeServerActionResult.kanguruConsumptionsOut = BALANCE_MBPModel.STR_KANGURU_CONSUMPTIONSRecord.fromJS(outputs.KanguruConsumptions);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetKanguruConsumptions_BP_v2", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "IsUnlimited",
attrName: "isUnlimitedOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "KanguruConsumptions",
attrName: "kanguruConsumptionsOut",
mandatory: false,
dataType: OS.Types.Record,
defaultValue: function () {
return new BALANCE_MBPModel.STR_KANGURU_CONSUMPTIONSRecord();
},
complexType: BALANCE_MBPModel.STR_KANGURU_CONSUMPTIONSRecord
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetNetDistribution_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_OfferDataRecordList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getNetDistribution_BP$ServerAction = function (processIn, iDIn, statusIn, mSISDNsListIn, timestampIn, refreshTokenIn, associationIdIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
ID: OS.DataTypes.JSConversions.basicTypeToJS(iDIn, OS.Types.Text),
Status: OS.DataTypes.JSConversions.basicTypeToJS(statusIn, OS.Types.Text),
MSISDNsList: mSISDNsListIn.toJS(OS.Types.Text),
Timestamp: OS.DataTypes.JSConversions.basicTypeToJS(timestampIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetNetDistribution_BP", "screenservices/BALANCE_MBP/ActionGetNetDistribution_BP", "XF+ISzv8fdowjfPcYcgWrg", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetNetDistribution_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.getOfferDataOutputOut = BALANCE_MBPModel.STR_OfferDataRecordList.fromJS(outputs.GetOfferDataOutput);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetNetDistribution_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "GetOfferDataOutput",
attrName: "getOfferDataOutputOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_OfferDataRecordList();
},
complexType: BALANCE_MBPModel.STR_OfferDataRecordList
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetPHBalance_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_PHBALANCEList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getPHBalance_BP$ServerAction = function (contract_DNIn, processIn, offerBalanceIn, offerDetailIn, refreshTokenIn, associationIdIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
OfferBalance: OS.DataTypes.JSConversions.basicTypeToJS(offerBalanceIn, OS.Types.Boolean),
OfferDetail: OS.DataTypes.JSConversions.basicTypeToJS(offerDetailIn, OS.Types.Boolean),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetPHBalance_BP", "screenservices/BALANCE_MBP/ActionGetPHBalance_BP", "5lHvZXOhZ+dnhIke6telfQ", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetPHBalance_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.balancesOut = BALANCE_MBPModel.STR_PHBALANCEList.fromJS(outputs.Balances);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetPHBalance_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Balances",
attrName: "balancesOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_PHBALANCEList();
},
complexType: BALANCE_MBPModel.STR_PHBALANCEList
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetPHBalance_BP_BO", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_PHBALANCEList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getPHBalance_BP_BO$ServerAction = function (contract_DNIn, processIn, offerBalanceIn, offerDetailIn, applicationIn, correlationIdIn, callContext) {
var controller = this.controller;
var inputs = {
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
OfferBalance: OS.DataTypes.JSConversions.basicTypeToJS(offerBalanceIn, OS.Types.Boolean),
OfferDetail: OS.DataTypes.JSConversions.basicTypeToJS(offerDetailIn, OS.Types.Boolean),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text),
CorrelationId: OS.DataTypes.JSConversions.basicTypeToJS(correlationIdIn, OS.Types.Text)
};
return controller.callServerAction("GetPHBalance_BP_BO", "screenservices/BALANCE_MBP/ActionGetPHBalance_BP_BO", "9XSTYMpIDuYiiTJjBZ8dew", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetPHBalance_BP_BO"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.balancesOut = BALANCE_MBPModel.STR_PHBALANCEList.fromJS(outputs.Balances);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetPHBalance_BP_BO", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Balances",
attrName: "balancesOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_PHBALANCEList();
},
complexType: BALANCE_MBPModel.STR_PHBALANCEList
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetPHBalanceV2_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_PHBALANCEList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getPHBalanceV2_BP$ServerAction = function (contract_DNIn, processIn, offerBalanceIn, offerDetailIn, refreshTokenIn, associationIdIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
OfferBalance: OS.DataTypes.JSConversions.basicTypeToJS(offerBalanceIn, OS.Types.Boolean),
OfferDetail: OS.DataTypes.JSConversions.basicTypeToJS(offerDetailIn, OS.Types.Boolean),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetPHBalanceV2_BP", "screenservices/BALANCE_MBP/ActionGetPHBalanceV2_BP", "NcWYN9a8vutk4F5xO0q3IA", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetPHBalanceV2_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.balancesOut = BALANCE_MBPModel.STR_PHBALANCEList.fromJS(outputs.Balances);
executeServerActionResult.nextChargeAmountOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.NextChargeAmount, OS.Types.Currency);
executeServerActionResult.nextChargeDateOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.NextChargeDate, OS.Types.Date);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetPHBalanceV2_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Balances",
attrName: "balancesOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_PHBALANCEList();
},
complexType: BALANCE_MBPModel.STR_PHBALANCEList
}, {
name: "NextChargeAmount",
attrName: "nextChargeAmountOut",
mandatory: false,
dataType: OS.Types.Currency,
defaultValue: function () {
return OS.DataTypes.Decimal.defaultValue;
}
}, {
name: "NextChargeDate",
attrName: "nextChargeDateOut",
mandatory: false,
dataType: OS.Types.Date,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetPHBalanceV3_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_PHBALANCEV2List"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getPHBalanceV3_BP$ServerAction = function (contract_DNIn, processIn, offerBalanceIn, offerDetailIn, refreshTokenIn, associationIdIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
Contract_DN: OS.DataTypes.JSConversions.basicTypeToJS(contract_DNIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
OfferBalance: OS.DataTypes.JSConversions.basicTypeToJS(offerBalanceIn, OS.Types.Boolean),
OfferDetail: OS.DataTypes.JSConversions.basicTypeToJS(offerDetailIn, OS.Types.Boolean),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetPHBalanceV3_BP", "screenservices/BALANCE_MBP/ActionGetPHBalanceV3_BP", "H2J128WccLc+jccodWRP_g", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetPHBalanceV3_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.balancesOut = BALANCE_MBPModel.STR_PHBALANCEV2List.fromJS(outputs.Balances);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetPHBalanceV3_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Balances",
attrName: "balancesOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_PHBALANCEV2List();
},
complexType: BALANCE_MBPModel.STR_PHBALANCEV2List
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetProductMaximumAutoRefill_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getProductMaximumAutoRefill_BP$ServerAction = function (platformIn, userUIDIn, deviceUIDIn, refreshTokenIn, associationIdIn, mSISDNIn, processIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
Platform: OS.DataTypes.JSConversions.basicTypeToJS(platformIn, OS.Types.Text),
UserUID: OS.DataTypes.JSConversions.basicTypeToJS(userUIDIn, OS.Types.Text),
DeviceUID: OS.DataTypes.JSConversions.basicTypeToJS(deviceUIDIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
MSISDN: OS.DataTypes.JSConversions.basicTypeToJS(mSISDNIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetProductMaximumAutoRefill_BP", "screenservices/BALANCE_MBP/ActionGetProductMaximumAutoRefill_BP", "Ek12ooOxn3UFB2tHbTOoAw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetProductMaximumAutoRefill_BP"))();
executeServerActionResult.currentValueOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.CurrentValue, OS.Types.Text);
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.errorOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Error, OS.Types.Text);
executeServerActionResult.maximumAllowedOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.MaximumAllowed, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetProductMaximumAutoRefill_BP", [{
name: "CurrentValue",
attrName: "currentValueOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Error",
attrName: "errorOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "MaximumAllowed",
attrName: "maximumAllowedOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.GetVoDUsage_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$STR_VoDLINEList", "BALANCE_MBP.model$STR_VoDDateList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.getVoDUsage_BP$ServerAction = function (refreshTokenIn, associationIdIn, billingAccountNumberIn, startDate_InputIn, endDate_InputIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
BillingAccountNumber: OS.DataTypes.JSConversions.basicTypeToJS(billingAccountNumberIn, OS.Types.Text),
StartDate_Input: OS.DataTypes.JSConversions.basicTypeToJS(startDate_InputIn, OS.Types.Date),
EndDate_Input: OS.DataTypes.JSConversions.basicTypeToJS(endDate_InputIn, OS.Types.Date),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("GetVoDUsage_BP", "screenservices/BALANCE_MBP/ActionGetVoDUsage_BP", "Mp9D+flQtb3ExM3LtQOFUw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetVoDUsage_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.messageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Message, OS.Types.Text);
executeServerActionResult.voDLineListOut = BALANCE_MBPModel.STR_VoDLINEList.fromJS(outputs.VoDLineList);
executeServerActionResult.voDDateListOut = BALANCE_MBPModel.STR_VoDDateList.fromJS(outputs.VoDDateList);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionGetVoDUsage_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Message",
attrName: "messageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "VoDLineList",
attrName: "voDLineListOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_VoDLINEList();
},
complexType: BALANCE_MBPModel.STR_VoDLINEList
}, {
name: "VoDDateList",
attrName: "voDDateListOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.STR_VoDDateList();
},
complexType: BALANCE_MBPModel.STR_VoDDateList
}]);
});
define("BALANCE_MBP.controller$ServerAction.ManageRefills_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.manageRefills_BP$ServerAction = function (refreshTokenIn, associationIdIn, mSISDNIn, processIn, iDIn, statusIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
MSISDN: OS.DataTypes.JSConversions.basicTypeToJS(mSISDNIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
ID: OS.DataTypes.JSConversions.basicTypeToJS(iDIn, OS.Types.Text),
Status: OS.DataTypes.JSConversions.basicTypeToJS(statusIn, OS.Types.Text),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("ManageRefills_BP", "screenservices/BALANCE_MBP/ActionManageRefills_BP", "q_jubHWlQcx10pKOVSm0vw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionManageRefills_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.isEligibleCustomerOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.IsEligibleCustomer, OS.Types.Boolean);
executeServerActionResult.errorMessageOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.ErrorMessage, OS.Types.Text);
executeServerActionResult.refillMaxOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.RefillMax, OS.Types.Text);
executeServerActionResult.refillCostOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.RefillCost, OS.Types.Text);
executeServerActionResult.refillVolumeOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.RefillVolume, OS.Types.Text);
executeServerActionResult.currRefillOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.CurrRefill, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionManageRefills_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "IsEligibleCustomer",
attrName: "isEligibleCustomerOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return false;
}
}, {
name: "ErrorMessage",
attrName: "errorMessageOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefillMax",
attrName: "refillMaxOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefillCost",
attrName: "refillCostOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "RefillVolume",
attrName: "refillVolumeOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}, {
name: "CurrRefill",
attrName: "currRefillOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.ParseDate", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.parseDate$ServerAction = function (dateStringIn, formatIn, callContext) {
var controller = this.controller;
var inputs = {
DateString: OS.DataTypes.JSConversions.basicTypeToJS(dateStringIn, OS.Types.Text),
Format: OS.DataTypes.JSConversions.basicTypeToJS(formatIn, OS.Types.Text)
};
return controller.callServerAction("ParseDate", "screenservices/BALANCE_MBP/ActionParseDate", "EkYumc+jkmncPIMffeEzhw", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssextensiondate_ActionParseDate"))();
executeServerActionResult.parsedDateOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.ParsedDate, OS.Types.DateTime);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssextensiondate_ActionParseDate", [{
name: "ParsedDate",
attrName: "parsedDateOut",
mandatory: false,
dataType: OS.Types.DateTime,
defaultValue: function () {
return OS.DataTypes.DateTime.defaultValue;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.SendBalanceNotFoundEmail", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.sendBalanceNotFoundEmail$ServerAction = function (mSISDNIn, pageNameIn, balanceNotFoundIn, applicationIn, callContext) {
var controller = this.controller;
var inputs = {
MSISDN: OS.DataTypes.JSConversions.basicTypeToJS(mSISDNIn, OS.Types.Text),
PageName: OS.DataTypes.JSConversions.basicTypeToJS(pageNameIn, OS.Types.Text),
BalanceNotFound: balanceNotFoundIn.toJS(),
Application: OS.DataTypes.JSConversions.basicTypeToJS(applicationIn, OS.Types.Text)
};
return controller.callServerAction("SendBalanceNotFoundEmail", "screenservices/BALANCE_MBP/ActionSendBalanceNotFoundEmail", "L5vc+ub6ApZfWD3AOCkF0g", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionSendBalanceNotFoundEmail"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionSendBalanceNotFoundEmail", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}]);
});
define("BALANCE_MBP.controller$ServerAction.String_Split", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller", "BALANCE_MBP.model$TextRecordList"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.string_Split$ServerAction = function (textIn, delimitersIn, callContext) {
var controller = this.controller;
var inputs = {
Text: OS.DataTypes.JSConversions.basicTypeToJS(textIn, OS.Types.Text),
Delimiters: OS.DataTypes.JSConversions.basicTypeToJS(delimitersIn, OS.Types.Text)
};
return controller.callServerAction("String_Split", "screenservices/BALANCE_MBP/ActionString_Split", "6feJ6Irm4QDy4cXRaz+vbQ", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssextensiontext_ActionString_Split"))();
executeServerActionResult.listOut = BALANCE_MBPModel.TextRecordList.fromJS(outputs.List);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssextensiontext_ActionString_Split", [{
name: "List",
attrName: "listOut",
mandatory: false,
dataType: OS.Types.RecordList,
defaultValue: function () {
return new BALANCE_MBPModel.TextRecordList();
},
complexType: BALANCE_MBPModel.TextRecordList
}]);
});
define("BALANCE_MBP.controller$ServerAction.UpdateProductMaximumAutoRefill_BP", ["exports", "OutSystems", "BALANCE_MBP.model", "BALANCE_MBP.controller"], function (exports, OutSystems, BALANCE_MBPModel, BALANCE_MBPController) {
var OS = OutSystems.Internal;
BALANCE_MBPController.default.updateProductMaximumAutoRefill_BP$ServerAction = function (platformIn, userUIDIn, deviceUIDIn, refreshTokenIn, associationIdIn, mSISDNIn, processIn, maximumRefillIn, usernameIn, applicationNameIn, callContext) {
var controller = this.controller;
var inputs = {
Platform: OS.DataTypes.JSConversions.basicTypeToJS(platformIn, OS.Types.Text),
UserUID: OS.DataTypes.JSConversions.basicTypeToJS(userUIDIn, OS.Types.Text),
DeviceUID: OS.DataTypes.JSConversions.basicTypeToJS(deviceUIDIn, OS.Types.Text),
RefreshToken: OS.DataTypes.JSConversions.basicTypeToJS(refreshTokenIn, OS.Types.Text),
AssociationId: OS.DataTypes.JSConversions.basicTypeToJS(associationIdIn, OS.Types.LongInteger),
MSISDN: OS.DataTypes.JSConversions.basicTypeToJS(mSISDNIn, OS.Types.Text),
Process: OS.DataTypes.JSConversions.basicTypeToJS(processIn, OS.Types.Text),
MaximumRefill: OS.DataTypes.JSConversions.basicTypeToJS(maximumRefillIn, OS.Types.Text),
Username: OS.DataTypes.JSConversions.basicTypeToJS(usernameIn, OS.Types.Text),
ApplicationName: OS.DataTypes.JSConversions.basicTypeToJS(applicationNameIn, OS.Types.Text)
};
return controller.callServerAction("UpdateProductMaximumAutoRefill_BP", "screenservices/BALANCE_MBP/ActionUpdateProductMaximumAutoRefill_BP", "1nVMAHY_c7XdTbZ5I8xIow", inputs, controller.callContext(callContext)).then(function (outputs) {
var executeServerActionResult = new (controller.constructor.getVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionUpdateProductMaximumAutoRefill_BP"))();
executeServerActionResult.successOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Success, OS.Types.Boolean);
executeServerActionResult.errorOut = OS.DataTypes.JSConversions.jsToBasicType(outputs.Error, OS.Types.Text);
return executeServerActionResult;
});
};
BALANCE_MBPController.default.constructor.registerVariableGroupType("BALANCE_MBP$rssespacebalance_bp_ActionUpdateProductMaximumAutoRefill_BP", [{
name: "Success",
attrName: "successOut",
mandatory: false,
dataType: OS.Types.Boolean,
defaultValue: function () {
return true;
}
}, {
name: "Error",
attrName: "errorOut",
mandatory: false,
dataType: OS.Types.Text,
defaultValue: function () {
return "";
}
}]);
});
define("BALANCE_MBP.controller", ["exports", "OutSystems", "BALANCE_MBP.model"], function (exports, OutSystems, BALANCE_MBPModel) {
var OS = OutSystems.Internal;
var BALANCE_MBPController = exports;
var Controller = (function (_super) {
__extends(Controller, _super);
function Controller() {
_super.apply(this, arguments);
}
Controller.prototype.clientActionProxies = {};
Controller.prototype.roles = {};
Controller.prototype.defaultTimeout = 120;
Controller.prototype.getDefaultTimeout = function () {
return BALANCE_MBPController.default.defaultTimeout;
};
return Controller;
})(OS.Controller.BaseModuleController);
BALANCE_MBPController.default = new Controller();
});
